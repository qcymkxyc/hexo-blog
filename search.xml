<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>伤寒论(郝万山)</title>
    <url>/posts/e9892345.html/</url>
    <content><![CDATA[<h1 id="太阳病辩证并治">太阳病辩证并治</h1>
<h2 id="太阳病辩证纲要">太阳病辩证纲要</h2>
<p>太阳之为病，脉浮，头项强痛而恶寒(1)</p>
<p>太阳病，发热，汗出，恶风，脉缓者，名为中风。(2)</p>
<p>太阳病，或已发热，或未发热，必恶寒，体痛，呕逆，脉阴阳俱紧者，名曰伤寒。(3)</p>
<p>太阳病，发热而渴，不恶寒者，为温病。若发汗已，身灼热者，名为风温，风温为病，脉阴阳俱浮，自汗出，身重，多眠睡，鼻息必鼾，语言难出。若被下者，小便不利，直视失溲，若被火者，微发黄色，剧则如惊痫，时瘛疭。若火熏之，一逆尚引日，再逆促命期。(6)</p>
<p>病有发热恶寒者,发于阳也;无热恶寒者,发于阴也.发于阳,七日愈;发于阴,六日愈.以阳数七,阴数六故也.(7)</p>
<p>太阳病,头痛至七日以上自愈者,以行其经近故也.若欲作再经者,针足阳明,使经不传则愈.(8)</p>
<p>太阳病,欲解时,从巳至未上.(9)</p>
<p>风家,表解而不了了者,十二日愈.(10)</p>
<p>伤寒一日,太阳受之,脉若静,为不传;颇欲吐,若燥烦,脉数急者,为传也.(4)</p>
<p>伤寒二三日,阳明,少阳症不见者,为不传也.(5)</p>
<h2 id="桂枝汤方">桂枝汤方</h2>
<p>太阳中风,阳浮而阴弱,阳浮者,热自发,阴弱者,汗自出,啬啬恶寒,淅淅恶风,翕翕发热,鼻鸣干呕者,桂枝汤主之.</p>
<p>桂枝三两(去皮) ,芍药三两,甘草二两(灸),生姜三两(切),大枣二十枚(擘)(12)</p>
<p>上五味,（口父）咀三味.以水七升,微火煮取三升,去滓,适温寒,服一升.服已须臾,啜热稀粥一升余,以助药力.温覆令一时许,遍身漐漐,微似有汗者宜佳,不可令如水琉璃,病必不除.若一服汗出病差,停后服,不必尽剂.若不汗更服依前法.又不汗,后服小促其间,半日许,令三服尽.若病重者,一日一夜服,周时观之.服一剂尽,病症犹在者,更作服;若汗不出,乃服至二三剂.禁生冷,粘滑,肉面,五辛,酒酪,臭恶等物.</p>
<h2 id="桂枝汤适应症">桂枝汤适应症</h2>
<h3 id="太阳病见汗出">太阳病见汗出</h3>
<p>太阳病,头痛,发热,汗出,恶风,桂枝汤主之(13)</p>
<h3 id="太阳病兼轻度里虚者">太阳病兼轻度里虚者</h3>
<p>太阳病,外证未解,脉浮弱者,当以汗解,宜桂枝汤.(42)</p>
<h3 id="汗下后太阳表证仍在者">汗下后太阳表证仍在者</h3>
<p>太阳病,下之后,其气上冲者,可与桂枝汤,方用前发.若不上冲着,不得与之.(15)</p>
<p>太阳病,先发汗不解,而复下之,脉浮者不愈.浮为在外,而反下之,故令不愈.今脉浮,故在外,当须解外则愈,宜桂枝汤(45)</p>
<p>伤寒发汗已解,半日许复烦,脉浮数者,可更发汗,宜桂枝汤.</p>
<h3 id="太阳病兼里实欲先解表者">太阳病兼里实欲先解表者</h3>
<p>太阳病,外证未解,不可下也,下之为逆,欲解外者,宜桂枝汤(44)</p>
<p>病常自汗出者,此为荣气和,荣气和者,外不谐,以卫气不共荣气谐和故尔.以荣行脉中,卫行脉外.复发其汗,荣卫和则愈,宜桂枝汤.(53)</p>
<p>病人脏无他病,时发热自汗出而不愈者,此卫气不和也.先其时发汗则愈,宜桂枝汤.(54)</p>
<h3 id="病重药轻治用针药并用">病重药轻,治用针药并用</h3>
<p>太阳病,初服桂枝汤,反烦不解者,先刺凤池,风府,却与桂枝汤则愈.(24)</p>
<h2 id="桂枝汤禁忌">桂枝汤禁忌</h2>
<p>桂枝本为解肌,若其人脉浮紧,发热汗不出者,不可与之也.常须识此,勿令误也.(16下)</p>
<p>若酒客病,不可与桂枝汤,得知则呕,以酒客病不喜甘故也.(17)</p>
<p>凡服桂枝汤吐者,其后必吐脓血也.(19)</p>
<h2 id="桂枝汤变方">桂枝汤变方</h2>
<h3 id="桂枝加葛根汤">桂枝加葛根汤</h3>
<p>太阳病,项背强几几,反汗出恶风者,桂枝加葛根汤主之.(14)</p>
<p>葛根四两 桂枝二两(去皮) 芍药二两 生姜三两(切) 甘草二两(灸) 大枣十二枚(擘)</p>
<p>右七味（口父）咀，以水一斗，先煮麻黄葛根，减二升，去沫，内诸药，煮取三升，去滓，温服一升，复取微似汗，不须啜粥，余如桂枝法将息及禁忌.(臣亿等谨按,仲景本论,太阳中风自汗出用桂枝,伤寒无汗用麻黄,今证云汗出恶风,而方中有麻黄,恐非本意也.第三卷有葛根汤证,云无汗恶风,正与此方同,是合用麻黄也.此云桂枝加葛根汤,恐是桂枝中但加葛根耳)</p>
<h3 id="桂枝加厚朴杏子汤">桂枝加厚朴杏子汤</h3>
<p>太阳病，下之微喘者，表未解故也，桂枝加厚朴杏子汤主之。（43）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 芍药三两 大枣十二枚（擘） 厚朴二两（灸，去皮） 杏仁五十枚（去皮尖）</p>
<p>上七味，以水七升，微火煮取三升，去滓，温服一升，覆取微似汗。</p>
<p>喘家作桂枝汤，加厚朴，杏子佳。（18）</p>
<h3 id="桂枝加附子汤">桂枝加附子汤</h3>
<p>太阳病，发汗，遂漏不止，其人恶风，小便难，四肢微急，难以屈伸者，桂枝加附子汤主之．(20)</p>
<p>桂枝三两(去皮) 　芍药三两　甘草三两（灸）生姜三两（切）　大枣十二枚（擘）　附子一枚（炮，去皮，破八片）</p>
<p>上六味，以水七升，煮取三升，去滓，温服一升．本云，桂枝汤，今加附子，将息如前法．</p>
<h3 id="桂枝去芍药汤证">桂枝去芍药汤证</h3>
<p>太阳病，下之后，脉促胸满者，桂枝去芍药汤主之。（21）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 大枣十二枚（擘）</p>
<p>上四味，以水七升，煮取三升，去滓，温服一升。本云，桂枝汤今去芍药。将息如前法。</p>
<h3 id="桂枝去芍药加附子汤证">桂枝去芍药加附子汤证</h3>
<p>若微寒，桂枝去芍药加附子汤主之。（22）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 大枣十二枚（擘） 附子一枚（炮，去皮，破八片）</p>
<p>上五味，以水七升，煮取三升，去滓，温服一升。本云，桂枝汤今去芍药加附子。将息如前法。</p>
<h3 id="桂枝新加汤证">桂枝新加汤证</h3>
<p>发汗后，身疼痛，脉沉迟者，桂枝加芍药生姜各一两，人参三两，新加汤主之。（62）</p>
<p>桂枝三两（去皮） 芍药四两 甘草二两（灸） 人参三两 大枣十二枚（擘） 生姜四两</p>
<p>上六位，以水一斗二升，煮取三升，去滓，温服一升。本云，桂枝汤，今加芍药、生姜、人参。</p>
<h2 id="麻黄汤方">麻黄汤方</h2>
<p>太阳病，头痛，发热，身疼腰痛，骨节疼痛，恶风，无汗而喘者，麻黄汤主之。（35）</p>
<p>麻黄三两（去节） 桂枝三两（去皮） 甘草一两（灸） 杏仁七十个（去皮尖）</p>
<p>上四味，以水九升，先煮麻黄，减二升，去上沫，内诸药，煮取二升半，去滓，温服八合。覆取微似汗，不须啜粥，余如桂枝法将息。</p>
<p>太阳病，十日以去，脉浮细而嗜卧者，外已解也。设胸满肋痛者，与小柴胡汤。脉但浮者，与麻黄汤。（37）</p>
<p>脉浮者，病在表，可发汗，宜麻黄汤。（51）</p>
<p>脉浮而数者，可发汗，宜麻黄汤（52）</p>
<h2 id="太阳伤寒衄解">太阳伤寒衄解</h2>
<p>太阳病，脉浮紧，无汗，发热，身疼痛，八九日不解，表证仍在，此当发其汗。服药已微除，其人发烦目暝，剧者必衄，衄乃解。所以然者，阳气重故也。麻黄汤主之。（46）</p>
<p>太阳病，脉浮紧，发热，身无汗，自衄者愈。（47）</p>
<p>伤寒脉浮紧，不发汗，因致衄者，麻黄汤主之。（55）</p>
<h2 id="麻黄汤其他适应症">麻黄汤其他适应症</h2>
<p>太阳与阳明合病,喘而胸满者,不可下,宜麻黄汤.(36)</p>
<h2 id="麻黄九禁">麻黄九禁</h2>
<p>咽喉干燥者,不可发汗.(83)</p>
<p>淋家,不可发汗,发汗必便血.(84)</p>
<p>疮家,虽身疼痛,不可发汗,汗出则痉.(85)</p>
<p>衄家,不可发汗,汗出必额上陷脉紧急,直视不能眴,不得眠.(86)</p>
<p>亡血家，不可发汗，发汗则寒栗而振。（87）</p>
<p>汗家，重发汗，必恍惚心乱，小便已阴痛，与禹余粮丸。（88）</p>
<p>病人有寒，复发汗，胃中冷，必吐蛔。（89）</p>
<p>脉浮数者，法当汗出而愈，若下之，身重心悸者，不可发汗，当自汗出乃解。所以然者，尺中脉微，此里虚，须表里实，津液自和，便自汗出愈。（49）</p>
<p>脉浮紧者,法当身疼痛,宜以汗解之,假令尺中迟者,不可发汗.何以知然?以荣气不足,血少故也.(50)</p>
<h2 id="太阳兼症">太阳兼症</h2>
<h3 id="葛根汤方">葛根汤方</h3>
<p>太阳病,项背强几几,无汗恶风,葛根汤主之.(31)</p>
<p>葛根四两 麻黄三两(去节) 桂枝二两(去皮) 生姜三两(切) 甘草二两(灸) 芍药二两 大枣二十枚(擘)</p>
<p>上七味,以水一斗,先煮麻黄,葛根,减二升,去白沫,内诸药,煮取三升,去滓,温服一升.覆取微似汗,余如桂枝法将息及禁忌.诸汤皆仿此.</p>
<h3 id="葛根加半夏汤证">葛根加半夏汤证</h3>
<p>太阳与阳明合病者,必自下利,葛根汤主之.(32)</p>
<p>太阳与阳明合病,不下利但呕者,葛根加半夏汤主之.(33)</p>
<p>葛根四两 麻黄三两(去节) 甘草二两(灸) 芍药二两 桂枝二两(去皮) 生姜二两(切) 半夏半升(洗) 大枣十二枚(擘)</p>
<p>上八味,以水一升,先煮葛根,麻黄,减二升,去白沫,内诸药,煮取三升,覆取微似汗.</p>
<h3 id="大青龙汤证">大青龙汤证</h3>
<p>太阳中风,脉浮紧,发热恶寒,身疼痛,不汗出而烦躁者,大青龙主之.若脉微弱,汗出恶风者,不可服之.服之则厥逆,筋惕肉瞤,此为逆也.(38)</p>
<p>大青龙汤方</p>
<p>麻黄六两(去节) 桂枝二两(去皮) 甘草二两(灸) 杏仁四十枚(去皮尖) 生姜三两(切) 大枣十枚(擘) 石膏如鸡子大(碎)</p>
<p>上七味,以水七升,先煮麻黄,减二升,去上沫,内诸药,煮取三升,去滓,温服一升,取微似汗.汗出多者,温粉粉之.一服汗者,停后服.若复服,汗多亡阳遂虚,恶风烦躁,不得眠也.</p>
<p>伤寒脉浮缓,身不疼但重,乍有轻时,无少阴症者,大青龙汤发之.(39)</p>
<h3 id="小青龙汤证">小青龙汤证</h3>
<p>伤寒表不解，心下有水气，干呕发热而咳，或渴，或利，或噎，或小便不利、少腹满，或喘者，小青龙汤主之。（40）</p>
<p>麻黄（去节） 芍药 细辛 干姜 甘草（灸） 桂枝（去皮） 各三两 五味子半升 半夏半升（洗）</p>
<p>上八味，以水一斗，先煮麻黄，减二升，去上沫，内诸药，煮取三升，去滓，温服一升。若渴，去半夏，加栝楼根三两；若微利，去麻黄，加荛花，如一鸡子，熬令赤色；若噎，去麻黄，加附子一枚，炮；若小便不利，少腹满者，去麻黄，加茯苓四两；若喘，去麻黄，加杏仁半升，去皮尖。且荛花不治利，麻黄主喘，今此语反之，宜非仲景意。（臣亿等谨按，小青龙汤，大要治水。又按《本草》，荛花下十二水，若水去，利则止也。又按《千金》形肿者应内麻黄，乃杏仁者，以麻黄发其阳故也。以此证之，岂非仲景意也。）</p>
<p>伤寒新下有水气,咳而微喘,发热不渴.服汤已渴者,此寒去欲解也.小青龙汤主之.(41)</p>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
      </tags>
  </entry>
  <entry>
    <title>用YOLO3实现犬种实时检测</title>
    <url>/posts/fa14c502.html/</url>
    <content><![CDATA[<h2 id="效果">效果</h2>
<p>利用YOLO v3实现的犬种实时检测的一次记录,下面是检测结果:</p>
<h3 id="单个大目标">单个大目标:</h3>

        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>
        <div class="bbplayer">
        <iframe class="bbplayer" id="mmedia-uzAPFFSB" src="//player.bilibili.com/player.html?aid=86257908&page=1&high_quality=1&danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>
        </div>
        <script>
            document.getElementById("mmedia-uzAPFFSB").style.height=document.getElementById("mmedia-uzAPFFSB").scrollWidth*0.76+"px";
            window.onresize = function(){
              document.getElementById("mmedia-uzAPFFSB").style.height=document.getElementById("mmedia-uzAPFFSB").scrollWidth*0.76+"px";
            };
        </script>
        
<h3 id="多个小目标">多个小目标:</h3>

        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>
        <div class="bbplayer">
        <iframe class="bbplayer" id="mmedia-WgHoafNt" src="//player.bilibili.com/player.html?aid=86258451&page=1&high_quality=1&danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>
        </div>
        <script>
            document.getElementById("mmedia-WgHoafNt").style.height=document.getElementById("mmedia-WgHoafNt").scrollWidth*0.76+"px";
            window.onresize = function(){
              document.getElementById("mmedia-WgHoafNt").style.height=document.getElementById("mmedia-WgHoafNt").scrollWidth*0.76+"px";
            };
        </script>
        
<p>FPS大概12左右(!-_- ,显卡1060)</p>
<h3 id="测试集结果">测试集结果:</h3>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/combine_image_result.jpg">

</div>
<p>上图中蓝色的框表示Ground Truth,红色的框表示Bounding Box</p>
<h2 id="数据集">数据集</h2>
<p>数据来自于ImageNet的<a href="http://vision.stanford.edu/aditya86/ImageNetDogs" target="_blank" rel="noopener">ImageNetDogs</a>,共有120个犬种,20580张图片</p>
<p>由于这里仅是用于检测狗,所以我这里把所有的犬种合为一类,也就是说,class仅有dog一个标签,在yolo v3中对应一个logistic</p>
<h2 id="环境">环境</h2>
<ul>
<li>tensorflow-gpu-1.1.3</li>
<li>keras-2.1.5</li>
<li>GTX 1060</li>
</ul>
<h2 id="训练">训练</h2>
<p>训练模型也是在现有的YOLO v3的基础上做fine-tune,<a href="https://github.com/qqwweee/keras-yolo3" target="_blank" rel="noopener">git仓库地址</a></p>
<h3 id="整理数据">整理数据</h3>
<p>即整理出适合模型的输入形式,以txt文件保存,如下,具体代码不再阐述.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_4801.jpg  <span class="number">93</span>,<span class="number">145</span>,<span class="number">218</span>,<span class="number">371</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_20429.jpg  <span class="number">205</span>,<span class="number">78</span>,<span class="number">336</span>,<span class="number">323</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_5080.jpg  <span class="number">170</span>,<span class="number">73</span>,<span class="number">370</span>,<span class="number">374</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_19261.jpg  <span class="number">26</span>,<span class="number">16</span>,<span class="number">473</span>,<span class="number">481</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_5732.jpg  <span class="number">96</span>,<span class="number">79</span>,<span class="number">267</span>,<span class="number">442</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_4952.jpg  <span class="number">12</span>,<span class="number">0</span>,<span class="number">499</span>,<span class="number">374</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_5066.jpg  <span class="number">85</span>,<span class="number">0</span>,<span class="number">330</span>,<span class="number">490</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_3817.jpg  <span class="number">121</span>,<span class="number">111</span>,<span class="number">468</span>,<span class="number">330</span>,<span class="number">0</span></span><br><span class="line">data/JEPGImages/n02109961-Eskimo_dog/n02109961_4369.jpg  <span class="number">249</span>,<span class="number">34</span>,<span class="number">499</span>,<span class="number">333</span>,<span class="number">0</span> <span class="number">37</span>,<span class="number">41</span>,<span class="number">291</span>,<span class="number">334</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>格式为(图片地址 GroundTruth1信息 GroundTruth2信息 ..),每个Ground Truth信息为(x_min,y_min,x_max,y_max,classID),即左上角坐标,右下角坐标以及类别ID</p>
</blockquote>
<h3 id="修改配置">修改配置</h3>
<blockquote>
<p>主要修改yolov3.cfg文件中的配置</p>
<ul>
<li>三个不同尺度的Feature Map对应的filter均改为改为18,仅有一类</li>
<li>batch改为8(显存限制)</li>
<li>random为1.(调整不同尺寸的图片输入,保证效果)</li>
</ul>
</blockquote>
<h3 id="anchor-box聚类">Anchor Box聚类</h3>
<p>(个人认为这是比较重要的一步,后面会说明),通过kmeans对Ground Truth进行kmeans聚类,以此确定Anchor Box的尺寸.所用的衡量标准<span class="math inline">\(1-IOU(ground truth,centroid)\)</span>.其中,<span class="math inline">\(centroid\)</span>表示聚点的数值,聚类的结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">K anchors:</span><br><span class="line"> [[<span class="number">138</span> <span class="number">178</span>]</span><br><span class="line"> [<span class="number">153</span> <span class="number">322</span>]</span><br><span class="line"> [<span class="number">155</span> <span class="number">189</span>]</span><br><span class="line"> [<span class="number">195</span> <span class="number">246</span>]</span><br><span class="line"> [<span class="number">251</span> <span class="number">174</span>]</span><br><span class="line"> [<span class="number">281</span> <span class="number">309</span>]</span><br><span class="line"> [<span class="number">338</span> <span class="number">295</span>]</span><br><span class="line"> [<span class="number">410</span> <span class="number">331</span>]</span><br><span class="line"> [<span class="number">412</span> <span class="number">222</span>]]</span><br><span class="line">Accuracy: <span class="number">91.20</span>%</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的Accuracy是每个Ground Truth和聚点的平均IOU</p>
</blockquote>
<p><strong>对应的9个Anchor Box散点图(没错,这真的是聚类的结果)</strong></p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/AnchorBox聚类.png">

</div>
<h3 id="训练-1">训练</h3>
<p>在台式机上跑了大概两天.但loss一直降不下来,一直维持在17左右.(我怀疑这可能和图片的质量有关,在测试集的示例可以看到,有些样本是没有标记框的,这可能导致loss降不下来,后面总结部分我会详细说明)</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/val_loss.png">

</div>
<p>在训练后期,学习率调小至1e-8,但对loss都没什么影响,最多减小0.5左右</p>
<h2 id="问题总结以及改进">问题总结以及改进</h2>
<h3 id="关于anchor-box聚类">关于Anchor Box聚类</h3>
<blockquote>
<p>很多博客上说Anchor Box的聚类对最终结果的影响不大,但是在这个数据集上,聚类的效果挺明显的(可能是数据集本身的差异),下面是用源生的yolo3下的Anchor Box(这个应该是VOC数据集的Anchor Box)训练的结果:</p>
</blockquote>

        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>
        <div class="bbplayer">
        <iframe class="bbplayer" id="mmedia-plAvyjvc" src="//player.bilibili.com/player.html?aid=86258451&page=2&high_quality=1&danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>
        </div>
        <script>
            document.getElementById("mmedia-plAvyjvc").style.height=document.getElementById("mmedia-plAvyjvc").scrollWidth*0.76+"px";
            window.onresize = function(){
              document.getElementById("mmedia-plAvyjvc").style.height=document.getElementById("mmedia-plAvyjvc").scrollWidth*0.76+"px";
            };
        </script>
        
<blockquote>
<p>对比开始的<a href="#多个小目标">检测视频</a>,可以看到改进还是挺明显的.</p>
</blockquote>
<h3 id="关于模型loss">关于模型Loss</h3>
<p>模型loss分两个方面.</p>
<ol style="list-style-type: decimal">
<li>loss下降到一定的数值就难以下降,大概在17左右</li>
</ol>
<blockquote>
<p>这可能和数据本身的质量有关,因为数据集本身是针对不同的犬种进行标注,并不是对&quot;狗&quot;这个种类进行标注,所以导致有些图片缺少标记框,比如下面几张图片数据:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/14.jpg">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/24.jpg">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/206.jpg">

</div>
<p>一旦模型检测出没有标记的狗,就相当于训练数据&quot;告诉&quot;模型检测是错误的,所以,loss居高不下.另外,这也反过来影响模型的表现,此时模型已经不知道孰对孰错了.</p>
<p>所以,要想降低loss,需要对数据进行重新标注,理论上loss应该会下降.</p>
</blockquote>
<ol start="2" style="list-style-type: decimal">
<li>验证集的loss总是低于训练集的loss</li>
</ol>
<blockquote>
<p>在训练的过程中,验证集的loss总是低于训练集的loss,不知道是何原因,这个问题至今无法解决.</p>
</blockquote>
<h3 id="侧面目标效果差">侧面目标效果差</h3>
<blockquote>
<p>侧面目标检测效果很差,很多时候检测不出或者置信度很低(这其实在测试视频中也有所反应):</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/12.jpg">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/26.jpg">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/143.jpg">

</div>
<p>可能是由于数据集中侧面图片比较少的关系,需要在原有数据集上对侧面图片做上采样(比如Mix Up,加噪声等).总之,就是增加这类图片的数据量,再放入模型训练.</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>舌诊总结</title>
    <url>/posts/a3a01f7d.html/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e8de4007a2b27ea2e9e5eaf58ffd1230784a3797c49d3d22221cc2aa3f0439fa">647bb22ce8122aecc5c04756795cc8db56ece07fc648ca974f9ebff8661cf44d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
      </tags>
  </entry>
  <entry>
    <title>Marr-Hildreth算子</title>
    <url>/posts/d6a12e0a.html/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p><code>Marr-Hildreth</code>算子是边缘检测算子的一种，相比于<code>Sobel</code>和<code>Laplace</code>这样的算子，其对于大区域，有更好的泛化性。</p>
<h2 id="高斯拉普拉斯算子">高斯拉普拉斯算子</h2>
<p><code>Marr</code>和<code>Hildreth</code>认为：像<code>Sobel</code>和<code>Laplace</code>这样的算法大区域的模糊边缘，一个图像的灰度变化和图像的尺度是相关的。所以对于大的区域，应该用大的算子；对于小的区域，应该用小的算子。满足这个条件的有高斯拉普拉斯算子(<code>LoG</code>)。</p>
<p>高斯拉普拉斯算子相当于是对图像先做高斯模糊，再做<code>Laplacian</code>变换：</p>
<p>已知二维的高斯函数为： <span class="math display">\[
G(x,y)= exp(-\frac{x^2+y^2}{2\sigma^2})     \tag 1
\]</span> 再做<code>Laplacian</code>变换为: <span class="math display">\[
\nabla^2G(x,y)=\frac{\partial^2G(x,y)}{\partial x^2}+\frac{\partial^2G(x,y)}{\partial y^2}  \tag 2
\]</span> 上式可以变换为： <span class="math display">\[
\frac{\partial }{\partial x}
\left( \frac{-x}{\sigma^2} \cdot exp(-\frac{x^2+y^2}{2\sigma^2})  \right)+
\frac{\partial }{\partial y}
\left( \frac{-y}{\sigma^2} \cdot exp(-\frac{x^2+y^2}{2\sigma^2}) \right)
\tag 3
\]</span> 进一步化简为： <span class="math display">\[
\left( \frac{x^2}{\sigma^4} - \frac{1}{\sigma^2}\right) \cdot exp(-\frac{x^2 + y^2}{2\sigma^2})+
\left( \frac{y^2}{\sigma^4} - \frac{1}{\sigma^2}\right) \cdot exp(-\frac{x^2 + y^2}{2\sigma^2})
\tag 4
\]</span> 整理后得： <span class="math display">\[
\nabla^2G(x,y)= \left( \frac{x^2+y^2-2\sigma^2}{\sigma^4} \right) \cdot exp(-\frac{x^2+y^2}{2\sigma^2})     \tag 5
\]</span> 倒立的<code>LoG</code>算子入如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2021-12-10T10-19-27.731Z.png">

</div>
<p>其中，图a表示倒立的<code>LoG</code>算子。</p>
<h2 id="高斯差分算子">高斯差分算子</h2>
<p>对于公式（5），也可以用高斯差分（<code>DoG</code>）来代替： <span class="math display">\[
D_G(x,y)=
\frac{1}{2\pi\sigma_1^2} \cdot exp(-\frac{x^2+y^2}{2 \sigma_1^2})-
\frac{1}{2\pi\sigma_2^2} \cdot exp(-\frac{x^2+y^2}{2 \sigma_2^2})
\tag 6
\]</span> <strong>所以，高斯差分的目的实际上是求边缘</strong>。其中，<span class="math inline">\(\sigma_1\)</span>以及<span class="math inline">\(\sigma_2\)</span>和式（7）中的<span class="math inline">\(\sigma\)</span>有如下对应关系： <span class="math display">\[
\sigma^2=\frac{\sigma_1^2\sigma_2^2}{\sigma_1^2-\sigma_2^2}ln\left[ \frac{\sigma_1^2}{\sigma_2^2} \right]   \tag 7
\]</span> 通常，<span class="math inline">\(\sigma_1\)</span>和<span class="math inline">\(\sigma_2\)</span>的比例为<span class="math inline">\(1:1.75\)</span>和<span class="math inline">\(1:1.6\)</span>.</p>
<p>也就是说，在用高斯差分时，先确定<code>LoG</code>中的<span class="math inline">\(\sigma\)</span>的值，再利用<span class="math inline">\(\sigma_1\)</span>和<span class="math inline">\(\sigma_2\)</span>的比例计算<span class="math inline">\(\sigma_1\)</span>和<span class="math inline">\(\sigma_2\)</span>。</p>
<h2 id="补充高斯滤波器的性质">补充：高斯滤波器的性质</h2>
<p>通常在计算二维的高斯滤波器时，不是直接的计算其滤波器，而是将其拆为两个单维的高斯滤波器。这使得其在计算效率上大大提高，下面说明高斯滤波器的性质。</p>
<h3 id="可分离性">可分离性</h3>
<ul>
<li>可分离性：即一个二维的高斯滤波可以分拆成两次一维滤波</li>
</ul>
<p>如我们用滤波器<span class="math inline">\(h(x,y)\)</span>对图像<span class="math inline">\(f(x,y)\)</span>进行滤波，有： <span class="math display">\[
f(x,y) \ast h(x,y)=f(x,y) \ast h_x(x) \ast h_y(y)   \tag {10}
\]</span> 其中，<span class="math inline">\(h(x,y)=exp(-\frac{x^2+y^2}{2\sigma^2})\)</span>,<span class="math inline">\(h_x(x)=exp(-\frac{x^2}{2\sigma^2})\)</span>,<span class="math inline">\(h_y(y)=exp(-\frac{y^2}{2\sigma^2})\)</span>.</p>
<h3 id="可叠加性">可叠加性</h3>
<ul>
<li>可叠加性：两个高斯函数的乘积和卷积也是高斯函数</li>
</ul>
<p>设有两个高斯函数的均值和标准差分别为<span class="math inline">\(m_f,m_g\)</span>和<span class="math inline">\(\sigma_f,\sigma_g\)</span></p>
<p>则两个高斯函数乘积所组成的高斯函数的均值和方差为： <span class="math display">\[
\left( 
m_{f \times g}=\frac{m_f\sigma_g^2+m_g\sigma_f^2}{\sigma_f^2+\sigma_g^2}, 
\sigma_{f \times g}= \sqrt{\frac{\sigma_f^2\sigma_g^2}{\sigma_f^2+\sigma_g^2}} 
\right)
\]</span> 两个高斯函数卷积组成的高斯函数的均值和方差为： <span class="math display">\[
\left(
m_{ f\otimes g}=m_f + m_g,
\sigma_{f \otimes g}=\sqrt{\sigma_f^2+\sigma_g^2}
\right)
\]</span></p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>SIFT算法总结</title>
    <url>/posts/a82dd048.html/</url>
    <content><![CDATA[<h2 id="概述">概述</h2>
<p><code>SITF</code>全名<code>Scale-invariant feature transform</code>,即尺度不变特征变换。实质上，<code>SIFT</code>所提取的特征是角点上的特征，且一定程度上保证它的旋转、尺度不变性。所以，<code>SIFT</code>本身并非一种匹配算法，<code>SIFT</code>实质上只是一种特征，由于<code>SIFT</code>提取的特征点比较稳定，我们在实际操作中仅仅是利用这种特征来做特征点匹配而已。</p>
<p><code>SIFT</code>较为复杂，共分为以下几个步骤：</p>
<ul>
<li>建立尺度空间</li>
<li>检测局部极值</li>
<li>计算关键点方向</li>
<li>建立关键点描述子</li>
</ul>
<h2 id="尺度空间">尺度空间</h2>
<h3 id="高斯金字塔">高斯金字塔</h3>
<p>尺度空间用更通俗的说法就是高斯金字塔，高斯金字塔实际上就是隔点取点，对图像进行多次下采样。每做一次下采样图像的大小就变为了以前的一半，多次下采样之后就形成了一个类似金字塔的形状。如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1337254665_2720.jpg">

</div>
<p>但仅仅是图像求高斯金字塔是不够的，我们需要对多次下采样的多个结果图像进行高斯模糊，每幅图的高斯模糊的<span class="math inline">\(\sigma\)</span>的值是不同的。下面分别详述。</p>
<h3 id="尺度空间-1">尺度空间</h3>
<p>首先，在上述的求金字塔的过程中，需要补充一点:每一次下采样会下采样多张图片。例如，对原图<span class="math inline">\(M \times N\)</span>大小的图片进行一次下采样，得到$  $大小的图片是多张，而非一张。这样的多张图片称为一组（论文中被称为一个<code>octave</code>），这里的一组即一次下采样产生的多张图片。每一组的图片称为“层”，那么层的个数就为一组图像中图像的个数。</p>
<p>此时，对于每一组中的每一层图像，之前提到过，我们对他们的高斯模糊的<span class="math inline">\(\sigma\)</span>是不同的，所以需要确定<span class="math inline">\(\sigma\)</span>的值。</p>
<p>综上，现在对于尺度空间，我们需要确定以下三个数值：</p>
<ul>
<li>尺度空间的组数。也就是下采样的次数</li>
<li>每一组的层数。一次下采样产生多少张图片</li>
<li>每一层的<span class="math inline">\(\sigma\)</span>的值。每张图片高斯模糊的<span class="math inline">\(\sigma\)</span>值</li>
</ul>
<h4 id="尺度空间组数的确定">尺度空间组数的确定</h4>
<p>组数（<span class="math inline">\(O\)</span>）： <span class="math display">\[
O=\lfloor log_2(min(M,N)) \rfloor -     3 \tag {1}
\]</span> 其中，<span class="math inline">\(M\)</span>和<span class="math inline">\(N\)</span>分别表示图片的长和宽.</p>
<h4 id="尺度空间层数的确定">尺度空间层数的确定</h4>
<p>层数<span class="math inline">\(S\)</span>可以表示为： <span class="math display">\[
S = n+ 3 \tag 2
\]</span> 其中，<span class="math inline">\(n\)</span>表示需要提取的特征层的层数（后面会讲到）。</p>
<h4 id="高斯滤波参数的确定">高斯滤波参数的确定</h4>
<p>每层和每组的<span class="math inline">\(\sigma\)</span>之间的关系如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2021-12-06T11-24-57.869Z.png">

</div>
<p>其中，<span class="math inline">\(k=2^{\frac{1}{n}}\)</span>,<span class="math inline">\(\sigma_1=\sqrt{1.6^2-0.5^2}=1.52\)</span>。</p>
<p>上图中，第一组的第一层的<span class="math inline">\(\sigma\)</span>值为<span class="math inline">\(1.52\)</span>,第二层就为<span class="math inline">\(k \times 1.52\)</span>,第三层就为<span class="math inline">\(k^2 \times 1.52\)</span>,以此类推。第二组的起始<span class="math inline">\(\sigma\)</span>为<span class="math inline">\(2\sigma_1\)</span>也就是<span class="math inline">\(2 \times 1.52\)</span>,后面的<span class="math inline">\(\sigma\)</span>以<span class="math inline">\(k\)</span>倍递增。</p>
<p>至此，我们就得到一个完整的高斯金字塔。</p>
<h2 id="检测局部极值">检测局部极值</h2>
<p>在<code>SIFT</code>算法中，局部极值点指的是角点。<code>SIFT</code>算法的做法是先找到所有的图像分隔边缘点，然后再剔除非角点的点（即包括边缘直线，边缘曲线等），剩下的就是角点本身了。但在找到角点后还没有完，<code>SIFT</code>会对角点进行再做一次精确筛选。</p>
<h3 id="查找初始关键点">查找初始关键点</h3>
<p>在<code>SIFT</code>算法中，初始关键点定义为边缘点。那么，如何获取边缘点呢，我们最容易想到的就是<code>Canny</code>边缘检测，<code>Sobel</code>,<code>Laplacian</code>等。但在 <code>SIFT</code>算法中，是采用的高斯差分算法（<code>DoG</code>,<code>Difference of Gauss</code>）。</p>
<p><strong>采用高斯差分算法的目的就是边缘检测</strong>,这里实际上是参考了<a href="/posts/d6a12e0a.html/" title="Marr-Hildreth算子">Marr-Hildreth算子</a>的边缘检测。</p>
<p>我们通过高斯差分算法得到了图像在不同尺度下的边缘点。</p>
<p>具体做法如下：</p>
<p>在<a href="#尺度空间">尺度空间</a>中，我们得到了高斯金字塔，我只需要对相邻的两个层做差，即得到了高斯差分金字塔，示意图如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2021-12-06T11-16-16.630Z.png">

</div>
<p>从上图可以看出，我们已经得到了基本的图像边缘点，也就是图像的初始关键点。</p>
<h3 id="改进关键点位置的精度">改进关键点位置的精度</h3>
<p>我们现在得到的是图像的边缘。<code>SIFT</code>算法认为一个特征点不仅是在<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>方向有较高的梯度，而且在<span class="math inline">\(\sigma\)</span>方向上也有较高的梯度，也就是在上一节我们提到的“层”上有较高的梯度。我们可以把<span class="math inline">\(\sigma\)</span>轴看成<span class="math inline">\(z\)</span>轴，然后在<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>和<span class="math inline">\(z\)</span>三个方向上查找极值。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2021-12-16T10-47-55.229Z.png">

</div>
<p>然而，在图像中，<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>和<span class="math inline">\(\sigma\)</span>的值都是离散值，如果利用直接求差分的方式并不准确。所以算法利用了函数拟合的方式，即先用几个点拟合一个函数，再在拟合好的函数中求极值。</p>
<p>对于函数的拟合我们可以利用插值的方式，例如<code>三次样条插值</code>，<code>多项式插值</code>等。在论文中，作者采用了<code>泰勒展开式</code>。</p>
<p>令向量<span class="math inline">\((x,y,\sigma)\)</span>为<span class="math inline">\(s\)</span>,由泰勒展开式为： <span class="math display">\[
f(s)=f(s_0)+\frac{\partial f}{\partial s}(s - s_0)+ \frac{1}{2} \cdot \frac{\partial^2f}{\partial s^2}(s - s_0)^2 + R_n(s)      \tag 3
\]</span> 其中，<span class="math inline">\(R_n(s)\)</span>为近似量。</p>
<p>令上式的<span class="math inline">\(s_0\)</span>为<span class="math inline">\(0\)</span>，上式可以近似为： <span class="math display">\[
f(s)=f(0)+\frac{\partial f}{\partial s}s+ \frac{\partial^2f}{\partial s^2}s^2       \tag 4
\]</span> 其中 <span class="math display">\[
\frac{\partial f}{\partial s}=
\begin{bmatrix}
\frac{\partial f}{\partial x} \\
\frac{\partial f}{\partial y} \\
\frac{\partial f}{\partial \sigma}
\end{bmatrix}
\tag 5
\]</span> <span class="math inline">\(\frac{\partial^2f}{\partial s^2}\)</span>实际上为一个海森矩阵，令 <span class="math inline">\(\frac{\partial^2f}{\partial s^2}\)</span>得到的海森矩阵为<span class="math inline">\(H\)</span>，则<span class="math inline">\(H\)</span>表示为：</p>
<h2 id="关键点方向">关键点方向</h2>
<h2 id="关键点描述子">关键点描述子</h2>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>胸痹心痛短气病脉证治</title>
    <url>/posts/562ce80d.html/</url>
    <content><![CDATA[<p>师曰：夫脉当取太过不及，阳微阴弦，即胸痹而痛，所以然者，责其极虚也。今阳虚知在上焦，所以胸痹、心痛者，以其阴弦故也。</p>
<p>平人无寒热，短气不足以息者，实也。</p>
<blockquote>

</blockquote>
<p>胸痹之病，喘息咳唾，胸背痛，短气，寸口脉沉而迟，关上小紧数，栝蒌薤白白酒汤主之。</p>
<h3 id="栝蒌薤白白酒汤方">栝蒌薤白白酒汤方</h3>
<p>栝蒌实一枚(捣) 薤白半斤 白酒七升</p>
<p>右三味,同煮,取二升,分温再服.</p>
<p>胸痹不得卧,心痛彻背者,栝蒌薤白半夏汤主之.</p>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>金匮要略</tag>
      </tags>
  </entry>
  <entry>
    <title>太阳变证</title>
    <url>/posts/364ada3d.html/</url>
    <content><![CDATA[<h2 id="变证治则">变证治则</h2>
<p>太阳病三日,已发汗,若吐,若下,若温针,仍不解者,此为坏病,桂枝不中与之.观其脉证,知范何逆,随证治之.(16上)</p>
<blockquote>
<p>坏病并非固定,根据每个人的体质不同而不同,可虚可实,可寒可热.</p>
</blockquote>
<h2 id="辩寒热真假">辩寒热真假</h2>
<p>病人身大热,反欲得衣者,热在皮肤,寒在骨髓也;身大寒,反不欲近衣者,寒在皮肤,热在骨髓也.(11)</p>
<blockquote>
<p>内寒外热:阴盛阳浮证</p>
<p>内热外寒症状包括:</p>
<ul>
<li>胸脯灼热</li>
<li>口渴心烦</li>
<li>舌红苔黄</li>
<li>大便干燥,小便短赤</li>
<li><strong>手足厥冷</strong>(这里的冷并非全身冷)</li>
</ul>
<p><strong>这里的内热外寒证实际上是指厥阴病篇的热厥</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
        <tag>太阳病</tag>
      </tags>
  </entry>
  <entry>
    <title>奈奎斯特采样定理推导</title>
    <url>/posts/88a0752c.html/</url>
    <content><![CDATA[<p>奈奎斯特采样定理：信号的采样频率必须大于被测信号最高频率的两倍时，采样之后的数字信号能够完整保留原始信号的信息。</p>
<h1 id="傅里叶变换">傅里叶变换</h1>
<p>设一个周期信号为<span class="math inline">\(f(t)\)</span>，其<a href="https://www.zhangqi2019.top/posts/fb91b52c.html/" target="_blank" rel="noopener">傅里叶变换</a>可以表示为: <span class="math display">\[
F(\mu)=\xi\lbrace f(t)\rbrace=\int_{-\infty}^{\infty}f(t) \cdot e^{-i \omega t}dt   \tag 1
\]</span> 其中，<span class="math inline">\(\xi\)</span>表示对时域信号<span class="math inline">\(f(t)\)</span>进行傅里叶变换。<span class="math inline">\(F(\mu)\)</span>是变换后的频域函数，且是一个正负方向无限扩展的函数。</p>
<p>下图是一个方波的傅里叶变换的结果：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/972e8186a6266c18b8a19347e2d8d316.jpeg">

</div>
<p>但在实际中，<span class="math inline">\(F(\mu )\)</span>不会是一个无限扩展的函数，<span class="math inline">\(F(\mu)\)</span>会受到模拟信号带宽的限制.即: <span class="math display">\[
F(\mu)=
\begin{cases} 
F(\mu) &amp; \text {if $|\mu| &lt; k$ } \\
0 &amp; \text {others}
\end{cases}
\tag 2
\]</span></p>
<h1 id="冲激函数及冲激串">冲激函数及冲激串</h1>
<h2 id="冲激函数及性质">冲激函数及性质</h2>
<p>定义冲激函数<span class="math inline">\(\delta(t)\)</span>： <span class="math display">\[
\delta(t)=
\begin{cases}
1&amp; \text {if $t=0$ } \\
0 &amp; \text{others}
\end{cases}     
\tag 3
\]</span> 冲激函数具有以下性质：</p>
<ul>
<li><span class="math inline">\(\int_{-\infty}^{\infty}f(t) \cdot \delta(t) dt=f(0)\)</span></li>
<li><span class="math inline">\(\int_{-\infty}^{\infty}\delta(t)dt=1\)</span></li>
<li><span class="math inline">\(\int_{-\infty}^{\infty}f(t ) \cdot \delta(t- t_0) dt=f(t_0)\)</span></li>
</ul>
<h2 id="冲激函数的傅里叶变换">冲激函数的傅里叶变换</h2>
<p>冲激函数<span class="math inline">\(\delta{(t)}\)</span>的傅里叶变换为： <span class="math display">\[
\xi\lbrace \delta(t)\rbrace = F(\mu)=\int_{-\infty}^{\infty}\delta(t)e^{-j2\pi\mu t} dt
\]</span> 根据冲激函数的性质1，有: <span class="math display">\[
\xi\lbrace \delta(t)\rbrace =e^{-j2\pi\mu \cdot 0}=1    \tag 4
\]</span></p>
<p>下面求<span class="math inline">\(\delta{(t-t_0)}\)</span>的傅里叶变换： <span class="math display">\[
\xi\lbrace \delta(t  - t_0)\rbrace = \int_{-\infty}^{\infty}\delta(t-t_0) \cdot e^{-j2\pi\mu t} dt
\]</span> 同理，由冲激函数的性质3，有： <span class="math display">\[
\xi\lbrace \delta(t  - t_0)\rbrace = e^{-j2\pi\mu t_0}      \tag 5
\]</span></p>
<h2 id="冲激串">冲激串</h2>
<p>当我们用<span class="math inline">\(f(t) \cdot \delta(t)\)</span>时，即是对<span class="math inline">\(t=0\)</span>时刻的<span class="math inline">\(f(t)\)</span>函数采样。但我们希望对<span class="math inline">\(f(t)\)</span>的多个时刻采样。现在我们只需要对<span class="math inline">\(\delta(t)\)</span>平移，则平移后的函数可以表示为 <span class="math display">\[
\delta(t-n\Delta t)
\]</span> 其中，<span class="math inline">\(n \in Z\)</span>,<span class="math inline">\(\Delta t\)</span>表示偏移。所以<span class="math inline">\(t-n \Delta t\)</span>表示以<span class="math inline">\(\Delta t\)</span>的<span class="math inline">\(n\)</span>偏移</p>
<p>对平移后的函数进行相加，有： <span class="math display">\[
S_{\Delta T}(t)=\sum_{n=-\infty}^{+\infty}\delta(t-n\Delta t)   \tag 6
\]</span> 上式称为冲激串。其函数图像如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/42f71c70646d19ccb0835d9c136078b4.jpeg">

</div>
<p><strong>将<span class="math inline">\(S_{\Delta T}(t)\)</span>与<span class="math inline">\(f(t)\)</span>相乘则表示以<span class="math inline">\(\Delta t\)</span>为间隔采样</strong></p>
<h2 id="冲激串的傅里叶变换">冲激串的傅里叶变换</h2>
<h3 id="补充傅里叶变换的一个性质">补充：傅里叶变换的一个性质</h3>
<p>在推导冲激串<span class="math inline">\(S_{\Delta{t}}(t)\)</span>的傅里叶变换之前，需要补充一个傅里叶变换的性质：</p>
<blockquote>
<p>对于信号<span class="math inline">\(f(t)\)</span>，有傅里叶变换<span class="math inline">\(F( \mu )\)</span>.即： <span class="math display">\[
\xi\lbrace f(t)\rbrace = F(\mu)=\int_{-\infty}^{\infty}f(t)e^{-j2\pi\mu t} dt
\]</span> 当我们把<span class="math inline">\(f(t)\)</span>进行反傅里叶变换,有： <span class="math display">\[
\xi^{-1}\lbrace f(t)\rbrace =\int_{-\infty}^{\infty}f(t)e^{j2\pi\mu t} dt=\int_{-\infty}^{\infty}f(t)e^{-j2\pi\mu \cdot (-t)} dt
\]</span> 可以看到，上面两个等式互为相反数。即有： <span class="math display">\[
\xi\lbrace f(-t)\rbrace=\xi^{-1}\lbrace f(t)\rbrace
\]</span> 即，<strong>一个函数的傅里叶变换和反傅里叶变换互为相反数</strong></p>
</blockquote>
<h3 id="冲激串的傅里叶级数">冲激串的傅里叶级数</h3>
<p>由于冲激串<span class="math inline">\(S_{\Delta t}(t)\)</span>是一个离散函数我们可以用傅里叶级数对他进行分解，有： <span class="math display">\[
S_{\Delta t}(t)=\sum_{n=-\infty}^{\infty}c_n \cdot e^{\frac{j \cdot 2\pi n}{\Delta T}\cdot t}       \tag 7
\]</span> 其中 <span class="math display">\[
c_n=\frac{1}{\Delta t}\int_{-\frac{\Delta t}{2}}^{\frac{\Delta t}{2}}\delta(t) \cdot e^{-j\frac{2 \pi n}{\Delta T}t}dt      \tag 8
\]</span> 根据冲激函数的性质1，有： <span class="math display">\[
c_n=\frac{1}{\Delta t} \cdot e^{-j \frac{2 \pi n}{\Delta t} \cdot 0}=\frac{1}{\Delta t}     \tag 9
\]</span> 故有： <span class="math display">\[
S_{\Delta t}(t)=\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}e^{j \cdot \frac{2 \pi n}{\Delta t} \cdot t}        \tag {10}
\]</span></p>
<h3 id="冲激串的傅里叶变换-1">冲激串的傅里叶变换</h3>
<p>对冲激串<span class="math inline">\(S_{\Delta t}(t)\)</span>进行傅里叶变换，有： <span class="math display">\[
\xi \lbrace S_{\Delta t}(t) \rbrace = \frac{1}{\Delta t} \sum_{n=-\infty}^{\infty} \xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace        \tag {11}
\]</span></p>
<p><span class="math inline">\(\xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace\)</span>可以写成<span class="math inline">\(\xi \lbrace e^{-j \cdot 2 \pi \cdot t \cdot (\frac{-n}{\Delta t}) } \rbrace\)</span>，由公式（5）可知： <span class="math display">\[
\delta \left( \mu-(\frac{-n}{\Delta t}) \right)=
e^{-j \cdot 2 \pi \cdot t \cdot (\frac{-n}{\Delta t})  }=
\delta \left( \mu+\frac{n}{\Delta t} \right)    \tag {12}
\]</span> 由之前补充的傅里叶变换的性质，有 <span class="math display">\[
\xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace=\delta(-(\mu+\frac{n}{\Delta t}))     \tag {13}
\]</span> 又由于函数<span class="math inline">\(\delta(t)\)</span>是一个偶函数，有: <span class="math display">\[
\delta(-(\mu+\frac{n}{\Delta t}))   =\delta(\mu+\frac{n}{\Delta t}) =\xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace  \tag {14}
\]</span> 综上，可得<span class="math inline">\(e^{j \cdot \frac{2 \pi n}{\Delta t}t}\)</span>傅里叶变换的最终结果： <span class="math display">\[
\delta \lbrace e^{-j \cdot 2 \pi \cdot t \cdot (\frac{-n}{\Delta t})  } \rbrace=
\delta \left( \mu+\frac{n}{\Delta t} \right)    \tag {15}
\]</span></p>
<blockquote>
<p>注：书上(《数字图像处理》（刚萨雷斯版）)直接一步得到如下结果： <span class="math display">\[
\xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace  = \delta(\mu - \frac{n}{\Delta t})
\]</span> 但我这里推了两遍都是式（12）的结果。如果哪位大神能推出这个结果的请告知。</p>
</blockquote>
<p>由式（11）得到的冲激串<span class="math inline">\(S_{\Delta t}(t)\)</span>的傅里叶变换，可变换为： <span class="math display">\[
\xi \lbrace S_{\Delta t}(t) \rbrace 
=\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty} \xi \lbrace e^{j \cdot \frac{2 \pi n}{\Delta t}t} \rbrace 
=\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}  \delta(\mu + \frac{n}{\Delta t})
\tag {16}
\]</span> 由于<span class="math inline">\(n \in (-\infty,\infty)\)</span>,有： <span class="math display">\[
\xi \lbrace S_{\Delta t}(t) \rbrace 
=\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}  \delta(\mu - \frac{n}{\Delta t})     \tag {17}
\]</span></p>
<h1 id="模拟信号采样">模拟信号采样</h1>
<h2 id="模拟信号采样的傅里叶变换">模拟信号采样的傅里叶变换</h2>
<p>现在我们对模拟信号<span class="math inline">\(f(t)\)</span>进行采样，如何采样呢？就是用模拟信号<span class="math inline">\(f(t)\)</span>乘以冲激串函数<span class="math inline">\(S_{\Delta t}(t)\)</span>.下图是一个采样的例子：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/3f3884bf7e9421e12635d8d0aa18d220.jpeg">

</div>
<p>我们对采样后的结果进行傅里叶变换，如下： <span class="math display">\[
\xi (f(t) \cdot S_{\Delta t}(t))
\]</span> 根据<code>卷积定理</code>,有： <span class="math display">\[
\xi (f(t) \cdot S_{\Delta t}(t))
=\xi \lbrace f(t) \rbrace \ast \xi \lbrace S_{\Delta t}(t) \rbrace 
= F(\mu) \ast \xi \lbrace S_{\Delta t}(t) \rbrace
\tag {18}
\]</span> 其中，<span class="math inline">\(\ast\)</span>表示卷积</p>
<blockquote>
<p>补充：卷积定理</p>
<p>设有两个信号函数<span class="math inline">\(f_1(t)\)</span>和<span class="math inline">\(f_2(t)\)</span>,其对应的傅里叶变换为<span class="math inline">\(F_1(\mu)=\xi \lbrace f_1(t) \rbrace\)</span>和<span class="math inline">\(F_2(\mu)=\xi \lbrace f_2(t) \rbrace\)</span>,则如下等式成立： <span class="math display">\[
F_1(\mu) \ast F_2(\mu)=\xi \lbrace f_1(t) \cdot f_2(t) \rbrace        \tag {19}
\]</span></p>
<p><span class="math display">\[
\xi \lbrace f_1(t) \ast f_2(t) \rbrace = F_1(\mu) \cdot F_2(\mu)  \tag {20}
\]</span></p>
<p>其中，<span class="math inline">\(\ast\)</span>代表卷积，定义如下： <span class="math display">\[
f(t) \ast h(t)=\int_{-\infty}^{\infty}f(\tau)h(t- \tau)d\tau      \tag {21}
\]</span> 也就是说：</p>
<ul>
<li><strong>时域的乘积的傅里叶变换等于频域的卷积</strong></li>
<li><strong>时域卷积的傅里叶变换等于频域的乘积</strong></li>
</ul>
</blockquote>
<p>在式（18）中，根据式（21）卷积的定义，有： <span class="math display">\[
F(\mu) \ast \xi \lbrace S_{\Delta t}(t) \rbrace = 
\int_{-\infty}^{\infty}F(\tau) \cdot \frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}  \delta(\mu - \tau - \frac{n}{\Delta t})  dt      \tag {22}
\]</span></p>
<p><span class="math display">\[
= \frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}\int_{-\infty}^{\infty}F(\tau) \cdot  \delta(\mu - \tau - \frac{n}{\Delta t}) dt      \tag {23}
\]</span></p>
<p>在式（23）中，由于<span class="math inline">\(\delta(t)\)</span>为偶函数，则有： <span class="math display">\[
\delta(\mu - \tau- \frac{n}{\Delta t})
=\delta(-(\mu - \tau - \frac{n}{\Delta t}))
=\delta(\tau-\mu+\frac{n}{\Delta t})
=\delta(\tau-(\mu - \frac{n}{\Delta t}))
\tag {24}
\]</span> 则式（23）可以转换为： <span class="math display">\[
\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}\int_{-\infty}^{\infty}F(\tau) \cdot  \delta(\mu - \tau - \frac{n}{\Delta t})   dt  =
\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}\int_{-\infty}^{\infty}F(\tau) \cdot  \delta(\tau - (\mu - \frac{n}{\Delta t})) dt  
\tag {25}
\]</span> 根据冲激函数的性质，式（25）可以化为： <span class="math display">\[
\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}\int_{-\infty}^{\infty}F(\tau) \cdot  \delta(\tau - (\mu - \frac{n}{\Delta t})) dt  =
\frac{1}{\Delta t} \sum_{n=-\infty}^{\infty}F(\mu - \frac{n}{\Delta t})     \tag {26}
\]</span> <strong>式（26）就是信号<span class="math inline">\(f(t)\)</span>采样后的傅里叶变换的最终结果。</strong></p>
<p>理论上，<span class="math inline">\(F(\mu)\)</span>是一个范围无限的函数，但在实际的运用中，由于带宽的限制，<span class="math inline">\(\mu\)</span>是有范围的，设设备的带宽上线为<span class="math inline">\(\mu_{max}\)</span>,则有： <span class="math display">\[
F(\mu)=
\begin{cases}
F(\mu), &amp; \text {if $|\mu| &lt; \mu_{max}$} \\
0, &amp; \text others
\end{cases}
\tag {27}
\]</span> <img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/iofdsalknfdsaoifadsfoid.png"></p>
<p>这说明<span class="math inline">\(F(\mu)\)</span>是一个以<span class="math inline">\(2 \mu_{max}\)</span>为长度的函数，而在式（26）中，相当于对<span class="math inline">\(F(\mu)\)</span>平移<span class="math inline">\(\frac{n}{\Delta t}（n \in Z）\)</span>个单位，再叠加。当<span class="math inline">\(\frac{1}{\Delta t}\)</span>小于<span class="math inline">\(2 \mu_{max}\)</span>时，式（26）中平移的两个函数就会重叠，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/fodafdassfj.png">

</div>
<p>当<span class="math inline">\(\frac{1}{\Delta t}=2 \mu_{max}\)</span>时，有：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/fioanlfko.png">

</div>
<p>当<span class="math inline">\(\frac{1}{\Delta t}&gt;2 \mu_{max}\)</span>时，有：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/fasiofaf.png">

</div>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>计算机视觉</tag>
        <tag>数字图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO4总结</title>
    <url>/posts/eae05d4d.html/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>太阳腑症</title>
    <url>/posts/48ccc03b.html/</url>
    <content><![CDATA[<h2 id="太阳蓄水症">太阳蓄水症</h2>
<blockquote>
<p>太阳蓄水症,总体而言分水停中焦和水停下焦两种,水停下焦表现为水停膀胱,膀胱气化失司.津液不能输布上乘.用五苓散方.水停中焦,为水停胃腕,用茯苓甘草汤主之.</p>
</blockquote>
<h3 id="五苓散方">五苓散方</h3>
<p>太阳病,发汗后,大汗出,胃中干,胃中干,烦躁不得眠,欲得饮水者,少少与饮之,令胃气和则愈.若脉浮,小便不利,微热,消渴者,五苓散主之.(71)</p>
<p>猪苓十八铢(去皮) 泽泻一两六铢 白术十八铢 茯苓十八铢 桂枝半两(去皮)</p>
<p>上五味,捣为散,以白饮和服方寸匕,日三服.多饮暖水,汗出愈.如法将息.</p>
<p>发汗已,脉浮数,烦渴者,五苓散主之.(72)</p>
<p>中风发热,六七日不解而烦,有表里证,渴欲饮水,水入则吐者,名曰水逆,五苓散主之.(74)</p>
<p>太阳病,小便利者,以饮水多,必心下悸;小便少者,必苦里急也.(127)</p>
<p>本以下之,故心下痞,与泻心汤,痞不解,其人渴而口燥烦,小便不利者,五苓散主之.(156)</p>
<blockquote>
<p><strong>胃中津伤</strong>:</p>
<p>由于太阳病发汗,汗出过多,导致汗出过多伤津,而出现胃中津伤,渴欲饮水.(伤津的部位和素体的体质有关,若肺阴虚则很可能伤肺,胃阴虚则很可能伤胃,以此类推)．</p>
<p>治少少与饮之<strong>（温水）</strong></p>
</blockquote>
<blockquote>
<p><strong>太阳蓄水症成因:</strong></p>
<p>五苓散方的成因共分为两大类:</p>
<ul>
<li>邪气侵犯太阳经,邪气寻经入腑,造成太阳蓄水症</li>
<li>太阳表证期间,正气抗邪于表而不能顾护于里,造成膀胱机能低下,饮水过多,导致水液内留</li>
</ul>
<p><strong>主症及病机:</strong></p>
<p>太阳腑受邪主要是参与水液代谢部分失调,以下是<code>足太阳膀胱腑</code>的主要功能:</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/%E8%B6%B3%E5%A4%AA%E9%98%B3%E8%86%80%E8%83%B1%E8%85%91.png" style="zoom: 50%;"></p>
<p><strong>主症:</strong></p>
<ul>
<li>口渴:膀胱受邪,化生津液的能力下降,即肾的蒸腾的能力下降,此时津液不能输布上承,故见口渴</li>
<li>小便不利:膀胱气化失司,排除废水的能力下降,故见小便不利</li>
</ul>
<p>此外,膀胱气化失司导致水蓄下焦,导致苦里急.<font color="green">(类似于癃闭)</font></p>
<p>另外,膀胱受邪还导致水邪上逆,其症状<strong>可能</strong>有二:</p>
<ul>
<li>心下痞.是因为下窍不利,水无出路,导致水邪上逆,进而阻遏中焦气机.</li>
<li>水逆症.(渴欲饮水,水入则吐).是因为水邪上逆导致胃气也上逆所致</li>
</ul>
<p><strong>临床上,凡是有水邪内结,无论在什么部位,均可用五苓散</strong></p>
</blockquote>
<h3 id="茯苓甘草汤">茯苓甘草汤</h3>
<h3 id="总结">总结</h3>
<table>
<thead>
<tr class="header">
<th>症候</th>
<th>太阳蓄水症</th>
<th>胃虚水停症</th>
<th>胃中津伤症</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>口渴情况</td>
<td>口渴，消渴，烦渴，渴欲饮水</td>
<td>不渴</td>
<td>口渴，消渴，烦渴，渴欲饮水</td>
</tr>
<tr class="even">
<td>小便情况</td>
<td>小便不利，小便少</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>局部情况</td>
<td>少腹苦里急</td>
<td>心下悸</td>
<td></td>
</tr>
<tr class="even">
<td>其他症状</td>
<td>（心下痞或水痞，水逆），脉浮或浮数，身微热</td>
<td>手足厥冷</td>
<td>烦躁不得眠</td>
</tr>
<tr class="odd">
<td>病机</td>
<td>理由蓄水，外有表邪</td>
<td>胃虚水停中焦</td>
<td>胃中津伤</td>
</tr>
<tr class="even">
<td>治法</td>
<td>外疏内利，表里两解</td>
<td>温中化饮</td>
<td>饮水，少少与饮之<strong>（温水）</strong></td>
</tr>
<tr class="odd">
<td>用方</td>
<td>五苓散</td>
<td>茯苓甘草汤</td>
<td>少少与饮之<strong>（温水）</strong></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask的Context机制(转)</title>
    <url>/posts/51b7d257.html/</url>
    <content><![CDATA[<p>此文转载自<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/" target="_blank" rel="noopener">Flask的Context机制</a></p>
<p>用过 Flask 做 Web 开发的同学应该不会不记得 App Context 和 Request Context 这两个名字——这两个 Context 算是 Flask 中比较特色的设计。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id11" target="_blank" rel="noopener">1]</a></p>
<p>从一个 Flask App 读入配置并启动开始，就进入了 App Context，在其中我们可以访问配置文件、打开资源文件、通过路由规则反向构造 URL。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id12" target="_blank" rel="noopener">2]</a> 当一个请求进入开始被处理时，就进入了 Request Context，在其中我们可以访问请求携带的信息，比如 HTTP Method、表单域等。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id13" target="_blank" rel="noopener">3]</a></p>
<p>所以，这两个 Context 也成了 Flask 框架复杂度比较集中的地方，对此有评价认为 Flask 的这种设计比 Django、Tornado 等框架的设计更为晦涩。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id14" target="_blank" rel="noopener">4]</a> 我不认同这种评价。对于一个 Web 应用来说，“应用” 和 “请求” 的两级上下文在理念上是现实存在的，如果理解了它们，那么使用 Flask 并不会晦涩；即使是使用 Django、Tornado，理解了它们的 Context 也非常有利于做比官网例子更多的事情（例如编写 Middleware）。</p>
<p>我因为开发 Flask 扩展，对这两个 Context 的具体实现也研究了一番，同时还解决了一些自己之前“知道结论不知道过程”的疑惑，所以撰写本文记录下来。</p>
<h2 id="thread-local-的概念">Thread Local 的概念</h2>
<p>从面向对象设计的角度看，对象是保存“状态”的地方。Python 也是如此，一个对象的状态都被保存在对象携带的一个特殊字典中，可以通过 <code>vars</code> 函数拿到它。</p>
<p>Thread Local 则是一种特殊的对象，它的“状态”对线程隔离 —— 也就是说每个线程对一个 Thread Local 对象的修改都不会影响其他线程。这种对象的实现原理也非常简单，只要以线程的 ID 来保存多份状态字典即可，就像按照门牌号隔开的一格一格的信箱。</p>
<p>在 Python 中获得一个这样的 Thread Local 最简单的方法是 <code>threading.local()</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> threading</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>storage = threading.local()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>storage.foo = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(storage.foo)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">AnotherThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">... </span>        storage.foo = <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>        print(storage.foo)  <span class="comment"># 这这个线程里已经修改了</span></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another = AnotherThread()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another.start()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(storage.foo)  <span class="comment"># 但是在主线程里并没有修改</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>这样来说，只要能构造出 Thread Local 对象，就能够让同一个对象在多个线程下做到状态隔离。这个“线程”不一定要是系统线程，也可以是用户代码中的其他调度单元，例如 Greenlet。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id15" target="_blank" rel="noopener">5]</a></p>
<h2 id="werkzeug-实现的-local-stack-和-local-proxy">Werkzeug 实现的 Local Stack 和 Local Proxy</h2>
<p>Werkzeug 没有直接使用 <code>threading.local</code>，而是自己实现了 <code>werkzeug.local.Local</code> 类。后者和前者有一些区别：</p>
<ul>
<li>后者会在 Greenlet 可用的情况下优先使用 Greenlet 的 ID 而不是线程 ID 以支持 Gevent 或 Eventlet 的调度，前者只支持多线程调度；</li>
<li>后者实现了 Werkzeug 定义的协议方法 <code>__release_local__</code>，可以被 Werkzeug 自己的 release_pool 函数释放（析构）掉当前线程下的状态，前者没有这个能力。</li>
</ul>
<p>除 Local 外，Werkzeug 还实现了两种数据结构：LocalStack 和 LocalProxy。</p>
<p>LocalStack 是用 Local 实现的栈结构，可以将对象推入、弹出，也可以快速拿到栈顶对象。当然，所有的修改都只在本线程可见。和 Local 一样，LocalStack 也同样实现了支持 release_pool 的接口。</p>
<p>LocalProxy 则是一个典型的代理模式实现，它在构造时接受一个 callable 的参数（比如一个函数），这个参数被调用后的返回值本身应该是一个 Thread Local 对象。对一个 LocalProxy 对象的所有操作，包括属性访问、方法调用（当然方法调用就是属性访问）甚至是二元操作 [<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id16" target="_blank" rel="noopener">6]</a> 都会转发到那个 callable 参数返回的 Thread Local 对象上。</p>
<p>LocalProxy 的一个使用场景是 LocalStack 的 <code>__call__</code> 方法。比如 <code>my_local_stack</code> 是一个 LocalStack 实例，那么 <code>my_local_stack()</code> 能返回一个 LocalProxy 对象，这个对象始终指向 <code>my_local_stack</code> 的栈顶元素。如果栈顶元素不存在，访问这个 LocalProxy 的时候会抛出 <code>RuntimeError</code>。</p>
<h2 id="flask-基于-local-stack-的-context">Flask 基于 Local Stack 的 Context</h2>
<p>Flask 是一个基于 Werkzeug 实现的框架，所以 Flask 的 App Context 和 Request Context 也理所当然地基于 Werkzeug 的 Local Stack 实现。</p>
<p>在概念上，App Context 代表了“应用级别的上下文”，比如配置文件中的数据库连接信息；Request Context 代表了“请求级别的上下文”，比如当前访问的 URL。</p>
<p>这两种上下文对象的类定义在 <code>flask.ctx</code> 中，它们的用法是推入 <code>flask.globals</code> 中创建的 <code>_app_ctx_stack</code> 和 <code>_request_ctx_stack</code> 这两个单例 Local Stack 中。因为 Local Stack 的状态是线程隔离的，而 Web 应用中每个线程（或 Greenlet）同时只处理一个请求，所以 App Context 对象和 Request Context 对象也是请求间隔离的。</p>
<p>当 <code>app = Flask(__name__)</code> 构造出一个 Flask App 时，App Context 并不会被自动推入 Stack 中。所以此时 Local Stack 的栈顶是空的，<code>current_app</code> 也是 unbound 状态。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask.globals <span class="keyword">import</span> _app_ctx_stack, _request_ctx_stack</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>app = Flask(__name__)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack.top</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_request_ctx_stack.top</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack()</span><br><span class="line">&lt;LocalProxy unbound&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>current_app</span><br><span class="line">&lt;LocalProxy unbound&gt;</span><br></pre></td></tr></table></figure>
<p>这也是一些 Flask 用户可能被坑的地方 —— 比如编写一个离线脚本时，如果直接在一个 Flask-SQLAlchemy 写成的 Model 上调用 <code>User.query.get(user_id)</code>，就会遇到 <code>RuntimeError</code>。因为此时 App Context 还没被推入栈中，而 Flask-SQLAlchemy 需要数据库连接信息时就会去取 <code>current_app.config</code>，current_app 指向的却是 <code>_app_ctx_stack</code> 为空的栈顶。</p>
<p>解决的办法是运行脚本正文之前，先将 App 的 App Context 推入栈中，栈顶不为空后 <code>current_app</code> 这个 Local Proxy 对象就自然能将“取 config 属性” 的动作转发到当前 App 上了：</p>
<p>Python Shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx = app.app_context()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx.push()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack.top</span><br><span class="line">&lt;flask.ctx.AppContext object at <span class="number">0x102eac7d0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack.top <span class="keyword">is</span> ctx</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>current_app</span><br><span class="line">&lt;Flask <span class="string">'__main__'</span>&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ctx.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>_app_ctx_stack.top</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>current_app</span><br><span class="line">&lt;LocalProxy unbound&gt;</span><br></pre></td></tr></table></figure>
<p>那么为什么在应用运行时不需要手动 <code>app_context().push()</code> 呢？因为 Flask App 在作为 WSGI Application 运行时，会在每个请求进入的时候将请求上下文推入 <code>_request_ctx_stack</code> 中，而请求上下文一定是 App 上下文之中，所以推入部分的逻辑有这样一条：如果发现 <code>_app_ctx_stack</code> 为空，则隐式地推入一个 App 上下文。</p>
<p>所以，请求中是不需要手动推上下文入栈的，但是离线脚本需要手动推入 App Context。如果没有什么特殊困难，我更建议用 Flask-Script 来写离线任务。[<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id17" target="_blank" rel="noopener">7]</a></p>
<h2 id="两个疑问">两个疑问</h2>
<p>到此为止，就出现两个疑问：</p>
<ul>
<li>为什么 App Context 要独立出来：既然在 Web 应用运行时里，App Context 和 Request Context 都是 Thread Local 的，那么为什么还要独立二者？</li>
<li>为什么要放在“栈”里：在 Web 应用运行时中，一个线程同时只处理一个请求，那么 <code>_req_ctx_stack</code> 和 <code>_app_ctx_stack</code> 肯定都是只有一个栈顶元素的。那么为什么还要用“栈”这种结构？</li>
</ul>
<p>我最初也被这两个疑问困惑过。后来看了一些资料，就明白了 Flask 为何要设计成这样。这两个做法给予我们 <strong>多个 Flask App 共存</strong> 和 <strong>非 Web Runtime 中灵活控制 Context</strong> 的可能性。</p>
<p>我们知道对一个 Flask App 调用 <code>app.run()</code> 之后，进程就进入阻塞模式并开始监听请求。此时是不可能再让另一个 Flask App 在主线程运行起来的。那么还有哪些场景需要多个 Flask App 共存呢？前面提到了，一个 Flask App 实例就是一个 WSGI Application，那么 WSGI Middleware 是允许使用组合模式的，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.wsgi <span class="keyword">import</span> DispatcherMiddleware</span><br><span class="line"><span class="keyword">from</span> biubiu.app <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> biubiu.admin.app <span class="keyword">import</span> create_app <span class="keyword">as</span> create_admin_app</span><br><span class="line"></span><br><span class="line">application = DispatcherMiddleware(create_app(), &#123;</span><br><span class="line">    <span class="string">'/admin'</span>: create_admin_app()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个例子就利用 Werkzeug 内置的 Middleware 将两个 Flask App 组合成一个一个 WSGI Application。这种情况下两个 App 都同时在运行，只是根据 URL 的不同而将请求分发到不同的 App 上处理。</p>
<p>Note</p>
<p>需要注意的是，这种用法和 Flask 的 Blueprint 是有区别的。Blueprint 虽然和这种用法很类似，但前者自己没有 App Context，只是同一个 Flask App 内部整理资源的一种方式，所以多个 Blueprint 可能共享了同一个 Flask App；后者面向的是所有 WSGI Application，而不仅仅是 Flask App，即使是把一个 Django App 和一个 Flask App 用这种用法整合起来也是可行的。</p>
<p>如果仅仅在 Web Runtime 中，多个 Flask App 同时工作倒不是问题。毕竟每个请求被处理的时候是身处不同的 Thread Local 中的。但是 Flask App 不一定仅仅在 Web Runtime 中被使用 —— 有两个典型的场景是在非 Web 环境需要访问上下文代码的，一个是离线脚本（前面提到过），另一个是测试。这两个场景即所谓的“Running code outside of a request”。</p>
<h2 id="在非-web-环境运行-flask-关联的代码">在非 Web 环境运行 Flask 关联的代码</h2>
<p>离线脚本或者测试这类非 Web 环境和和 Web 环境不同 —— 前者一般只在主线程运行。</p>
<p>设想，一个离线脚本需要操作两个 Flask App 关联的上下文，应该怎么办呢？这时候栈结构的 App Context 优势就发挥出来了。</p>
<p>offline_script.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> biubiu.app <span class="keyword">import</span> create_app</span><br><span class="line"><span class="keyword">from</span> biubiu.admin.app <span class="keyword">import</span> create_app <span class="keyword">as</span> create_admin_app</span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line">admin_app = create_admin_app()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        data = read_data()  <span class="comment"># fake function for demo</span></span><br><span class="line">        <span class="keyword">with</span> admin_app.app_context():</span><br><span class="line">            write_data(data)  <span class="comment"># fake function for demo</span></span><br><span class="line">        mark_data_copied()  <span class="comment"># fake function for demo</span></span><br></pre></td></tr></table></figure>
<p>无论有多少个 App，只要主动去 Push 它的 App Context，Context Stack 中就会累积起来。这样，栈顶永远是当前操作的 App Context。当一个 App Context 结束的时候，相应的栈顶元素也随之出栈。如果在执行过程中抛出了异常，对应的 App Context 中注册的 <code>teardown</code> 函数被传入带有异常信息的参数。</p>
<p>这么一来就解释了两个疑问 —— 在这种单线程运行环境中，只有栈结构才能保存多个 Context 并在其中定位出哪个才是“当前”。而离线脚本只需要 App 关联的上下文，不需要构造出请求，所以 App Context 也应该和 Request Context 分离。</p>
<p>另一个手动推入 Context 的场景是测试。测试中我们可能会需要构造一个请求，并验证相关的状态是否符合预期。例如：</p>
<p>tests.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = create_app()</span><br><span class="line">    client = app.test_client()</span><br><span class="line">    resp = client.get(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">assert</span> <span class="string">'Home'</span> <span class="keyword">in</span> resp.data</span><br></pre></td></tr></table></figure>
<p>这里调用 <code>client.get</code> 时，Request Context 就被推入了。其特点和 App Context 非常类似，这里不再赘述。</p>
<h2 id="为何建议使用-app-factory-模式">为何建议使用 App Factory 模式</h2>
<p>从官方文档来看，Flask 有 Singleton 和 App Factory 两种用法。前一种用法和其他的一些 Web 框架（如 Bottle、Sinatra）的门面广告很相似，因为代码精简，所以显得非常的“帅”：</p>
<p>app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"><span class="keyword">from</span> flask.ext.sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask.ext.login <span class="keyword">import</span> LoginManager</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line">login_manager = LoginManager()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'home.html'</span>)</span><br></pre></td></tr></table></figure>
<p>但是这种“帅”是有代价的。一个最麻烦的问题就是编写测试的时候：</p>
<p>test_app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestApp</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">True</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.app = create_app()</span><br><span class="line">        self.app.config.from_object(self)</span><br><span class="line">        self.client = self.app.test_client()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_app</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="meta">        @self.app.route('/test/&lt;int:id_&gt;')</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_view</span><span class="params">(id_)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'#%d'</span> % id_</span><br><span class="line">        resp = self.client.get(<span class="string">'/test/42'</span>)</span><br><span class="line">        self.assertEqual(resp.data, <span class="string">'#42'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_home</span><span class="params">(self)</span>:</span></span><br><span class="line">        resp = self.client.get(<span class="string">'/'</span>)</span><br><span class="line">        self.assertIn(<span class="string">'Welcome'</span>, resp.data)</span><br></pre></td></tr></table></figure>
<p>在上面的例子中，我为了测试给 App 新挂载了一个 View 函数。这是很常见的一个测试需求。但是如果 Flask App 实例是单例的，这种做法就会“弄脏”下一个测试的运行。更加麻烦的是，上述例子中如果 <code>test_home</code> 在 <code>test_app</code> 之前运行了，Flask 的开发者防御机制会认为这是一个“已经开始处理 Web 请求了，又挂载了视图” [<a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id18" target="_blank" rel="noopener">8]</a> 的失误，从而抛出 <code>RuntimeError</code>。</p>
<p>所以除非是应用简单到不需要 Web 层测试，否则还是尽量使用 App Factory 模式比较好。况且配合 Blueprint 的情况下，App Factory 还能帮助我们良好地组织应用结构：</p>
<p>happytree/app.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> import_string</span><br><span class="line"></span><br><span class="line">extensions = [</span><br><span class="line">    <span class="string">'happytree.ext:db'</span>,</span><br><span class="line">    <span class="string">'happytree.ext:login_manager'</span>,</span><br><span class="line">]</span><br><span class="line">blueprints = [</span><br><span class="line">    <span class="string">'happytree.views:bp'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span><span class="params">()</span>:</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    <span class="keyword">for</span> ext_name <span class="keyword">in</span> extensions:</span><br><span class="line">        ext = import_string(ext_name)</span><br><span class="line">        ext.init_app(app)</span><br><span class="line">    <span class="keyword">for</span> bp_name <span class="keyword">in</span> blueprints:</span><br><span class="line">        bp = import_string(bp_name)</span><br><span class="line">        app.register_blueprint(bp)</span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>
<p>这样就能彻底摆脱 <code>app.py</code> 和 View 模块“互相 Import”的纠结了。</p>
<p>好吧其实这一节和 Context 没啥关系……</p>
<h2 id="参考">参考</h2>
<p><a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id1" target="_blank" rel="noopener">[1]</a> Flask 文档对 <a href="http://flask.pocoo.org/docs/appcontext/" target="_blank" rel="noopener">Application Context</a> 和 <a href="http://flask.pocoo.org/docs/reqcontext/" target="_blank" rel="noopener">Request Context</a> 作出了详尽的解释； <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id2" target="_blank" rel="noopener">[2]</a> 通过访问 flask.current_app； <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id3" target="_blank" rel="noopener">[3]</a> 通过访问 flask.request； <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id4" target="_blank" rel="noopener">[4]</a> Flask(Werkzeug) 的 Context 基于 Thread Local 和代理模式实现，只要身处 Context 中就能用近似访问全局变量的的方式访问到上下文信息，例如 flask.current_app 和 flask.request；Django 和 Tornado 则将上下文封装在对象中，只有明确获取了相关上下文对象才能访问其中的信息，例如在视图函数中或按照规定模板实现的 Middleware 中； <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id5" target="_blank" rel="noopener">[5]</a> 基于 Flask 的 Web 应用可以在 Gevent 或 Eventlet 异步网络库 patch 过的 Python 环境中正常工作。这二者都使用 Greenlet 而不是系统线程作为调度单元，而 Werkzeug 考虑到了这点，在 Greenlet 可用时用 Greenlet ID 代替线程 ID。 <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id6" target="_blank" rel="noopener">[6]</a> Python 的对象方法是 Descriptior 实现的，所以方法就是一种属性；而 Python 的二元操作可以用双下划线开头和结尾的一系列协议，所以 foo + bar 等同于 foo.<strong>add</strong>(bar)，本质还是属性访问。 <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id7" target="_blank" rel="noopener">[7]</a> <a href="http://flask-script.readthedocs.org/" target="_blank" rel="noopener">Flask-Script</a> 是一个用来写 manage.py 管理脚本的 Flask 扩展，用它运行的任务会在开始前自动推入 App Context。将来这个“运行任务”的功能将被整合到 Flask 内部。 <a href="https://blog.tonyseek.com/post/the-context-mechanism-of-flask/#id9" target="_blank" rel="noopener">[8]</a> 详见 Flask 源码中的 setup_method 装饰器。</p>
<p>Posted by Jiangge Zhang 2014 年 07 月 21 日 Flask Python</p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Haar小波变换</title>
    <url>/posts/4f0e3ed4.html/</url>
    <content><![CDATA[<h1 id="概述">概述</h1>
<h2 id="傅里叶变换的劣势">傅里叶变换的劣势</h2>
<p>关于傅里叶变换，请看<a href="https://www.zhangqi2019.top/posts/fb91b52c.html/" target="_blank" rel="noopener">傅里叶级数与傅里叶变换推导</a></p>
<p>我们知道,傅里叶级数是将一个波展开成无限个三角函数相叠加。但当一个噪声存在时，傅里叶级数拟合的效果并不佳，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210727145724.jpg">

</div>
<p>上图中，是一个存在噪声的信号波。这种噪声表现为某一点不正常变化，而周围是正常的。但当我们用傅里叶级数从时域转频域时，傅里叶级数为了拟合这一噪声的影响，不得不使用高频基波来拟合这一噪声。但由于三角波是全局波，这又会影响其他地方的分解。所以，综上所述，傅里叶对于突变的分解并不会很理想。</p>
<p><strong>此外，傅里叶级数仅能提供频域信息，不能提供这个噪声发生的时间（也是由于傅里叶级数是全局波）</strong></p>
<h2 id="局部波">局部波</h2>
<p>局部波即当有一个噪声或扰动局部存在时，影响的仅是一个基波的局部。小波即是局部波，下面介绍Haar小波</p>
<h1 id="haar小波">Haar小波</h1>
<h2 id="haar尺度函数">Haar尺度函数</h2>
<p>假设有一个信号波如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210728115405.jpg">

</div>
<p>我们现在用很简单的基波去表示它，这个基波非常简单，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210727160954.png">

</div>
<p>函数<span class="math inline">\(\phi(x)\)</span>表示一个基波函数，在小波中被称为尺度函数，也被称为父小波，<span class="math inline">\(\phi(x)\)</span>的取值范围在<span class="math inline">\((0,1)\)</span>,且取值衡为1，用数学公式表示为： <span class="math display">\[
\phi(x)=
\begin{cases} 
1, &amp; \text {if} &amp; 0 \leq x \leq 1 \\
0, &amp; \text {others}
\end{cases}
\tag {1}
\]</span> 对于不在<span class="math inline">\(\phi(x)\)</span>返回内的我们可以通过平移以及乘以一个系数得到，这样我们就可以用<span class="math inline">\(\phi(x)\)</span>来近似的拟合上图中的信号了。</p>
<ul>
<li>平移的函数我们用<span class="math inline">\(\phi(x-k)\)</span>表示，他表示将函数<span class="math inline">\(\phi(x)\)</span>向右平移<span class="math inline">\(k\)</span>个单位，其中<span class="math inline">\(k \in Z\)</span>,当<span class="math inline">\(k&lt;0\)</span>时，表示<span class="math inline">\(\phi(x)\)</span>向左平移了<span class="math inline">\(k\)</span>个单位。</li>
<li>乘以一个系数相当于压缩或者拉伸，我们用<span class="math inline">\(a_k\phi(x)\)</span>表示，其中<span class="math inline">\(a_k \in R\)</span>.当<span class="math inline">\(a_k&lt;1\)</span>时，表示将<span class="math inline">\(\phi(x)\)</span>压缩；当<span class="math inline">\(a_k &gt;1\)</span>时，表示将<span class="math inline">\(\phi(x)\)</span>拉伸</li>
</ul>
<p>综上，我们能够用<span class="math inline">\(\phi(x)\)</span>通过平移和拉伸表示<span class="math inline">\(x\)</span>轴上的波，用公式可以表示为： <span class="math display">\[
\sum_{k \in Z}a_k \phi(x-k), { a_k \in R}   \tag {2}
\]</span> 从函数空间的角度看，对于一个取值范围为<span class="math inline">\((a,b),(其中a \in Z 且 b \in Z)\)</span>的波，会将其分解成<span class="math inline">\(b-a\)</span>个基函数，基函数的坐标为<span class="math inline">\(a_k\)</span>.当波的范围为无限时，此时的分解则为无限维的函数空间。换句话说，一个函数可由<span class="math inline">\(\phi(x)\)</span>通过平移和拉伸线性张成。</p>
<p>最终我们拟合的效果如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210728135704.jpg">

</div>
<p>可以看到，由于尺度函数<span class="math inline">\(\phi(x)\)</span>的粒度太“粗”，导致我们拟合的结果存在锯齿状。我们并不能很好的去拟合原始的波。归根结底，还是<span class="math inline">\(\phi(x)\)</span>的构造太粗糙，为了解决这个问题，我们完全可以去“精细化”尺度函数<span class="math inline">\(\phi(x)\)</span>，从而减弱或消除这种锯齿状。那如何消除呢，其实方法也很简单——减短<span class="math inline">\(\phi(x)\)</span>的周期。</p>
<ul>
<li>当我们用<span class="math inline">\(\phi(2x)\)</span>时，有尺度函数<span class="math inline">\(\phi(x)\)</span>的定义（1）。当<span class="math inline">\(0&lt;2x&lt;1\)</span>时，<span class="math inline">\(y=1\)</span>,即<span class="math inline">\(0&lt;x&lt;0.5\)</span>时，<span class="math inline">\(y=1\)</span></li>
</ul>
<p>看到没有，之前的<span class="math inline">\(\phi(x)\)</span>在<span class="math inline">\((0,1)\)</span>上的一次取值，我们可以用两次<span class="math inline">\(\phi(2x)\)</span>来表示它,即<span class="math inline">\(\phi(2x)\)</span>和<span class="math inline">\(\phi(2x - 1)\)</span>。这就意味着这种锯齿我们可以少一半，也就是粒度“更细一倍”。</p>
<ul>
<li><p>当我们用<span class="math inline">\(\phi(4x)\)</span>时，有尺度函数<span class="math inline">\(\phi(x)\)</span>的定义（1）。当<span class="math inline">\(0&lt;4x&lt;1\)</span>时，<span class="math inline">\(y=1\)</span>,即<span class="math inline">\(0&lt;x&lt;0.25\)</span>时，<span class="math inline">\(y=1\)</span></p></li>
<li><p>当我们用<span class="math inline">\(\phi(8x)\)</span>时，有尺度函数<span class="math inline">\(\phi(x)\)</span>的定义（1）。当<span class="math inline">\(0&lt;8x&lt;1\)</span>时，<span class="math inline">\(y=1\)</span>,即<span class="math inline">\(0&lt;x&lt;0.125\)</span>时，<span class="math inline">\(y=1\)</span></p></li>
</ul>
<p>...</p>
<p><strong>当随着<span class="math inline">\(x\)</span>前面的系数越来越大时，基波表示的粒度也就越来越细，当该系数趋于无限时，这种线性张成方式和原信号的差距将减少为无穷小</strong>。在我们表示原来的信号时，也就越来越像。但这里有一个要求，就是前面的系数必须要为2的倍数，这涉及到一个子空间的概念，这里先不解释为什么，后面会解释。下面我们用数学语言复述一遍。</p>
<p>设<span class="math inline">\(V_0\)</span>是所有形如（2）中的函数组成的空间，那么<span class="math inline">\(j\)</span>级阶梯函数空间可以表示为<span class="math inline">\(V_j\)</span>,他是由函数集 <span class="math display">\[
\lbrace...,\phi(2^j + 1),\phi(2^j),\phi(2^j-1),....\rbrace  \tag {3}
\]</span> 在实数域上线性张成的。用形如公式（2）的形式就可以表示为： <span class="math display">\[
\sum_{k \in Z}a_k \phi(2^jx-k), { a_k \in R 且 j \in z^+}    \tag {4}
\]</span> 由于<span class="math inline">\(j\)</span>越大，尺度函数的范围越小，于是有如下关系： <span class="math display">\[
V_0 \subset V_1 \subset V_2 \subset ... \subset V_j \subset V_{j+1} ...     \tag {5}
\]</span> 可以看到,如果公式（4）前面的系数2的倍数，则公式（5）将不成立。换句话说，这种子空间的关系将不成立。这种不成立将影响到后续<code>Haar小波基</code>的生成。</p>
<h2 id="haar小波基函数">Haar小波基函数</h2>
<p>现在我们能够用尺度函数<span class="math inline">\(\phi(x)\)</span>来线性张成信号波了，但现在还不够。回忆一下傅里叶变换，我们把信号波分解成不同频率的基波的线性张成，再根据我们的需要做各种变换。但现在我们得到的尺度函数<span class="math inline">\(\phi(x)\)</span>的“粒度”是一样的，换句话说，我们现在还不能像傅里叶级数那样分离出高频和低频。所以我们下一步要分离出高低频，变换出不同频率的基函数。</p>
<p>在公式（5）中，我们得到了一种子空间的包含关系，而且我们知道，这种层层包含的空间中的基是“从粗到细”。我们这好可以利用这种关系构建分离出高低频的频域空间。<strong>但我们必须满足一个条件：由于基函数（基波）是一个基，我们必须保证基是正交的</strong></p>
<p>举例来说，我们在<span class="math inline">\(V_0\)</span>空间中有<span class="math inline">\(k\)</span>个基<span class="math inline">\(\phi(x-k)\)</span>,其中<span class="math inline">\(k \in Z\)</span>.我们需要在<span class="math inline">\(V_1\)</span>找到一个基<span class="math inline">\(\psi(x)\)</span>,满足<span class="math inline">\(\psi(x)\)</span>和<span class="math inline">\(\phi(x-k)\)</span>均正交。用更数学的语言表达就是：在<span class="math inline">\(V_1\)</span>空间中找到<span class="math inline">\(V_0\)</span>的正交补。</p>
<blockquote>
<p>正交补的定义：</p>
<p>设<span class="math inline">\(V_0\)</span>是内积空间<span class="math inline">\(V\)</span>的子空间，<span class="math inline">\(V_0\)</span>的正交补，记为<span class="math inline">\(V_0^{\bot}\)</span>,是<span class="math inline">\(V\)</span>上所有与<span class="math inline">\(V_0\)</span>正交的矢量集合，即: <span class="math display">\[
V_0^{\bot}=\lbrace v \in V; \langle v,w \rangle = 0, w \in V_0 \rbrace    \tag {6}
\]</span> 其中，<span class="math inline">\(\langle v,w \rangle\)</span>表示内积</p>
</blockquote>
<p>符合以上两点（正交性以及属于<span class="math inline">\(V_1\)</span>空间）最简单的<span class="math inline">\(\psi(x)\)</span>为： <span class="math display">\[
\psi(x) = \phi(2x) - \phi(2x - 1)   \tag {7}
\]</span> 其对应的图像为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210729173244.png">

</div>
<p>显然，公式（7）中<span class="math inline">\(\psi(x)\)</span> 是<span class="math inline">\(V_1\)</span>空间中的元素。下面证明和<span class="math inline">\(V_0\)</span>中的基正交：</p>
<blockquote>
<p>显然<span class="math inline">\(\psi(x)\)</span>和<span class="math inline">\(\phi(x -k),k \neq 0\)</span>正交，因为<span class="math inline">\(\psi(x)\)</span>仅在<span class="math inline">\((0,1)\)</span>范围内取值。</p>
<p><span class="math inline">\(\psi(x)\)</span>和<span class="math inline">\(\phi(x)\)</span>的内积可以写成： <span class="math display">\[
\int_{-\infty}^{\infty}\phi(x) \psi(x)dx=\int_0^{\frac{1}{2}}1dx-\int_{\frac{1}{2}}^{1}1dx=0
\]</span> 故<span class="math inline">\(\psi(x)\)</span>和<span class="math inline">\(V_0\)</span>正交。</p>
<p>故<span class="math inline">\(\psi(x)\)</span>可以作为一个小波基。</p>
</blockquote>
<p>以上只是在在<span class="math inline">\(V_1\)</span>空间中找<span class="math inline">\(V_0\)</span>的正交补，下面我们推广到更一般的情况。</p>
<p>对于<span class="math inline">\(V_j\)</span>和<span class="math inline">\(V_{j+1}\)</span>,我们能找到空间<span class="math inline">\(W_j\)</span>,使得<span class="math inline">\(W_j\)</span>是<span class="math inline">\(V_{j+1}\)</span>中<span class="math inline">\(V_j\)</span>的正交补空间，即： <span class="math display">\[
V_{j+1}=V_j \bigoplus W_{j}     \tag {8}
\]</span> 其中，<span class="math inline">\(W_j\)</span>是由形如 <span class="math display">\[
\sum_{k \in Z} a_k \psi(2^jx-k), a_k \in R      \tag {9}
\]</span> 构成的空间，由<span class="math inline">\(\psi(x)\)</span>的定义公式（7），则在<span class="math inline">\(W_j\)</span>中的小波基为： <span class="math display">\[
\psi(2^jx)=\phi(2^{j+1}x)-\phi(2^{j+1}-1)   \tag {10}
\]</span> 以此类推： <span class="math display">\[
V_j=V_{0} \bigoplus W_0 \bigoplus W_1 \bigoplus W_2 ...     \tag {11}
\]</span> 从公式（9）中可以看出，<span class="math inline">\(V_j\)</span>是可以由<span class="math inline">\(V_0\)</span>一步步“叠加”上来的，随着空间<span class="math inline">\(W_i\)</span>中<span class="math inline">\(i\)</span>值的增大，空间就&quot;越来越细&quot;(见公式10)，我们在这些空间中取基就足以将波分为高频和低频。</p>
<h1 id="小波的分解和重构">小波的分解和重构</h1>
<p>本节主要讲小波的应用，包括分解和重构，在开始之前我们需要简单的推导两个式子，便于后续计算.</p>
<p>有公式（7）有<span class="math inline">\(\psi(x) = \phi(2x) - \phi(2x - 1)\)</span>，有： <span class="math display">\[
[\psi(x)+\phi(x)]/2=[\phi(2x) - \phi(2x - 1) + \phi(x)]=[\phi(2x) - \phi(2x - 1) + \phi(2x) + \phi(2x - 1)] = 2\phi(2x)
\]</span> 则： <span class="math display">\[
\phi(2x)=[\psi(x)+\phi(x)] / 2  \tag {12}
\]</span> 同理利用公式（7），可推得： <span class="math display">\[
\phi(2x-1)= [\phi(x) - \psi(x)]/2   \tag{13}
\]</span> 更一般的，对于所有的<span class="math inline">\(x \in R\)</span>,下列关系成立： <span class="math display">\[
\phi(2^jx)=[\psi(2^{j-1}x)+\phi(2^{j-1}x)]/2    \tag {14}
\]</span></p>
<p><span class="math display">\[
\phi(2^{j}x-1)=[\phi(2^{j-1}x)-\psi(2^{j-1}x)]/2    \tag {15}
\]</span></p>
<h2 id="分解">分解</h2>
<p>下面是一个小波分解的例子：</p>
<p>假设一个信号波可由<code>Haar</code>尺度函数表示为： <span class="math display">\[
f(x)=2\phi(4x)+2\phi(4x-1)+\phi(4x-2)-\phi(4x-3)
\]</span> 下面将以上信号波分解成小波表示形式。</p>
<p>我们将每一个加法部分分开计算，由公式（14）和公式（15）： <span class="math display">\[
2 \cdot \phi(4x)=2 \cdot [\psi(2x)+\phi(2x)]/2 = \psi(2x)+\phi(2x)
\]</span></p>
<p><span class="math display">\[
2 \cdot \phi(4x-1)=2 \cdot [\phi(2x) - \phi(2x)] /2 = \phi(2x) - \phi(2x)
\]</span></p>
<p><span class="math display">\[
\phi(4x-2)=\phi[2(2x-1)]=[\psi(2x-1) + \phi(2x-1)]/2
\]</span></p>
<p><span class="math display">\[
\phi(4x-3)=\phi[2(2x-1)-1]=[\phi(2x-1)- \psi(2x-1)]/2
\]</span></p>
<p>以上四个式子合并，有： <span class="math display">\[
f(x) =  \psi(2x-1)+2\phi(2x)
\]</span> 下面再对<span class="math inline">\(2\phi(2x)\)</span>进行拆解： <span class="math display">\[
2 \cdot \phi(2x)=2 \cdot [\psi(x)+\phi(x)] / 2= \psi(x)+\phi(x)
\]</span> 故最终的<span class="math inline">\(f(x)\)</span>可以分解为： <span class="math display">\[
f(x)=\psi(2x-1)+\psi(x)+\phi(x)
\]</span></p>
<h2 id="重构以及应用">重构以及应用</h2>
<p>重构实际上就是基波的加权，在<code>傅里叶变换</code>中,我们称为反傅里叶变换。更一般的说，就是频域转时域。</p>
<p><strong>通常在运用中，重构的参数不会完全使用分解时的参数，多数情况下，会少一部分，否则先分解再重构就没有意义</strong></p>
<ul>
<li>如果在重构时仅加权“细粒度&quot;的<code>Haar波</code>,那么就仅提取变化较大的波。即低通滤波器</li>
<li>如果在重构时仅加权“粗粒度&quot;的<code>Haar波</code>,那么就仅提取变化较小的波。即高通滤波器</li>
</ul>
<p>此外，在信号传输中，若只保留低频信号，可以仅传输分解后的权值，且仅传输低频的权值，接收方在收到权值后再重构成信号。这样即能够滤波，也能够极大的保证传输速度。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数字图像处理</tag>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>《卓有成效的管理者》总结</title>
    <url>/posts/396e7675.html/</url>
    <content><![CDATA[<h2 id="第一章-卓有成效是可以学会的">第一章 卓有成效是可以学会的</h2>
<h3 id="何为管理者">何为管理者</h3>
<p>管理者的定义:管理者即为决策者.也就是说大到组织,小到自身事情,只要你是决策者,即是管理者.</p>
<blockquote>
<p>本书虽说是在说组织的管理者,但小到自身,道理是一样的.相比而言,我认为管理自身的难度会小于组织的管理,因为自己是完全可控的,而他人不一定完全可控.换句话说,自身管理不当,绝不可能管理好一个组织.</p>
</blockquote>
<p>具体到公司(组织)中,包含两方面:</p>
<ul>
<li>企业的掌舵者(总决策者)</li>
<li>工作的组织者(细化的决策者)</li>
</ul>
<blockquote>
<p>一个公司的管理者应该包含至少上述一个方面.若是细分,即一部分人担任掌舵者,另一部分人担任组织者,这种属于有点规模的公司.CEO和COO分离就是很好的例子.若是两者合一则是较小的公司.</p>
</blockquote>
<h3 id="管理者如何有成效">管理者如何有成效</h3>
<p>第一章是所有的全书的总纲,开篇点明卓有成效是可以通过后天训练取得的,并包含以下五个方面:</p>
<ul>
<li>时间管理:顾名思义,系统的管理时间</li>
<li>精确目标:以结果为导向</li>
<li>扬长避短</li>
<li>要事第一</li>
<li>决断能力:决策</li>
</ul>
<p>在后面的章节中,分点论述.</p>
<h2 id="第二章-掌握自己的时间">第二章 掌握自己的时间</h2>
<h3 id="如何解决浪费时间">如何解决浪费时间</h3>
<ul>
<li><p>问题:由于我们时间的不当管理,导致工作效率低下</p></li>
<li><p>找到具体原因:通过记录自己的时间,得到时间日志,再根据时间日志得出自己浪费时间在什么地方.</p></li>
<li><p>解决问题:杜绝浪费自己时间而对自己理想结果而没有帮助的事.</p></li>
</ul>
<blockquote>
<p>通常而言,一个问题的到来我们有三种处理方式:</p>
<ul>
<li>解决问题</li>
<li>推给别人解决问题</li>
<li>不解决问题</li>
</ul>
<p>显然,最后一种是下下之策,这里不谈.在后面一小节中都是以解决问题的方式,也就是第一种处理方式.对于第二种处理方式,我认为在工作中是可行的且是必要的.</p>
</blockquote>
<h3 id="工作中易浪费时间之事">工作中易浪费时间之事</h3>
<p>作者在文中列出了工作中易浪费时间的事:</p>
<ul>
<li>工作被打断:若工作被打断,则你可能需要更多的时间去完成这项任务,且结果还不理想</li>
<li>协调时间:组织越大,花在协调上的时间也就越多</li>
<li>对解决问题无益之事.(所做之事都是为了解决问题)</li>
<li>无效会议</li>
<li>策划不足</li>
<li>零碎时间做事(即<strong>一件事分为零碎的多段,反而更费时间,故在时间规划时这一点应该特别注意</strong>)</li>
</ul>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>太阳兼症</title>
    <url>/posts/dd3d2345.html/</url>
    <content><![CDATA[<p>提示:</p>
<ul>
<li><font color="blue">蓝色</font>表示未理解</li>
<li><font color="red">红色</font>或<strong>加粗</strong>表示重要部分</li>
<li><font color="green">绿色</font>表示我自己的理解</li>
</ul>
<h2 id="葛根汤证">葛根汤证</h2>
<p>太阳病,项背强几几,无汗恶风,葛根汤主之.(31)</p>
<p>葛根四两 麻黄三两(去节) 桂枝二两(去皮) 生姜三两(切) 甘草二两(灸) 芍药二两 大枣二十枚(擘)</p>
<p>上七味,以水一斗,先煮麻黄,葛根,减二升,去白沫,内诸药,煮取三升,去滓,温服一升.覆取微似汗,余如桂枝法将息及禁忌.诸汤皆仿此.</p>
<blockquote>
<p>葛根汤=桂枝汤+麻黄+葛根</p>
</blockquote>
<h2 id="葛根加半夏汤证">葛根加半夏汤证</h2>
<p>太阳与阳明合病者,必自下利,葛根汤主之.(32)</p>
<p>太阳与阳明合病,不下利但呕者,葛根加半夏汤主之.(33)</p>
<p>葛根四两 麻黄三两(去节) 甘草二两(灸) 芍药二两 桂枝二两(去皮) 生姜二两(切) 半夏半升(洗) 大枣十二枚(擘)</p>
<p>上八味,以水一升,先煮葛根,麻黄,减二升,去白沫,内诸药,煮取三升,覆取微似汗.</p>
<blockquote>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/%E5%A4%AA%E9%98%B3%E8%A1%A8%E5%AE%9E%E5%85%BC%E9%98%B3%E6%98%8E%E8%A1%A8%E8%AF%81.png">

</div>
</blockquote>
<h2 id="大青龙汤症">大青龙汤症</h2>
<p>太阳中风,脉浮紧,发热恶寒,身疼痛,不汗出而烦躁者,大青龙主之.若脉微弱,汗出恶风者,不可服之.服之则厥逆,筋惕肉瞤,此为逆也.(38)</p>
<p>大青龙汤方</p>
<p>麻黄六两(去节) 桂枝二两(去皮) 甘草二两(灸) 杏仁四十枚(去皮尖) 生姜三两(切) 大枣十枚(擘) 石膏如鸡子大(碎)</p>
<p>上七味,以水七升,先煮麻黄,减二升,去上沫,内诸药,煮取三升,去滓,温服一升,取微似汗.汗出多者,温粉粉之.一服汗者,停后服.若复服,汗多亡阳遂虚,恶风烦躁,不得眠也.</p>
<blockquote>
<p>寒邪<strong>闭表(大青龙汤的基本前提)</strong>，致使阳气郁遏而不得宣泄，进而化热，郁热扰心，而生烦躁。<strong>此为阳盛造成的烦躁</strong></p>
<p>但若为肾阳虚，虚弱的阳气和阴寒相争，争而不胜时，出现肢体躁动不宁（<strong>阴盛则烦</strong>）（<strong>脉微弱很好的验证了阳虚的特点</strong>），此外，汗出恶风为肾阳虚衰，表阳不顾，温煦失司的特征</p>
<p>“阳盛则噪，阴盛则烦”，<strong>大青龙汤仅能用于阳盛造成的心烦，不可用于阴盛造成的噪烦，否则大青龙汤会造成过汗亡阳</strong></p>
<p>服之则厥逆,筋惕肉瞤：表示阴盛情况下服大青龙汤的后果，手足厥逆，肌肉跳动。<font color="green">这里的肌肉跳动应该是汗出过多，筋脉失濡所致</font></p>
</blockquote>
<blockquote>
<p><strong>大青龙汤见汗出决不可再用，否则过汗亡阳</strong></p>
</blockquote>
<p>伤寒脉浮缓,身不疼但重,乍有轻时,无少阴症者,大青龙汤发之.(39)</p>
<blockquote>
<p>伤寒浮缓脉和身重提示湿郁肌表（<strong>缓脉营虚卫有余，或风或湿或脾虚</strong>），乍有轻时提示湿欲向里，故时轻时重。</p>
<p>无少阴证者：提示无少阴肾阳虚衰的烦躁（<strong>需重点鉴别阳盛阴盛，否则过汗亡阳</strong>），少阴寒化症也会出现不汗出而烦躁的症状（少阴病，欲吐不吐，心烦，但欲寐）</p>
</blockquote>
<h2 id="小青龙汤证">小青龙汤证</h2>
<p>伤寒表不解，心下有水气，干呕发热而咳，或渴，或利，或噎，或小便不利、少腹满，或喘者，小青龙汤主之。（40）</p>
<p>麻黄（去节） 芍药 细辛 干姜 甘草（灸） 桂枝（去皮） 各三两 五味子半升 半夏半升（洗）</p>
<p>上八味，以水一斗，先煮麻黄，减二升，去上沫，内诸药，煮取三升，去滓，温服一升。若渴，去半夏，加栝楼根三两；若微利，去麻黄，加荛花，如一鸡子，熬令赤色；若噎，去麻黄，加附子一枚，炮；若小便不利，少腹满者，去麻黄，加茯苓四两；若喘，去麻黄，加杏仁半升，去皮尖。且荛花不治利，麻黄主喘，今此语反之，宜非仲景意。（臣亿等谨按，小青龙汤，大要治水。又按《本草》，荛花下十二水，若水去，利则止也。又按《千金》形肿者应内麻黄，乃杏仁者，以麻黄发其阳故也。以此证之，岂非仲景意也。）</p>
<blockquote>
<p>本症是<strong>风寒袭表,内有水饮</strong>,内外邪气相结合而形成</p>
<p>伤寒表不解，心下有水气:伤寒兼内有停饮.</p>
</blockquote>
<blockquote>
<p>水饮内盛的症状:</p>
<ul>
<li>面部庞肿 - 水气</li>
<li>面部发黑(发黄) - 水色</li>
<li>面部色素增多 - 水斑</li>
</ul>
</blockquote>
<blockquote>
<p>干呕发热而咳：干呕是因为水邪犯胃，胃气上逆。发热是因为外有表邪。咳或喘是小青龙汤的主症，这是因为外寒引动内饮，内外合邪，为水寒，水寒射肺。从而导致肺失宣降，最终导致咳喘</p>
<p>补充:</p>
<p>水寒射肺的症状：咳,吐大量的白色泡沫痰,落盂成水.兼有面部庞肿</p>
</blockquote>
<blockquote>
<p>或渴,或利,或噎,或小便不利,少腹满:水饮内停,津液不化,故渴;水寒邪气㓎渍肠道,故利;水寒邪气阻滞胸中气机,故噎;水邪下流膀胱,导致膀胱气化不利,故小便不利,少腹满</p>
</blockquote>
<blockquote>
<p>现代临床经常应用小青龙汤治疗慢性支气管炎,支气管哮喘属寒饮射肺或表寒内饮者.<strong>但该方辛温燥烈之性较强,仅适用于水寒射肺的急性期使用,善后可用苓桂剂(如苓桂术甘汤,苓桂枣甘汤,茯苓甘草汤,苓桂甘草汤)</strong></p>
</blockquote>
<p>伤寒新下有水气,咳而微喘,发热不渴.服汤已渴者,此寒去欲解也.小青龙汤主之.(41)</p>
<blockquote>
<p>不渴:寒饮内盛,阳气不运.(<font color="green">水饮内挺渴和不渴都可能出现,这取决于内停的位置</font>)</p>
<p>服汤已渴:小青龙汤属阳热药,阳热药伤津耗液,津液一时不足,故口渴</p>
</blockquote>
<blockquote>
<p><strong>若用在小青龙汤中兼见郁热扰心的心烦,也可在小青龙汤中加石膏,即小青龙汤中加石膏汤.</strong></p>
<p>方中,细辛中含有黄樟醚,为致癌成分,故不能常用小青龙汤.</p>
</blockquote>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
        <tag>太阳病</tag>
      </tags>
  </entry>
  <entry>
    <title>傅里叶级数与傅里叶变换推导</title>
    <url>/posts/fb91b52c.html/</url>
    <content><![CDATA[<p>本篇博客来自于<code>DR_CAN</code>的<a href="https://www.bilibili.com/video/BV1Et411R78v" target="_blank" rel="noopener">傅里叶函数推导</a>，加上自己的一些理解，感谢大神的分享。</p>
<h1 id="三角函数系">三角函数系</h1>
<p>有三角函数系： <span class="math display">\[
[sin(0x),cos(0x),sinx,cosx,sin2x,cos2x,...,sin(nx),cos(nx)] \tag    1
\]</span></p>
<blockquote>
<ul>
<li><p>三角函数系，实质上是一组互不相关的基。在数学中这被称为基函数,即一个函数空间中最基本的组成元素.在信号中则被称为基波.</p></li>
<li><p>任意一个周期函数可以理解成在一个函数空间中的元素，为了表征这个元素，就需要基本元素通过加权和来得到它，这个基本元素就是基，对于函数空间而言，这个基被称为基函数。用数学术语叫做线性张成。</p></li>
<li><p>类似于欧几里得空间中的基向量，每一个基函数不能由其他基函数表征，否则这个基函数将没有存在的意义。这类似于线性空间中的线性无关。</p></li>
<li><p>级数的其中一个应用就是基的加权，无穷级数就是无限维情况下基的加权。有的情况下有的基的权重太小，删除这些维，就得到这个值的近似值。</p></li>
</ul>
</blockquote>
<p>可以证明，三角函数的所有基必正交： <span class="math display">\[
\int_{-\pi}^{\pi}sin(nx)cos(mx)dx=0,其中(m\neq{n})    \tag 2
\]</span></p>
<p><span class="math display">\[
\int_{-\pi}^{\pi}sin(nx)sin(mx)dx=0,其中(m\neq{n})    \tag 3
\]</span></p>
<p><span class="math display">\[
\int_{-\pi}^{\pi}cos(nx)cos(mx)dx=0,其中(m\neq{n})    \tag 4
\]</span></p>
<p>当<span class="math inline">\(m=n\)</span> 时，有： <span class="math display">\[
\int_{-\pi}^{\pi}cos(mx)cos(mx)dx=\pi   \tag 5
\]</span></p>
<p>以上被称为三角函数的正交性</p>
<h1 id="三角级数">三角级数</h1>
<p>对于一个以周期为<span class="math inline">\(2\pi\)</span>的周期函数<span class="math inline">\(f(x)\)</span>(即<span class="math inline">\(f(x)=f(x+2\pi)\)</span>),可以展开为三角级数： <span class="math display">\[
f(x) =\sum_{n=0}^{\infty}a_n{cos(nx)}+\sum_{n=0}^{\infty}b_n{sin(nx)}   \tag 6
\]</span></p>
<hr>
<p>下面计算<span class="math inline">\(a_n\)</span>和<span class="math inline">\(b_n\)</span>，第一步先求<span class="math inline">\(a_0\)</span></p>
<p>经过变换，有：</p>
<p><span class="math display">\[
f(x)=a_0cos(0x)+b_0sin(0x)+\sum_{n=1}^{\infty}a_ncos(nx)+b_nsin(nx) \tag 7
\]</span></p>
<p><span class="math display">\[
f(x)=a_0+\sum_{n=1}^{\infty}a_ncos(nx)+b_nsin(nx)   \tag 8
\]</span></p>
<p>两边同时积分，有： <span class="math display">\[
\int_{-\pi}^{\pi}f(x)dx=\int_{-\pi}^{\pi}a_0dx+\int_{-\pi}^{\pi}\sum_{n=1}^{\infty}{a_ncos(nx)}dx+\int_{-\pi}^{\pi}\sum_{n=1}^{\infty}{b_nsin(nx)}dx    \tag 9
\]</span></p>
<p><span class="math display">\[
\int_{-\pi}^{\pi}f(x)dx=\int_{-\pi}^{\pi}a_0dx+\int_{-\pi}^{\pi}\sum_{n=1}^{\infty}{ a_n \times 1 \times cos(nx)}dx+\int_{-\pi}^{\pi}\sum_{n=1}^{\infty}{b_n \times 1 \times sin(nx)}dx \tag {10}
\]</span></p>
<p>根据三角函数的正交性，有： <span class="math display">\[
\int_{-\pi}^{\pi}f(x)dx=\int_{-\pi}^{\pi}a_0dx  \tag {11}
\]</span> 则： <span class="math display">\[
a_0=\frac{1}{2\pi}\int_{-\pi}^{\pi}f(x)dx   \tag {12}
\]</span></p>
<hr>
<p>下面求<span class="math inline">\(a_n\)</span>,在（6）中两边同时乘以<span class="math inline">\(cos(mx)\)</span>,再积分（<span class="math inline">\(m\in Z\)</span>），有： <span class="math display">\[
\int_{-\pi}^{\pi}f(x)cos(mx)dx=\int_{\pi}^{\pi}a_0cos(mx)dx+\int_{\pi}^{\pi}\sum_{n=1}^{\infty}cos(nx) \times a_n \times cos(mx)dx+\int_{\pi}^{\pi}\sum_{n=1}^{\infty}sin(nx) \times b_n \times cos(mx)dx   \tag {13}
\]</span> 根据三角级数的性质可得： <span class="math display">\[
\int_{-\pi}^{\pi}f(x)cos(mx)dx=\int_{\pi}^{\pi}a_m(cos^2(mx))dx=a_m\pi  \tag {14}
\]</span> 则： <span class="math display">\[
a_n=\frac{1}{\pi}\int_{\pi}^{\pi}f(x)cos(nx)dx  \tag {15}
\]</span> 同理可得： <span class="math display">\[
b_n=\frac{1}{\pi}\int_{\pi}^{\pi}f(x)sin(nx)dx  \tag {16}
\]</span></p>
<h1 id="傅里叶级数">傅里叶级数</h1>
<p>在很多情况下，周期函数的周期不为<span class="math inline">\(2\pi\)</span>,对于周期不为<span class="math inline">\(2\pi\)</span>的周期函数，将其压缩为<span class="math inline">\(2\pi\)</span>，再对其进行三角级数的变换。设存在一个周期函数<span class="math inline">\(f(t)\)</span>，其周期为<span class="math inline">\(2L\)</span>,有： <span class="math display">\[
f(t)=f(t+2L)    \tag {17}
\]</span> 将函数<span class="math inline">\(f(t)\)</span>压缩为<span class="math inline">\((0,2\pi)\)</span>的函数为： <span class="math display">\[
x=\frac{t}{2L} \times 2\pi  \tag {18}
\]</span> 可得： <span class="math display">\[
x=\frac{\pi}{L} \times t    \tag {19}
\]</span></p>
<p><span class="math display">\[
t = \frac{L}{\pi}x  \tag {20}
\]</span></p>
<p>对函数<span class="math inline">\(f(t)\)</span>换元，有： <span class="math display">\[
f(t)=f(\frac{L}{\pi}x)=g(x) \tag {21}
\]</span> 此时，函数<span class="math inline">\(g(x)\)</span>为以<span class="math inline">\(2\pi\)</span>为周期的周期函数,有： <span class="math display">\[
g(x)=\frac{a_0}{2}+\sum_{n=1}^{\infty}[a_ncos(nx)+b_nsin(nx)]   \tag {22}
\]</span></p>
<p>当<span class="math inline">\(x=-\pi\)</span>时，有<span class="math inline">\(t=-L\)</span>;当<span class="math inline">\(x=\pi\)</span>时，有<span class="math inline">\(t=L\)</span>.且<span class="math inline">\(x\)</span>在<span class="math inline">\((-\pi,\pi)\)</span>范围内单调递增。由公式（16）~(18),有： <span class="math display">\[
a_0=\frac{1}{\pi}\int_{-\pi}^{\pi}g(x)dx=\frac{1}{\pi}\int_{-L}^{L}f(t)d(\frac{\pi}{L}t)=\frac{1}{\pi}\frac{\pi}{L}\int_{-L}^{L}f(t)dt=\frac{1}{L}\int_{-L}^{L}f(t)dt   \tag {23}
\]</span></p>
<p>同理，有： <span class="math display">\[
a_n = \frac{1}{L}\int_{-L}^{L}f(t)cos(\frac{n\pi}{L}t)dt    \tag {24}
\]</span></p>
<p><span class="math display">\[
b_n = \frac{1}{L}\int_{-L}^{L}f(t)sin(\frac{n\pi}{L}t)dt    \tag {25}
\]</span></p>
<hr>
<p>在工程中，<span class="math inline">\(t\)</span>是从<span class="math inline">\(0\)</span>开始，则<span class="math inline">\(t\)</span>的取值范围为<span class="math inline">\((0,2L)\)</span>,令<span class="math inline">\(T=2L\)</span>,并令<span class="math inline">\(\omega=\frac{\pi}{L}\)</span>,（<span class="math inline">\(\omega\)</span>被称为基频率，实质上就是周期的倒数）即在式（19）中<span class="math inline">\(x=\omega \times t\)</span>,即<span class="math inline">\(\omega\)</span>为<span class="math inline">\(x\)</span>和<span class="math inline">\(t\)</span>的比例。则式（22）可以替换为： <span class="math display">\[
f(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}[a_ncos(n \omega t) + b_nsin(n \omega t)]     \tag {26}
\]</span> 则式（23）可以变为： <span class="math display">\[
a_0=\frac{1}{T/2}\int_{0}^{T}f(t)dt=\frac{2}{T}\int_{0}^{T}f(t)dt   \tag {27}
\]</span> 式(24)可变为： <span class="math display">\[
a_n = \frac{1}{L}\int_{-L}^{L}f(t)cos(\frac{n\pi}{L}t)dt=\frac{2}{T}\int_{0}^{T}f(t)cos(n \omega t)dt   \tag {28}
\]</span> 式（25）可以变为： <span class="math display">\[
b_n = \frac{1}{L}\int_{-L}^{L}f(t)sin(\frac{n\pi}{L}t)dt=\frac{2}{T}\int_{0}^{T}f(t)sin(n \omega t)dt   \tag {29}
\]</span></p>
<h1 id="傅里叶级数的复数表达形式">傅里叶级数的复数表达形式</h1>
<p>欧拉公式： <span class="math display">\[
e^{i\theta}=cos\theta+isin\theta    \tag {30}
\]</span> 则由欧拉公式(29)可得： <span class="math display">\[
cos\theta = \frac{1}{2}(e^{i\theta}+e^{-i\theta})   \tag {31}
\]</span></p>
<p><span class="math display">\[
sin\theta = \frac{1}{2}i(e^{i\theta}-e^{-i\theta})  \tag {32}
\]</span></p>
<p>则式（26）可由欧拉公式表示为： <span class="math display">\[
f(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}[a_n \cdot \frac{1}{2}(e^{in \omega t} + e^{-in \omega t}) -  \frac{1}{2}i \cdot b_n \cdot (e^{in \omega t} - e ^{-in \omega t})] \tag {33}
\]</span> 化简为： <span class="math display">\[
f(t)=\frac{a_0}{2}+\sum_{n=1}^{\infty}\frac{a_n - ib_n}{2}e^{in \omega t} + \sum_{n=1}^{\infty}\frac{a_n + ib_n}{2}e^{-in \omega t} \tag {34}
\]</span></p>
<p>再化简为： <span class="math display">\[
f(t) = \sum_{n=0}^{0}\frac{a_0}{2} \cdot e^{i n \omega t}+\sum_{n=1}^{\infty}\frac{a_{n-1}b_n}{2} \cdot e^{in \omega t}+\sum_{n=-\infty}^{-1}\frac{a_{-n}+ib_{-n}}{2} \cdot e^{in \omega t} \tag {35}
\]</span> <strong>上式合并</strong>，有： <span class="math display">\[
f(t)= \sum_{n=-\infty}^{\infty}C_n \cdot e^{in \omega t}    \tag {36}
\]</span> 其中：</p>
<!--
$$
C_n= \begin{cases}
    \frac{a0}{2}, & \text {n=0} \\
    \frac{a_n-ib_n}{2}, & \text {n=1,2,3,4,....}    \\
    \frac{a_{-n}+ib_{-n}}{2} & \text {n=-1,-2,-3,-4,....}
\end{cases}
$$
-->
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"> <msub> <mi>C</mi> <mi>n</mi> </msub> <mo>=</mo> <mrow> <mo>{</mo> <mtable columnalign="left left" rowspacing=".2em" columnspacing="1em" displaystyle="false"> <mtr> <mtd> <mfrac> <mrow> <mi>a</mi> <mn>0</mn> </mrow> <mn>2</mn> </mfrac> <mo>,</mo> </mtd> <mtd> <mtext>n=0</mtext> </mtd> </mtr> <mtr> <mtd> <mfrac> <mrow> <msub> <mi>a</mi> <mi>n</mi> </msub> <mo>−<!-- − --></mo> <mi>i</mi> <msub> <mi>b</mi> <mi>n</mi> </msub> </mrow> <mn>2</mn> </mfrac> <mo>,</mo> </mtd> <mtd> <mtext>n=1,2,3,4,....</mtext> </mtd> </mtr> <mtr> <mtd> <mfrac> <mrow> <msub> <mi>a</mi> <mrow class="MJX-TeXAtom-ORD"> <mo>−<!-- − --></mo> <mi>n</mi> </mrow> </msub> <mo>+</mo> <mi>i</mi> <msub> <mi>b</mi> <mrow class="MJX-TeXAtom-ORD"> <mo>−<!-- − --></mo> <mi>n</mi> </mrow> </msub> </mrow> <mn>2</mn> </mfrac> </mtd> <mtd> <mtext>n=-1,-2,-3,-4,....</mtext> </mtd> </mtr> </mtable> <mo fence="true" stretchy="true" symmetric="true"></mo> </mrow> </math></p>
<hr>
<p>下面计算<span class="math inline">\(C_n\)</span>，当<span class="math inline">\(n=0\)</span>时，由式（27），有： <span class="math display">\[
C_0=\frac{1}{2} \cdot \frac{2}{T} \int_{0}^{T}f(t)dt=\frac{1}{T} \int_{0}^{T}f(t)dt \tag {37}
\]</span> 当<span class="math inline">\(n\)</span>为正整数时，将式（28）和式（29）代入，化简，得： <span class="math display">\[
C_n=\frac{1}{T}\int_{0}^{T}f(t) \cdot e^{-in \omega t}dt  \; \; \text {,n=(1,2,3,4,....)}   \tag {38}
\]</span> 同理，可得： <span class="math display">\[
C_n=\frac{1}{T}\int_{0}^{T}f(t)e^{-in \omega t}dt \text{ n=-1,-2,-3,-4,...} \tag {39}
\]</span> 通过上式，可以发现，式（37）~（39）可以统一为一个式子,即： <span class="math display">\[
C_n=\frac{1}{T}\int_0^{T}f(t) \cdot e^{-in \omega t}dt  \tag {40}
\]</span></p>
<hr>
<p>结合式（36）和式（40），我们得到<strong>傅里叶级数最终的复数表达形式</strong>： <span class="math display">\[
f(t)= \sum_{n=-\infty}^{\infty}C_n \cdot e^{in \omega t}    \tag {41}
\]</span> 其中： <span class="math display">\[
C_n=\frac{1}{T}\int_0^{T}f(t) \cdot e^{-in \omega t}dt
\]</span></p>
<h1 id="傅里叶变换">傅里叶变换</h1>
<p>补充，<strong>频谱图</strong>：</p>
<blockquote>
<p>傅里叶级数是将一个周期函数<span class="math inline">\(f(t)\)</span>展开成多个三角级数相加，从图上看，就如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210709114728.jpg">

</div>
<p>上图实际上少了傅里叶变换结果的值，也就是<span class="math inline">\(C_n\)</span>的值。我们现在从另外一个方向（频域）看上图，得到的图可能是如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210709115517.jpeg">

</div>
<p>上图中，横轴是频域的频率（更确切的说是三角级数的基函数<span class="math inline">\(e^{in \omega t}\)</span>本身，这里只是用频率<span class="math inline">\(\omega\)</span>来指代基函数）,纵轴是线性张成的权重，即上式<span class="math inline">\(C_n\)</span>,也是傅里叶变换的结果<span class="math inline">\(F(t)\)</span>。<strong>(并非<span class="math inline">\(f(t)\)</span>).</strong>.需要注意的是，<span class="math inline">\(C_n\)</span>也可能是一个复数，此时，上图就是一个三维平面。</p>
</blockquote>
<p>傅里叶级数成立的条件是<span class="math inline">\(f(t)\)</span>必须是一个周期为<span class="math inline">\(L\)</span>的周期函数，但在工程中很多时候，<span class="math inline">\(f(t)\)</span>不一定是周期函数，自然而然就不能用傅里叶级数。<strong>对于一个非周期函数，令<span class="math inline">\(L \to \infty\)</span>,也就是说，令周期趋近于无穷大，此时<span class="math inline">\(f(t)\)</span>可以看成一个周期为正无穷的周期函数，对于该周期函数，就可以用傅里叶级数分解</strong>。从而演变成傅里叶变换。</p>
<p>对于以<span class="math inline">\(T\)</span>为周期的周期函数<span class="math inline">\(f_T(t)=f_T(t+T)\)</span>,由之前的推导，有： <span class="math display">\[
f_T(t)= \sum_{n=-\infty}^{\infty}C_n \cdot e^{in \omega_0 t}    \tag {42}
\]</span> 其中 <span class="math display">\[
C_n=\frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}f_T(t) \cdot e^{-in \omega_0 t}dt   \tag {43}
\]</span> 上式为傅里叶级数的一般形式，</p>
<p>当<span class="math inline">\(T\to \infty\)</span>时，此时的周期<span class="math inline">\(T\)</span>可以忽略不计，有： <span class="math display">\[
\lim_{T \to \infty}f_T(t)=f(t)  \tag {44}
\]</span> <span class="math inline">\(\Delta \omega\)</span>表示在频域上两个相邻基频率的差距，有： <span class="math display">\[
\Delta \omega=(n+1) \omega_0 - n \omega_0= \omega_0 = \frac{2 \pi}{T}   \tag {45}
\]</span> 当<span class="math inline">\(T \to \infty\)</span>时，有<span class="math inline">\(\Delta \omega \to 0\)</span>，即此时基频率之间会无限接近。换句话说，<strong>此时的傅里叶级数由离散转为连续</strong>。</p>
<p>现在将式（42）代入式（41）中 ，有： <span class="math display">\[
f(t)= \sum_{n= - \infty}^{\infty} \left[ \frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}}f(t) \cdot e^{-in \omega_0 t}dt \right] \cdot e^{in \omega_0 t} \tag {46}
\]</span> 由于<span class="math inline">\(\Delta \omega=\frac{2 \pi}{T}\)</span>,则有<span class="math inline">\(T=\frac{2 \pi}{\Delta \omega}\)</span>,代入式（46）中，有： <span class="math display">\[
f(t)= \sum_{n= - \infty}^{\infty} \left[ \frac{\Delta \omega}{2 \pi}\int_{-\frac{T}{2}}^{\frac{T}{2}}f(t) \cdot e^{-in \omega_0 t}dt \right] \cdot e^{in \omega_0 t} \tag {47}
\]</span> 当<span class="math inline">\(T \to \infty\)</span>时，有</p>
<ul>
<li><span class="math inline">\(\sum_{n = -\infty}^{\infty} \Delta \omega=\int_{-\infty}^{\infty}d \omega\)</span>(即从离散形式变为连续形式)</li>
</ul>
<p>则， <span class="math display">\[
f(t)=\frac{1}{2\pi}\int_{-\infty}^{\infty}\int_{-\infty}^{\infty}f(t) \cdot e^{-i \omega t}dt \cdot e^{i \omega t}d \omega  \tag {48}
\]</span> 令<span class="math inline">\(F(t)=\int_{-\infty}^{\infty}f(t)e^{-i \omega t}dt\)</span>,则上式等于： <span class="math display">\[
f(t)=\frac{1}{2 \pi}\int_{-\infty}^{\infty}F(t)e^{i \omega t}d \omega   \tag {49}
\]</span> 其中 <span class="math display">\[
F(t)=\int_{-\infty}^{\infty}f(t)e^{-i \omega t}dt   \tag {50}
\]</span> 式（50）称为傅里叶变换（FT），也就是<span class="math inline">\(f(t)\)</span>在频域的分量，式（49）称为傅里叶变换的逆变换，是一个从频域反向合成时域函数的过程。</p>
<p>至此，傅里叶变换推导完毕。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>数字图像处理</tag>
        <tag>信号处理</tag>
      </tags>
  </entry>
  <entry>
    <title>SSD模型</title>
    <url>/posts/719cc2e5.html/</url>
    <content><![CDATA[<h1 id="概述">概述</h1>
<p><code>SSD</code>全称<code>Single Shot MultiBox Detector</code>，是一个<code>One-Stage</code>的目标检测模型，以下是<code>SSD</code>和<code>YOLO</code>以及<code>Faster RCNN</code>的对比结果图。可以看到<code>SSD</code>比<code>YOLO</code>和<code>Faster RCNN</code>强很多（无论是速度上还是精度上）。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210506134247.jpg">

</div>
<h1 id="主要改进点">主要改进点</h1>
<p>实质上,<code>SSD</code>在<code>YOLO</code>的基础上就仅进行了三点改进，一下分别阐述：</p>
<h2 id="多尺度特征图检测">多尺度特征图检测</h2>
<p><code>YOLO</code>对于小目标的检测效果不好，所以在<code>SSD</code>中，用多尺度特征图来解决小目标的问题，下图是<code>SSD</code>模型和<code>YOLO</code>模型的对比，如图所示： <img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210512145819.png"></p>
<p>从上图可以看出：</p>
<ul>
<li><code>SSD</code>的主干网络是<code>VGG16</code>,<code>SSD</code>的第一个<code>Feature Map</code>是<code>VGG</code>中的<code>Conv5_3</code>,也就是<code>VGG16</code>第5个阶段的第3个卷积层</li>
<li>对于<code>VGG16</code>后两层全连接层，<code>SSD</code>利用<span class="math inline">\(3 \times 3\)</span>的卷积层和<span class="math inline">\(1 \times 1\)</span>的卷积层实现</li>
<li><code>SSD</code>模型有6个<code>Feature Map</code>对应的输出，每一个输出加入<span class="math inline">\(3 \times 3\)</span> 的卷积层得到最终结果</li>
<li>在<code>Conv6</code>中的<span class="math inline">\(3 \times 3\)</span>的卷积并不是普通的卷积，而是用的<code>Dilation Conv</code>（带孔卷积）</li>
<li>在<code>Conv5_3</code> 之后（也就是第一个输出<code>Feature Map</code>）接一个<code>L2 Normalization</code>,<code>L2 Normalization</code>不同于<code>Batch Normalization</code>，<code>Batch Normalization</code>是在[batch_size,width,height]三个维度上做归一化，而<code>L2 Normalization</code>是在<strong><code>Channel</code></strong>的维度上做归一化</li>
</ul>
<h3 id="dilation-conv">Dilation Conv</h3>
<p><code>Dilation Conv</code>的目的是扩大卷积的视野，如下图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210512150349.png">

</div>
<p>图中，(a)是普通的卷积层，(b)的扩张率为2，此时视野变成<span class="math inline">\(7 \times 7\)</span>,（c）扩张率为4,此时视野变成<span class="math inline">\(15 \times 15\)</span></p>
<h2 id="default-box">Default Box</h2>
<p><code>Default Box</code>基本上等同于<code>Faster RCNN</code>中的<code>Anchor Box</code>，其数量上稍有不同，这里不再详述。</p>
<h1 id="loss函数">Loss函数</h1>
<p>由于<code>SSD</code>模型采用了<code>Default box</code>,所以，<code>loss</code>函数和<code>Faster RCNN</code>大同小异，但需要值得注意的是，在<code>SSD</code>中并没有<code>confidence</code>这一概念，在<code>SSD</code>中会在<code>class</code>部分多添加一类表示背景.所以,<code>SSD</code>的<code>loss</code>仅有两部分。一下是<code>SSD</code>模型的总体<code>loss</code>: <span class="math display">\[
L(x,c,l,g) = \frac{1}{N}(L_{conf}(x,c)+ \alpha L_{loc}(x,l,g)) \tag 1
\]</span></p>
<h3 id="位置loss">位置Loss</h3>
<p>位置<code>loss</code>基本上完全同<code>Faster RCNN</code>,也是预测<code>Anchor Box</code>和<code>Ground Truth</code>的偏差，其内部所用的<code>loss</code>也是<code>smooth L1</code></p>
<h2 id="分类loss">分类Loss</h2>
<p>分类<code>loss</code>用<code>Cross Entropy</code></p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/33544892" target="_blank" rel="noopener">目标检测|SSD原理与实现</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>目标检测</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>麻黄汤方</title>
    <url>/posts/13f147b0.html/</url>
    <content><![CDATA[<h2 id="太阳表实证的一般适应证">太阳表实证的一般适应证</h2>
<p>太阳病，头痛，发热，身疼腰痛，骨节疼痛，恶风，无汗而喘者，麻黄汤主之。（35）</p>
<p>麻黄三两（去节） 桂枝三两（去皮） 甘草一两（灸） 杏仁七十个（去皮尖）</p>
<p>上四味，以水九升，先煮麻黄，减二升，去上沫，内诸药，煮取二升半，去滓，温服八合。覆取微似汗，不须啜粥，余如桂枝法将息。</p>
<p>太阳病，十日以去，脉浮细而嗜卧者，外已解也。设胸满肋痛者，与小柴胡汤。脉但浮者，与麻黄汤。（37）</p>
<p>脉浮者，病在表，可发汗，宜麻黄汤。（51）</p>
<p>脉浮而数者，可发汗，宜麻黄汤（52）</p>
<blockquote>
<p>麻黄汤的适应证总结为麻黄八证，实质上是三组症状：</p>
<ol style="list-style-type: decimal">
<li>发热，恶寒，恶风（或已发热，或未发热，必恶寒）</li>
<li>头痛，身痛，腰疼，骨节疼痛</li>
<li>无汗而喘</li>
</ol>
</blockquote>
<blockquote>
<p>主病及病机：</p>
<ul>
<li>寒邪袭表，寒主收引，导致卫阳郁遏，所以见发热恶寒（太阳表实证多数情况下是卫阳郁遏导致的发热，卫阳抗邪于这种情况也有，但多数情况下的解释是第一种）。</li>
<li>寒主痛，太阳经从头到脚，经过后背颈项，所以见头痛，腰疼，身痛。</li>
<li><strong>肺合皮毛，寒邪闭表导致肺的宣发肃降失调，从而导致肺窍不利，故无汗而喘</strong></li>
</ul>
<p>补充：</p>
<ul>
<li>肺的宣发：将体内的浊气排除体外</li>
<li>肺的肃降：将吸入的清气向下散布</li>
</ul>
</blockquote>
<blockquote>
<p>服麻黄汤后，结果总结如下所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210514145646.png">

</div>
<p>脉浮细而嗜卧：根据《黄帝内经》的解释，脉由粗变细是邪气退却的表现（<strong>大则病进小则平</strong>）（而由细变粗反而是恶病的征兆，所以临床上突然见脉大有力不一定是好现象）</p>
<p>熊满肋痛：提示邪传少阳，小柴胡汤主之</p>
<p>脉浮表病在表，麻黄为辛温燥烈之药，数脉不可用麻黄，所以见浮数脉，用桂枝汤</p>
</blockquote>
<h2 id="太阳伤寒衄解">太阳伤寒衄解</h2>
<p>太阳病，脉浮紧，无汗，发热，身疼痛，八九日不解，表证仍在，此当发其汗。服药已微除，其人发烦目暝，剧者必衄，衄乃解。所以然者，阳气重故也。麻黄汤主之。（46）</p>
<p>太阳病，脉浮紧，发热，身无汗，自衄者愈。（47）</p>
<p>伤寒脉浮紧，不发汗，因致衄者，麻黄汤主之。（55）</p>
<blockquote>
<p>太阳和衄解有以下三种情况:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210520102411.png">

</div>
</blockquote>
<blockquote>
<p><code>太阳病，脉浮紧，无汗，发热，身疼痛</code>这是典型的太阳伤寒证,八九日未解，此时阳气郁遏已久,营中的邪气来不及从汗而解，于是从鼻衄而解。（因为肺合皮毛，而太阳主表，所以<strong>太阳表症一般通过鼻衄而解</strong>，其他经上的热不能通过鼻衄来解，比如阳明里热）</p>
<p><strong>麻黄汤症一定要脉浮,若脉不浮,表示正气不能抗邪于表,不可发汗,汗出则更伤阴伤阳</strong></p>
<p><strong>若衄血不止,高热不退,提示寒邪入里化热,内入营血,破血妄行,用犀角地黄汤</strong></p>
<hr>
</blockquote>
<blockquote>
<p>补充：汗血同源</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210520103507.jpg">

</div>
<p>汗血同源的实质是津液和血同源</p>
</blockquote>
<h2 id="麻黄汤其他适应症">麻黄汤其他适应症</h2>
<p>太阳与阳明合病,喘而胸满者,不可下,宜麻黄汤.(36)</p>
<blockquote>
<p>这里的阳明病表示<strong>阳明经表证</strong>(若是阳明里热里实,用桂枝汤(太阳病,外证未解,不可下也,下之为逆,欲解外者,宜桂枝汤)).</p>
</blockquote>
<blockquote>
<p>&lt;<医宗金鉴 * 伤寒心法要诀>&gt;中对于阳明表证的论述:葛根浮长表阳明,缘缘面赤额头痛,发热恶寒身无汗,目痛鼻干卧不宁.</医宗金鉴></p>
<ul>
<li>葛根:葛根汤</li>
<li>浮长:脉浮弦脉(弦脉端直以长)</li>
</ul>
<p>阳明表证很像太阳表实证,发热,恶寒,无汗,但<strong>由于阳明经脉走头面,所以阳明经脉会有额头通</strong></p>
</blockquote>
<blockquote>
<p>喘而胸满:表示太阳病重于阳明病(麻黄汤症中,有无汗而喘,为寒邪闭表,肺气宣发肃降失调,故无汗而喘).(若是阳明病重于太阳病,则下利或呕)</p>
</blockquote>
<h2 id="麻黄九禁">麻黄九禁</h2>
<p>咽喉干燥者,不可发汗.(83)</p>
<blockquote>
<p><strong>咽通于胃,喉通于肺</strong>,咽喉为肺胃之门户.且足少阴肾经也通于喉(肾经循喉咙,挟舌本).故喉干和肺胃肾都可能有关系.干燥提示阴液不足,发汗更伤津液.</p>
</blockquote>
<p>淋家,不可发汗,发汗必便血.(84)</p>
<blockquote>
<p>中医六淋多属下焦阴虚而热结膀胱所致,而此时用辛温发汗之药,会以热助热,更伤津液.若迫血妄行,则会出现便血.</p>
</blockquote>
<blockquote>
<p>另:中医淋病多由下焦亏虚,暗生内热所致.或与湿热两热互结于膀胱之腑(除寒淋外),也就是说,淋病多由阴虚内热于膀胱腑所致.</p>
<p>癃闭较淋病为复杂,共分以下几类:</p>
<ul>
<li>阳虚:气弱则不能宣通.治用宣阳堂</li>
<li>阴虚:阴虚有热,则小便不利.治用济阴汤.</li>
<li>阴阳两虚:脉数者阴分虚也，无力者阳分虚也.以上两方并用,轮流换服</li>
<li>湿热壅滞:治用白茅根汤</li>
<li>下焦受寒:治用温通汤</li>
</ul>
<p>人之水饮，非阳气不能宣通。上焦阳虚者，水饮停于膈上。中焦阳虚者，水饮停于脾胃。下焦阳虚者，水饮停于膀胱.癃闭之症,还是多数由于阳虚导致水饮停于下焦所引起的.(至于湿热下注和寒邪引起的癃闭,较好辨别).若水饮停于上焦,用小青龙汤方.</p>
<p>(参考张锡纯&lt;<医学衷中参西录>&gt;)</医学衷中参西录></p>
</blockquote>
<p>疮家,虽身疼痛,不可发汗,汗出则痉.(85)</p>
<blockquote>
<p>久患疮家之人,既有毒热内盛,又因脓血流失而气血两伤.麻黄为辛温发表之剂,用一则更助毒热,二则汗出则阴阳俱伤,气血更虚.</p>
</blockquote>
<p>衄家,不可发汗,汗出必额上陷脉紧急,直视不能眴,不得眠.(86)</p>
<blockquote>
<p>衄家，多阴血亏虚。误用麻黄发汗，营阴被伤，可致阴血更加亏虚，筋脉失去濡养，故太阳穴处筋脉弦急（此为脱水之征），目睛转动不灵活，不能闭目静息。</p>
</blockquote>
<p>亡血家，不可发汗，发汗则寒栗而振。（87）</p>
<blockquote>
<p>有慢性失血性疾病的人，不可发汗，发汗则寒战</p>
</blockquote>
<blockquote>
<p>亡血家则气血两虚，汗血同源，出汗阴阳两伤，必至气血更虚</p>
</blockquote>
<p>汗家，重发汗，必恍惚心乱，小便已阴痛，与禹余粮丸。（88）</p>
<blockquote>
<p>恍惚心乱：汗为心之液，汗出过多，则心失所养，心神无主，神气浮越，故恍惚而心乱。</p>
<p>小便已阴痛：重发汗，则阴津受伤，阴中涩滞，故小便后尿道有疼痛</p>
<p>注：禹余粮丸方已佚</p>
</blockquote>
<p>病人有寒，复发汗，胃中冷，必吐蛔。（89）</p>
<p>脉浮数者，法当汗出而愈，若下之，身重心悸者，不可发汗，当自汗出乃解。所以然者，尺中脉微，此里虚，须表里实，津液自和，便自汗出愈。（49）</p>
<blockquote>
<p>脉浮数,理当用麻黄汤发汗,若用下法,则里虚,阳虚则身重,营血虚则见心悸.尺脉微,表示阳虚.(<strong>在伤寒论中,尺脉微表阳虚,尺脉出现迟脉,表营血不足</strong>).需待表里正气充实,气血充沛,自汗出则愈.</p>
</blockquote>
<p>脉浮紧者,法当身疼痛,宜以汗解之,假令尺中迟者,不可发汗.何以知然?以荣气不足,血少故也.(50)</p>
<blockquote>
<p>脉浮紧,当以麻黄汤发汗,尺脉迟滞,在伤寒论中主营血不足,本证当属里虚加外感.汗血同源,发汗更伤营血.</p>
</blockquote>
<h3 id="麻黄九禁总结">麻黄九禁总结</h3>
<p>凡阴,阳,气,血,表,里诸不足,或湿热,毒热,虚热内盛者,皆当禁用或慎用<strong>辛温发汗</strong></p>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
        <tag>太阳病</tag>
      </tags>
  </entry>
  <entry>
    <title>桂枝汤方及其变方</title>
    <url>/posts/dd3c2345.html/</url>
    <content><![CDATA[<p>提示:</p>
<ul>
<li><font color="blue">蓝色</font>表示未理解</li>
<li><font color="red">红色</font>或<strong>加粗</strong>表示重要部分</li>
<li><font color="green">绿色</font>表示我自己的理解</li>
</ul>
<h2 id="桂枝汤方">桂枝汤方</h2>
<p>太阳中风,阳浮而阴弱,阳浮者,热自发,阴弱者,汗自出,啬啬恶寒,淅淅恶风,翕翕发热,鼻鸣干呕者,桂枝汤主之.</p>
<blockquote>
<p>太阳中风,阳浮而阴弱:太阳中风症,卫阳抗邪于外所以阳浮.汗出则伤营阴(之所以汗出原因有二:1. 风邪轻扬开泄,故汗出2. 卫阳的特点是肥腠理,司开合,卫外而为固.卫阳被伤,则司开合的功能不足,所以导致营阴外越).</p>
<p>阳浮者,热自发:风邪袭表,卫阳抗邪于外,所以见病理性的发热</p>
<p>阴弱者,汗自出:汗出导致营阴被伤.这里应该反过来理解</p>
<p>啬啬恶寒,淅淅恶风,翕翕发热:太阳伤寒的特点是发热,汗出,恶风,脉缓.太阳病的基本特征是脉浮,头项强痛,而恶寒.所以这里讲的是太阳中风的症状.</p>
<p>鼻鸣干呕者:<strong>这里讲的是太阳中风的兼症</strong>.风邪袭表,而肺合皮毛,故见鼻鸣.正气抗邪于外而不能顾护于里,故见干呕(这里的病机同伤寒的呕逆)</p>
</blockquote>
<p>桂枝三两(去皮) ,芍药三两,甘草二两(灸),生姜三两(切),大枣二十枚(擘)(12)</p>
<p>上五味,（口父）咀三味.以水七升,微火煮取三升,去滓,适温寒,服一升.服已须臾,啜热稀粥一升余,以助药力.温覆令一时许,遍身漐漐,微似有汗者宜佳,不可令如水琉璃,病必不除.若一服汗出病差,停后服,不必尽剂.若不汗更服依前法.又不汗,后服小促其间,半日许,令三服尽.若病重者,一日一夜服,周时观之.服一剂尽,病症犹在者,更作服;若汗不出,乃服至二三剂.禁生冷,粘滑,肉面,五辛,酒酪,臭恶等物.</p>
<blockquote>
<p>太阳中风的风邪袭表,卫强营弱,营卫失和.故用桂枝汤的治则为<strong>解肌祛风,调和营卫</strong>.<font color="green">(太阳中风中的卫强并非真的卫强,而是卫气抗邪于表出现病理性的亢奋.中风症应该是营卫皆伤,故在桂枝方中既有辛甘化阳的药也有酸甘化阴的药,化阳药助卫阳以祛除风邪,化阴药以补营阴)</font></p>
<p><font color="green"> 在桂枝方中,养营阴的力度大于发汗的力度(也就是助卫阳的力度),或许是因为中风症伤阴大于伤阳,故养正大于发汗</font></p>
<p><font color="red">桂枝汤:养正力大,发汗力弱,驱邪而不伤正,养营血而不留邪.在外解肌和营卫,在内化气调阴阳</font></p>
</blockquote>
<blockquote>
<p>桂枝汤中既有辛甘化阳的药,又有酸甘化阴的药,所以桂枝汤有调和阴阳之功.</p>
<p>辛甘化阳:桂枝,干姜 =&gt; 助卫阳,祛风散寒</p>
<p>酸甘化阴:芍药,大枣=&gt;养营阴,敛汗液</p>
<p>甘草起调和作用</p>
</blockquote>
<blockquote>
<p>服已须臾,啜热稀粥一升余,以助药力: 药后服粥有两重原因:1. 太阳中风营阴被伤,服粥以补营阴 2. 桂枝汤方养正力大,发汗力弱,服热粥助胃阳,以鼓舞卫阳,使卫阳能够抗邪于表,加强发汗力量(卫出下焦,卫出中焦,卫出上焦,这里实际上是让卫阳补充于中焦)</p>
<p>温覆令一时许,遍身漐漐,微似有汗者宜佳,不可令如水琉璃,病必不除:加盖衣被保温发汗,遍身微似有汗为佳,切忌大汗淋漓.因为汗多伤正,正气被伤,邪反不去,病必不除.</p>
<p>停后服,不必尽剂:若见汗出病愈,就当停服.因为汗出过多反而伤正.</p>
<p>若不汗更服依前法.又不汗,后服小促其间,半日许,令三服尽:<strong>太阳病的关键在于汗法</strong>,如一服无汗,继而后服,半日内将三服药服完</p>
</blockquote>
<h2 id="桂枝汤适应症">桂枝汤适应症</h2>
<h3 id="太阳病见汗出">太阳病见汗出</h3>
<p>太阳病,头痛,发热,汗出,恶风,桂枝汤主之(13)</p>
<blockquote>
<p><strong>汗出则用桂枝汤</strong></p>
</blockquote>
<h3 id="太阳病兼轻度里虚者">太阳病兼轻度里虚者</h3>
<p>太阳病,外证未解,脉浮弱者,当以汗解,宜桂枝汤.(42)</p>
<blockquote>
<p>外证未解,脉浮弱:<strong>表示正气还有能力抗邪于表</strong>,但脉已见弱象,说明里气已经不足.</p>
<p>此时,应该用桂枝汤,而不能用麻黄汤.因为麻黄汤发汗力强,汗出过多伤正,所以宜桂枝汤.</p>
</blockquote>
<h3 id="汗下后太阳表证仍在者">汗下后太阳表证仍在者</h3>
<p>太阳病,下之后,其气上冲者,可与桂枝汤,方用前发.若不上冲着,不得与之.(15)</p>
<blockquote>
<p>太阳病,误用下法,正气尚能抗邪于表(见浮脉),可用桂枝汤.若未见浮脉,<strong>禁用桂枝汤</strong></p>
</blockquote>
<p>太阳病,先发汗不解,而复下之,脉浮者不愈.浮为在外,而反下之,故令不愈.今脉浮,故在外,当须解外则愈,宜桂枝汤(45)</p>
<blockquote>
<p>同上,太阳病误用下法,再用桂枝汤的关键是看是否有浮脉.</p>
</blockquote>
<p>伤寒发汗已解,半日许复烦,脉浮数者,可更发汗,宜桂枝汤.</p>
<blockquote>
<p>半日许复烦是因为余邪未尽,出现<strong>脉浮数</strong>,可用桂枝汤.</p>
<p>注:<strong>这里是在太阳伤寒用麻黄汤已经发汗的情况下</strong></p>
</blockquote>
<blockquote>
<p><strong>汗法或下法,若见浮脉,均可用桂枝汤.</strong></p>
</blockquote>
<h3 id="太阳病兼里实欲先解表者">太阳病兼里实欲先解表者</h3>
<p>太阳病,外证未解,不可下也,下之为逆,欲解外者,宜桂枝汤(44)</p>
<blockquote>
<p><strong>病在表者,理当汗解;病属里实,法当攻下.</strong>表证兼里实,因先遵循<strong>先表后里</strong>的原则.宜桂枝汤.</p>
<p>不能用麻黄汤是因为汗法伤津,更助里热.</p>
</blockquote>
<p>病常自汗出者,此为荣气和,荣气和者,外不谐,以卫气不共荣气谐和故尔.以荣行脉中,卫行脉外.复发其汗,荣卫和则愈,宜桂枝汤.(53)</p>
<p>病人脏无他病,时发热自汗出而不愈者,此卫气不和也.先其时发汗则愈,宜桂枝汤.(54)</p>
<blockquote>
<p>此为荣气和,荣气和者,外不谐,以卫气不共荣气谐和故尔:荣气即营气,这里的&quot;外&quot;指卫气.脏无他病而自汗出为营卫不和所致,这里桂枝汤有调和营卫之功.</p>
<p>先其时发汗:<strong>需在病症发作之前或发作间隙用药</strong></p>
</blockquote>
<h3 id="病重药轻治用针药并用">病重药轻,治用针药并用</h3>
<p>太阳病,初服桂枝汤,反烦不解者,先刺凤池,风府,却与桂枝汤则愈.(24)</p>
<blockquote>
<p>反烦不解者是因为药力不足,不足以祛除病邪,反而激惹邪气,从而导致烦热不解.</p>
</blockquote>
<h3 id="总结">总结</h3>
<p>桂枝汤适应症如下:</p>
<ul>
<li>太阳病见汗出</li>
<li>太阳病见浮弱脉(无论是否误下)</li>
<li>太阳病余邪未尽(若病重,刺风府,大椎,凤池)</li>
<li><strong>太阳伤寒用麻黄汤已经发汗</strong></li>
<li>太阳中风</li>
<li>表证兼里实</li>
<li>营卫不和</li>
</ul>
<h2 id="桂枝汤禁忌证">桂枝汤禁忌证</h2>
<h3 id="太阳伤寒不可用桂枝汤">太阳伤寒不可用桂枝汤</h3>
<p>桂枝本为解肌,若其人脉浮紧,发热汗不出者,不可与之也.常须识此,勿令误也.(16下)</p>
<blockquote>
<p>脉浮紧和不汗出表示太阳伤寒,太阳伤寒理应用纯辛温麻黄汤解表.由于<strong>芍药有敛汗的作用</strong>,导致寒邪闭表更加严重.</p>
</blockquote>
<blockquote>
<p><font color="green">我的理解这里用桂枝汤和麻黄的关键在于发汗与否,若用桂枝汤能够发汗(可另加上一些外界刺激,比如运动,捂被子),就不会出太大问题.</font></p>
<p><font color="green">此外,如张仲景所说,对于虚弱或者身体素弱的病人,最好用桂枝汤(在能够发汗的情况下)</font></p>
</blockquote>
<h3 id="湿热内盛不可用桂枝汤">湿热内盛不可用桂枝汤</h3>
<p>若酒客病,不可与桂枝汤,得知则呕,以酒客病不喜甘故也.(17)</p>
<blockquote>
<p>嗜酒之人,多湿热内盛,阻遏营卫气血,而见<strong>烦热,多汗,周身酸楚,头痛</strong>类似中风症的症状(<strong>无恶寒</strong>).桂枝汤本为辛甘之剂,辛甘助热,酸甘助湿,这就导致湿热壅滞更加严重,导致胃气上逆.凡<strong>湿热内盛不可用桂枝汤</strong></p>
<p>对于<strong>酒客病有人建议去芍药和大枣,另加醒酒药(例如葛花,枳椇子)</strong></p>
</blockquote>
<h3 id="毒热壅盛禁用桂枝汤">毒热壅盛禁用桂枝汤</h3>
<p>凡服桂枝汤吐者,其后必吐脓血也.(19)</p>
<blockquote>
<p>病人能吐脓血,必是原有内痈.原有内痈,其人素体热毒壅盛,因此可见发热,多汗,身痛等类似太阳中风的症状.若误用桂枝汤,则辛甘助热,发汗伤津,必然导致病情恶化.</p>
</blockquote>
<h3 id="总结-1">总结</h3>
<p>桂枝汤禁忌症如下:</p>
<ul>
<li>太阳伤寒,寒邪闭表</li>
<li>有湿热或毒热者(<strong>桂枝下咽,阳盛则毙,承气入胃,阴盛以亡</strong>)</li>
</ul>
<h2 id="桂枝汤变方">桂枝汤变方</h2>
<h3 id="桂枝加葛根汤">桂枝加葛根汤</h3>
<p>太阳病,项背强几几,反汗出恶风者,桂枝加葛根汤主之.(14)</p>
<p>葛根四两 桂枝二两(去皮) 芍药二两 生姜三两(切) 甘草二两(灸) 大枣十二枚(擘)</p>
<p>右七味（口父）咀，以水一斗，先煮麻黄葛根，减二升，去沫，内诸药，煮取三升，去滓，温服一升，复取微似汗，不须啜粥，余如桂枝法将息及禁忌.(臣亿等谨按,仲景本论,太阳中风自汗出用桂枝,伤寒无汗用麻黄,今证云汗出恶风,而方中有麻黄,恐非本意也.第三卷有葛根汤证,云无汗恶风,正与此方同,是合用麻黄也.此云桂枝加葛根汤,恐是桂枝中但加葛根耳)</p>
<blockquote>
<p>项强连及背部,加葛根.</p>
<p>加葛根的治法为:解肌祛风,生津舒津</p>
<p>加葛根原因有三:1. 升阳发表,助桂枝汤发表解肌. 2. 疏通经脉 3.<strong>升津液,起阴气</strong>,鼓舞阳明津液的布达,滋津润燥,缓解经脉的痉挛.<font color="blue">(为何是阳明经)</font></p>
</blockquote>
<blockquote>
<p><strong>衍生方:</strong></p>
<p>灸甘草 6-10克,桂枝10克,白芍30克,威灵仙10克,秦艽10克,鸡血藤30克,葛根20-30克</p>
<p><strong>治颈肩肌肉痉挛</strong></p>
</blockquote>
<h3 id="桂枝加厚朴杏子汤">桂枝加厚朴杏子汤</h3>
<p>太阳病，下之微喘者，表未解故也，桂枝加厚朴杏子汤主之。（43）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 芍药三两 大枣十二枚（擘） 厚朴二两（灸，去皮） 杏仁五十枚（去皮尖）</p>
<p>上七味，以水七升，微火煮取三升，去滓，温服一升，覆取微似汗。</p>
<p>喘家作桂枝汤，加厚朴，杏子佳。（18）</p>
<blockquote>
<p>太阳表证,误下伤里气,表邪乘虚内陷而成表证兼喘.用桂枝加厚朴杏子汤.</p>
</blockquote>
<blockquote>
<p>太阳病误下总结:</p>
<ol style="list-style-type: decimal">
<li>太阳病误下后,其气上冲者,桂枝汤</li>
<li>太阳病误下后,微喘者,桂枝加厚朴杏子汤</li>
</ol>
</blockquote>
<h3 id="桂枝加附子汤">桂枝加附子汤</h3>
<p>太阳病，发汗，遂漏不止，其人恶风，小便难，四肢微急，难以屈伸者，桂枝加附子汤主之．(20)</p>
<p>桂枝三两(去皮) 　芍药三两　甘草三两（灸）生姜三两（切）　大枣十二枚（擘）　附子一枚（炮，去皮，破八片）</p>
<p>上六味，以水七升，煮取三升，去滓，温服一升．本云，桂枝汤，今加附子，将息如前法．</p>
<blockquote>
<p>太阳中风出汗太多导致阴阳两伤<strong>（汗生于阴而出于阳）</strong>。</p>
<p>小便难：1.是因为阳气被伤，膀胱气化无力（膀胱者，州都之官，气化则能出）2是因为汗出伤阴，津液亏少，化源不足。</p>
<p>四肢微急：四肢微急也有两方面原因：1.阳虚导致四肢经脉失温 2. 阴液被伤，四肢筋脉失去阴液濡养。</p>
</blockquote>
<blockquote>
<p>本证阴阳两虚，张仲景采用固阳以摄阴的方式。（津伤而阳不亡者，其津自能再生，阳亡而津不伤者，其津亦无后继）</p>
</blockquote>
<h3 id="桂枝去芍药汤证">桂枝去芍药汤证</h3>
<p>太阳病，下之后，脉促胸满者，桂枝去芍药汤主之。（21）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 大枣十二枚（擘）</p>
<p>上四味，以水七升，煮取三升，去滓，温服一升。本云，桂枝汤今去芍药。将息如前法。</p>
<blockquote>
<p>太阳病，误下后，胸闷者，这是因为心胸阳气不振，邪陷胸中，当是<strong>脉搏急促无力</strong>，这是心中阳气不足，但尚能与邪抗争而出现的虚性代偿现象。</p>
<p>在桂枝汤中，芍药有敛汗的作用，此时在表已经没有自汗出的症状。此外，芍药有收敛之性，用芍药有碍于宣通胸中阳气。<strong>张仲景凡见胸满者不用芍药</strong></p>
</blockquote>
<h3 id="桂枝去芍药加附子汤证">桂枝去芍药加附子汤证</h3>
<p>若微寒，桂枝去芍药加附子汤主之。（22）</p>
<p>桂枝三两（去皮） 甘草二两（灸） 生姜三两（切） 大枣十二枚（擘） 附子一枚（炮，去皮，破八片）</p>
<p>上五味，以水七升，煮取三升，去滓，温服一升。本云，桂枝汤今去芍药加附子。将息如前法。</p>
<blockquote>
<p>若见微寒，应兼补肾阳，加附子。</p>
</blockquote>
<h3 id="桂枝新加汤证">桂枝新加汤证</h3>
<p>发汗后，身疼痛，脉沉迟者，桂枝加芍药生姜各一两，人参三两，新加汤主之。（62）</p>
<p>桂枝三两（去皮） 芍药四两 甘草二两（灸） 人参三两 大枣十二枚（擘） 生姜四两</p>
<p>上六位，以水一斗二升，煮取三升，去滓，温服一升。本云，桂枝汤，今加芍药、生姜、人参。</p>
<blockquote>
<p>发汗后，汗出过多，营血被伤，肌肤失养，而出现身疼痛。</p>
<p><strong>这里的沉迟脉主营血不足，并非里阳虚</strong></p>
</blockquote>
<h2 id="总结-2">总结</h2>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210506112854.png">

</div>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
        <tag>太阳病</tag>
      </tags>
  </entry>
  <entry>
    <title>HMM总结</title>
    <url>/posts/6d15840a.html/</url>
    <content><![CDATA[<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210324172511.jpg">

</div>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>U-Net总结</title>
    <url>/posts/37a338a6.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li><a href="#网络架构">U-Net的大体结构如何</a></li>
<li><a href="#网络架构">U-Net用哪几层从下采样向上采样复制</a></li>
<li><a href="#整体loss">U-Net的整体Loss是怎样的</a></li>
<li><a href="#权重参数">U-Net的权重如何计算</a></li>
</ul>
<h2 id="概述">概述</h2>
<blockquote>
<p><code>U-Net</code> 网络是一个图像分割的网络，主要用于医学图像的分割。</p>
</blockquote>
<h2 id="网络架构">网络架构</h2>
<p><code>U-Net</code>的结构非常简单，分为下采样和上采样两部分，即先对图像进项下采样，再对结果进行上采样。由于下采样和上采样是对称的，类似于一个U型网络，所以称为<code>U-Net</code>。其网络模型如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210322111509.png">

</div>
<ul>
<li>可以注意到，每进行一次下采样，其通道数<span class="math inline">\(\times 2\)</span>,每一次上采样，其通道数<span class="math inline">\(\div2\)</span>.</li>
<li><strong><code>U-Net</code>的会将下采样的最后两层复制到上采样的最开始两层</strong></li>
<li>所有的<code>Conv</code>层都是采用<code>unpad</code>模式（即不填充模式）</li>
<li>可以注意到，<code>U-Net</code>的输出2通道，是因为文中用了<code>softmax</code>作为分类的结果，由于仅有前景和背景两类，所以<code>softmax</code>的结果数为2，故通道数为2。</li>
</ul>
<h2 id="loss函数">Loss函数</h2>
<h3 id="整体loss">整体loss</h3>
<p><code>U-Net</code>的<code>Loss Function</code>如下所示： <span class="math display">\[
E=\sum_{x\in{\Omega}}w(x)log(p_{\iota(x)}(x))   \tag 1
\]</span> 其中，<span class="math inline">\(\Omega\)</span>表示像素点的集合，即若一张图为<span class="math inline">\(w\times h\times c\)</span>,则<span class="math inline">\(\Omega\)</span>表示<span class="math inline">\(w \times h\)</span>.<span class="math inline">\(x\)</span>则表示每一个像素点（不包含通道）</p>
<p><span class="math inline">\(p_{\iota(x)}\)</span>表示在<span class="math inline">\(x\)</span>位置上的第<span class="math inline">\(\iota(x)\)</span>个通道。由于在<code>U-Net</code>中每一个像素点对应一个<code>softmax</code>输出，所以在模型的输出中，一个通道可以看成是<code>softmax</code>的一个结果，<code>softmax</code>有<span class="math inline">\(n\)</span>个结果就有<span class="math inline">\(n\)</span>个通道。所以<span class="math inline">\(\iota(x)\)</span>表示<span class="math inline">\(x\)</span>位置上对应<code>softmax</code>的第<span class="math inline">\(\iota(x)\)</span>个结果。</p>
<p><span class="math inline">\(w(x)\)</span>表示权重，这使得<code>U-Net</code>更加注重边缘信息，后面会详细阐述。</p>
<p>从上面公式可以看出，<code>U-Net</code>的<code>loss</code>函数并不是一个标准的<code>Cross-Entropy</code>，而是用<span class="math inline">\(w(x)\)</span>代替<span class="math inline">\(p_{\iota(x)}(x)\)</span>,其目的是让模型更加注重边缘信息。原文如下：</p>
<blockquote>
<p>force the network to learn the small separation borders that we introduce between touching cells.</p>
</blockquote>
<h3 id="权重参数">权重参数</h3>
<p>权重公式如下： <span class="math display">\[
w(x)=w_c(x)+ w_0 \times exp(-\frac{(d_1(x)+d_2(x))^2}{2\sigma^2})   \tag 2
\]</span> 其中，<span class="math inline">\(w_c(x)\)</span>为平衡参数。<span class="math inline">\(w_0\)</span>和<span class="math inline">\(\sigma\)</span>为超参数。<span class="math inline">\(d_1(x)\)</span>表示该像素点离最近边缘的距离，<span class="math inline">\(d_2(x)\)</span>表示对次最近边缘的距离。从上式可以看出，如果一个像素点离边缘的越远，<span class="math inline">\(d_1(x)\)</span>和<span class="math inline">\(d_2(x)\)</span>越大，其获得的权重越低。反之，其权重则越高。文中取超参数<span class="math inline">\(w_0=10\)</span>，<span class="math inline">\(\sigma \approx 5\)</span>.</p>
<p>以下是文中权重的一个结果，c图表示边缘，d图表示计算出的边缘权重，可以看出边缘的权重明显高于中间区域。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210322141140.png">

</div>
<h2 id="参考">参考</h2>
<blockquote>
<p><a href="https://arxiv.org/pdf/1505.04597.pdf" target="_blank" rel="noopener">U-Net论文</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>图像分割</tag>
        <tag>语义分割</tag>
      </tags>
  </entry>
  <entry>
    <title>双边滤波</title>
    <url>/posts/7be0ab31.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li><a href="#概述">双边滤波的作用</a></li>
<li><a href="#原理">双边滤波的原理</a></li>
</ul>
<h2 id="概述">概述</h2>
<p>双边滤波是一个非线性滤波器，<strong>他能做到既平滑降噪，又保持边缘信息</strong>，在实际运用中很有用</p>
<h2 id="原理">原理</h2>
<p>考虑高斯滤波，高斯滤波是利用空间域来达到平滑的效果。设在一个以<span class="math inline">\(q\)</span> 为中心的窗口中，某一点<span class="math inline">\(p\)</span>的高斯滤波权重为： <span class="math display">\[
G_{\sigma}(||p - q||) = \frac{1}{2\pi\sigma^2}e^{-\frac{||p-q||^2}{2\sigma^2}}
\]</span> 则当前像素点<span class="math inline">\(q\)</span>的滤波结果可以表示为： <span class="math display">\[
GF(I)_{q}=\sum_{p \in S}{G_{\sigma}{(||p - q||)}I_{q}}
\]</span> 其中，<span class="math inline">\(S\)</span>表示以<span class="math inline">\(q\)</span>为中心的窗口的所有像素点。</p>
<p>而双边滤波不仅考虑空间的位置信息，还考虑颜色上的距离： <span class="math display">\[
BF[I]_q=\frac{1}{W_p}\sum_{p\in{S}}G_{\sigma_s}(||p - q||)G_{\sigma_r}(|I_p-I_q|)I_q
\]</span> 其中，<span class="math inline">\(\frac{1}{W_p}\)</span>为归一化因子，<span class="math inline">\(G_{\sigma_s}(||p-q||)\)</span>表示空间位置上的差距，即普通的高斯滤波核。<span class="math inline">\(G_{\sigma_r}\)</span>表示颜色上的差距，其也是用高斯核，但其输入已经改为两个像素值。</p>
<p>下面考虑两种情况：</p>
<ol style="list-style-type: decimal">
<li>该像素值位于一个区域的中间时</li>
<li>该像素值位于一个区域的边缘时</li>
</ol>
<p>当一个像素值位于区域中间时，由于该区域的颜色颜色相差不大，所以，<span class="math inline">\(|I_p - I_q|\)</span>较小，这导致<span class="math inline">\(G_{\sigma_r}\)</span>较大，甚至接近1，此时核函数就相当于高斯核，起到区域内平滑的效果。</p>
<p>当一个像素点位于区域的边缘时，由于该区域的颜色相差较大，此时，<span class="math inline">\(|I_p-I_q|\)</span>较大，这导致<span class="math inline">\(G_{\sigma_{r}}\)</span>反而较小。这导致了<span class="math inline">\(q\)</span>点的权重较小，通过加权就会产生很明显的“断崖”效果。如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210319102529.png">

</div>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://blog.csdn.net/u013066730/article/details/87859184" target="_blank" rel="noopener">Bilateral Filters（双边滤波算法）原理及实现</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>太阳病辩证纲要</title>
    <url>/posts/dd3c5678.html/</url>
    <content><![CDATA[<h1 id="概说">概说</h1>
<p>太阳经包括<code>足太阳膀胱经</code>以及<code>手太阳小肠经</code>,在<code>&lt;&lt;伤寒论&gt;&gt;</code>中,仅涉及到<code>足太阳膀胱经</code>的病变,而没有<code>手太阳小肠经</code>的病变,所以太阳病是以<code>足太阳膀胱</code>为主线论述.</p>
<p><strong>提示:</strong></p>
<ul>
<li><font color="blue">蓝色</font>表示未理解</li>
<li><font color="red">红色</font>表示重要部分</li>
<li><font color="green">绿色</font>表示我自己的理解</li>
</ul>
<h2 id="问题">问题</h2>
<ul>
<li><a href="#太阳病的病位">太阳病的病位涉及到哪些</a></li>
<li><a href="#足太阳膀胱经">太阳经和哪些脏腑(经络)相连</a></li>
<li><a href="#足太阳膀胱经">太阳经阳气的来源</a></li>
<li><a href="#足太阳膀胱腑">膀胱在什么作用下化生阳气</a></li>
<li><a href="#足太阳膀胱腑">膀胱的阳气通过什么途径向体表输布</a></li>
<li><a href="#足太阳膀胱腑">膀胱腑有什么生理特性</a></li>
<li><a href="＃太阳阳气的生理特征">太阳经阳气的生理特性</a></li>
<li><a href="#太阳阳气主一身之表">太阳主一身之表和卫气有什么区别和联系</a></li>
<li><a href="#太阳阳气主一身之表">卫气的特点是什么</a></li>
<li><a href="#统营卫">外寒伤表是否伤及营气,依据是什么</a></li>
<li><a href="#风寒和温热邪气的区别">风寒和风温分别始于什么经</a></li>
</ul>
<h2 id="太阳病的病位">太阳病的病位</h2>
<p>太阳病涉及到<code>足太阳膀胱经</code>以及<code>足太阳膀胱腑</code>.由于太阳主表,而肺主皮毛,所以外寒邪气伤阳则会伤<code>手太阴肺</code>,所以太阳病病位主要涉及到三个部位:</p>
<ul>
<li>足太阳膀胱经</li>
<li>足太阳膀胱腑</li>
<li>手太阴肺</li>
</ul>
<h2 id="太阳病成因">太阳病成因</h2>
<ul>
<li>外感风寒</li>
</ul>
<p>太阳主一身之表阳,风寒阴邪侵犯人体首先伤表阳,所以先伤太阳经.</p>
<ul>
<li>少阴病外传</li>
</ul>
<p>足太阳膀胱经和足少阴肾经互为表里,当足少阴肾经阳气恢复,阴病出阳,脏邪还腑,邪气外出<strong>膀胱腑</strong></p>
<h2 id="太阳的生理特征">太阳的生理特征</h2>
<h3 id="足太阳膀胱经">足太阳膀胱经</h3>
<ul>
<li>足太阳膀胱经上连风府和督脉相连,下络腰肾和肾相通.由于督脉主一身之阳气,且肾藏元阴元阳,故足太阳膀胱经可借助督脉的阳气和肾中的元阳主一身之表阳.</li>
</ul>
<p>由于人体表面广,所需阳气量大(这样才能防御外邪),所以太阳经所需阳气是三阳中最大的,所以,太阳又称为&quot;巨阳&quot;</p>
<ul>
<li>由于足太阳膀胱经散布于心,所以,太阳病同样可见有关<code>心</code>的症状(心主神明)</li>
</ul>
<h3 id="足太阳膀胱腑">足太阳膀胱腑</h3>
<p>足太阳膀胱的生理特性主要在司气化</p>
<ul>
<li>化生阳气.</li>
</ul>
<p>在肾阳的温煦作用下,化生阳气,并通过<code>膀胱经</code>和<code>三焦</code>向体表输布.<strong>(三焦膀胱者,腠理毫毛其应也)</strong></p>
<ul>
<li><p>参与输液代谢</p></li>
<li><p>排除废水</p>
<p><strong>膀胱者,州都之官,气化则能出</strong></p></li>
<li><p>化生津液</p>
<p>即肾的蒸腾作用</p></li>
</ul>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/%E8%B6%B3%E5%A4%AA%E9%98%B3%E8%86%80%E8%83%B1%E8%85%91.png" style="zoom:50%;"></p>
<h3 id="太阳阳气">太阳阳气</h3>
<p><strong>太阳主表为统营卫</strong></p>
<h4 id="太阳阳气主一身之表">太阳阳气主一身之表</h4>
<blockquote>
<p>肥腠理，司开合，卫外而为固</p>
</blockquote>
<h4 id="统营卫">统营卫</h4>
<p>营行脉中,卫行脉外,营为卫之守,卫为営之使.营卫相将而不相离.由于营卫相关性甚大,所以外邪伤表阳,自然而然也会伤及营气.</p>
<h3 id="太阳阳气生成和输布图">太阳阳气生成和输布图</h3>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/%E5%A4%AA%E9%98%B3%E9%98%B3%E6%B0%94%E7%9A%84%E5%8C%96%E7%94%9F%E5%92%8C%E8%BF%90%E9%80%81.png" style="zoom: 50%;"></p>
<h2 id="杂项">杂项</h2>
<h3 id="风寒和温热邪气的区别">风寒和温热邪气的区别</h3>
<ul>
<li>太阳经主一身之表阳，外感风寒属阴邪而易伤表阳，故风寒外袭始于足太阳</li>
<li>体表的阴液靠肺来宣发，温热邪气为阳邪而易伤阴，故温热邪气外袭始于手太阴(温邪上受,首先犯肺,逆传心包)</li>
</ul>
<h3 id="对太阳经之表阳的一些粗浅理解">对太阳经之表阳的一些粗浅理解</h3>
<ul>
<li>老年人冬天爱蜷卧于床上,因为阳气不足(阳不足则畏寒肢冷).更进一步说,是肾阳不足(肾为元阴元阳之本).</li>
<li>依上条,太阳经的阳气的来源之一是肾中的元阳,若像以上爱蜷卧于床,则表示肾阳不足,导致太阳经阳气不足.如果此人阳气实在素弱,则会导致寒邪直中少阴,导致少阴寒化症,此时病情就相当严重.所以,这种老年人需要时不时补肾阳,至于效果如何,还要取决于中焦的脾胃如何.(据我所知,艾灸对于补阳补气有较好的效果,补肾阳通常灸太溪,复溜,关元和足三里)</li>
<li>从反面看,年轻人身体好则不恶寒,是因为阳气足,能够抵御寒邪.</li>
</ul>
<h1 id="太阳病的分类提纲">太阳病的分类提纲</h1>
<h2 id="问题-1">问题</h2>
<ul>
<li><a href="#太阳病提纲">浮脉的特点</a></li>
<li><a href="#太阳病提纲">寒邪的特点</a></li>
<li><a href="#太阳中风症">风邪的特点</a></li>
<li><a href="#太阳中风症">太阳中风证的特点</a></li>
<li><a href="#太阳中风症">太阳中风症逐条解释</a></li>
<li><a href="#太阳伤寒证">太阳伤寒症逐条解释</a></li>
<li><a href="#太阳病主症区别">太阳主症有哪些区别</a></li>
<li><a href="#温病和风温">温病和风温</a></li>
<li><a href="#温病和风温">为何温病会身重、多眠睡</a></li>
</ul>
<h2 id="太阳病提纲">太阳病提纲</h2>
<ol style="list-style-type: decimal">
<li>太阳之为病，脉浮，头项强痛而恶寒(1)</li>
</ol>
<blockquote>
<ul>
<li>脉浮：外邪袭表，正气抗邪而浮盛于外，此时气血必浮盛于表。（浮脉主表）</li>
</ul>
<p>浮脉的特点：<strong>轻取即得，举之有余，按之少力，如水漂木</strong></p>
<ul>
<li>头项强痛：足太阳经通过颈项上连头部。寒为阴邪，易伤阳气，当寒邪伤表，先伤太阳经。寒主收引，所以太阳会出现经痉挛拘急，所以见颈项强痛。</li>
</ul>
<p>寒邪的特点：<strong>寒为阴邪，易伤阳气。寒主凝滞，寒主收引，寒主痛</strong>（但痛不一定为寒邪所致，痛则不通）。</p>
<ul>
<li>恶寒：卫阳被伤，温煦失司（卫气的特征为：肥腠理，司开合，卫外而为固），所以恶寒</li>
</ul>
<p><strong>以上三个症状同时存在，才可以诊断为太阳表症</strong></p>
</blockquote>
<h2 id="太阳病分类提纲">太阳病分类提纲</h2>
<h3 id="太阳中风症">太阳中风症</h3>
<ol start="2" style="list-style-type: decimal">
<li>太阳病，发热，汗出，恶风，脉缓者，名为中风。(2)</li>
</ol>
<blockquote>
<p>发热：风为阳邪，风邪袭表，风阳伤卫阳，两阳相争，卫阳浮盛于表，见病理性的发热，所以见发热</p>
<p>汗出：汗出有两方面原因：1. 由于卫气的特点是“费腠理，司开合，卫外而为固”，卫阳被伤，卫外失固，故汗出。2. 风邪的特点是<strong>风为阳邪，轻扬开泄，善动不居，易袭阳位</strong>，所以风主疏泄，所以汗出。</p>
<p>恶风：被风邪所伤，所以恶风</p>
<p>脉缓：在太阳的前提下脉浮缓。由于汗出营阴被伤，脉道空虚，所以见脉缓。（浮缓脉主风邪）</p>
<p>太阳中风症的特点为：<strong>风邪袭表，卫强营弱，营卫失和</strong>（我的理解这里的“卫强营弱”并非卫阳强于营阴，这里的“强”应该是病理性的亢奋，否则在<code>桂枝汤</code>中不会用辛甘化阳的药）</p>
</blockquote>
<h3 id="太阳伤寒证">太阳伤寒证</h3>
<ol start="3" style="list-style-type: decimal">
<li>太阳病，或已发热，或未发热，必恶寒，体痛，呕逆，脉阴阳俱紧者，名曰伤寒。(3)</li>
</ol>
<blockquote>
<p>发热或未发热：寒邪袭表卫阳抗邪于表，故见发热。未发热是由于卫阳郁遏，或由于体质素弱，卫阳没有及时达表，所以暂时未见发热。<strong>但最终都会见发热的</strong></p>
<p>必恶寒：寒邪袭表，温煦失司，故恶寒。</p>
<p>体痛：<strong>寒主凝滞，寒主收引，寒主痛</strong>，故见身痛。且由于寒主收引的特性，伤寒也表现为<strong>无汗</strong></p>
<p>呕逆：这是由于<strong>卫阳抗邪于表而不能顾护于里</strong>，同时也可见<strong>食欲不振，下利，不大便等</strong></p>
<p>脉阴阳俱紧：脉寸关尺三部俱浮紧。由于寒主收引，故见紧脉</p>
<p>太阳伤寒的特点为：<strong>寒邪袭表，卫闭营郁</strong></p>
</blockquote>
<blockquote>
<p>卫阳抗邪于表而不能顾护于里的更深一层理解:</p>
<p>感冒后,不能吃过多的食物或者难以消化的食物.因为此时卫气想抗邪于表,而消化过多的食物也需要消耗的胃阳,使得体内的阳气内外不兼顾,会拖长感冒的病程.</p>
<p>从另一方面讲,吃过饱会消耗过多的胃阳,使得<code>正气顾护于里而不能抗邪于表</code>,更易得感冒.</p>
</blockquote>
<h3 id="温病和风温">温病和风温</h3>
<ol start="4" style="list-style-type: decimal">
<li>太阳病，发热而渴，不恶寒者，为温病。若发汗已，身灼热者，名为风温，风温为病，脉阴阳俱浮，自汗出，身重，多眠睡，鼻息必鼾，语言难出。若被下者，小便不利，直视失溲，若被火者，微发黄色，剧则如惊痫，时瘛疭。若火熏之，一逆尚引日，再逆促命期。(6)</li>
</ol>
<blockquote>
<p>该条讲火（热）邪侵犯人体的表现。火邪的特性为：<strong>火为阳邪，其性上炎，耗血伤津，生风动血，易扰心神，易致疮痈</strong>。</p>
<p>由于火为阳邪，易伤阴液，体表的阴液靠肺来宣发，所以温热邪气伤人始于手太阴肺经（<font color="red">温邪上受，首先犯肺,逆传心包</font>）。由于始于手太阴肺经，严格的说，该条不属于太阳病。</p>
</blockquote>
<blockquote>
<p>发热而渴：由于温病为火邪，火邪耗血伤津 ，故发热而渴。</p>
<p>不恶寒：温邪主要伤体表的津液而不会伤体表的阳气，所以不恶寒。</p>
<p>所以<strong>发热而渴，不恶寒是温病的基本特征</strong></p>
<p>脉阴阳俱浮：<strong>这里的浮脉并非主表，而主邪热</strong>。由于邪热鼓动气血，气血涌盛，血脉贲张，所以寸关尺三部均见浮数之象。但和主表的浮脉不同的是：主表的浮脉是<code>轻取即得，重按少力</code>，而主热的浮脉是<code>轻取即得，重按滑数有力</code>（因为有热症就会有数脉出现，其实不难鉴别）</p>
<p>自汗出：热邪逼迫津液外越（和<code>迫血旺行</code>一个道理）</p>
<p>身重，多眠睡：1. 由于<code>少火生气，壮火食气</code>，故见身倦体重。2. 由于<font color="blue">热邪壅滞经脉，经脉气机不利</font>，也可引起身倦体重。</p>
<p>鼻息必鼾：1. 由于<strong>热邪壅滞气机</strong>，肺主气，故见肺窍不利。2. 由于<code>热为阳邪，其性炎上</code>，肺在上焦，所以热邪侵犯肺。</p>
<p>语言难出：热扰心神，热盛神昏，心主神志，故语言难出。</p>
<p>若被下者：若用下法</p>
<p>小便不利：热邪伤津，故尿少</p>
<p>直视失溲：下法导致肝肾阴津被伤，而肝开窍于目，肝阴被伤而不能上荣于目，故直视；<font color="blue">失溲：热盛神昏，膀胱失约，关门不固所致</font></p>
<p>若被火者，微发黄色：火疗则全身微发黄。本受火邪，误用火疗，以火助热，热伤津，热伤营血，营血被伤，所以营气不布，故见身发黄。</p>
<p>剧则如惊痫，时瘛疭：<font color="blue">水不涵木而动风</font>，热极生风。</p>
<p>若火熏之，一逆尚引日，再逆促命期：如果用火熏法，一次误疗病人尚可延长几日，一而再再而三的误治，则是促进病人死亡。</p>
</blockquote>
<blockquote>
<p><font color="green">温病,若用火疗,则以热助热,大忌</font></p>
</blockquote>
<h3 id="太阳病主症区别">太阳病主症区别</h3>
<ul>
<li>太阳中风：脉浮缓，发热，有汗，恶风（恶寒），头项强痛</li>
<li>太阳伤寒：脉浮紧，发热，无汗，恶寒，体痛，头项强痛</li>
<li>温病：发热而渴，不恶寒者，脉浮（重按滑数有力）</li>
<li>风温：高热，汗出而热不退，脉浮（重按滑数有力）</li>
</ul>
<h1 id="太阳病欲解时">太阳病欲解时</h1>
<p>病有发热恶寒者,发于阳也;无热恶寒者,发于阴也.发于阳,七日愈;发于阴,六日愈.以阳数七,阴数六故也.(7)</p>
<blockquote>
<p>病有发热恶寒者,发于阳也;无热恶寒者,发于阴也: 这里的&quot;阴&quot;和&quot;阳&quot;分别指太阳病中的伤寒以及中风(风为阳邪,寒为阴邪).太阳中风的特点是<code>发热,汗出,恶风,脉缓</code>.所以,发热恶寒者,发于阳也;太阳伤寒的特点是<code>恶寒,体痛,呕逆,脉紧</code>.所以无热恶寒,者,发于阴也.</p>
<p>发于阳,七日愈;发于阴,六日愈.以阳数七,阴数六故也:<strong>在不传其他经的情况下(这个是前提条件)</strong>,太阳中风七日痊愈.太阳伤寒六日愈.<font color="green">(太阳中风,发热汗出,所以营卫皆伤,而太阳伤寒仅是卫闭营郁,营阴并未被伤.故一般而言中风会重于伤寒,故中风的病程会长于伤寒)</font></p>
</blockquote>
<p>太阳病,头痛至七日以上自愈者,以行其经近故也.若欲作再经者,针足阳明,使经不传则愈.(8)</p>
<p>太阳病,欲解时,从巳至未上.(9)</p>
<p>风家,表解而不了了者,十二日愈.(10)</p>
<blockquote>
<p>太阳病,头痛至七日以上自愈者,以行其经近故也:太阳病,头痛至七天以上自愈的,是因为自然病程的结束.<strong>说明太阳病的自然病程是七天</strong></p>
<p>欲作再经:表示太阳本经将进入第二个病程或病传他经(不一定传阳明)</p>
<p>针足阳明,使经不传则愈:针灸阳明经,以截断病程(通常情况下,针灸阳明经中的<strong>足三里穴</strong>)</p>
<p>太阳病,欲解时,从巳至未上:太阳病欲解时是在巳时至未时(即上午的9点只下午3点间)(<font color="green">太阳经为三阳中阳气最盛阳经,其对应的应当在正午前后,因为午时阳气最盛</font>)</p>
<p>风家,表解而不了了者,十二日愈:体质素弱,容易患太阳中风的人,十二日痊愈.(体质素弱者,七天表邪解除后,正气难以完全恢复,需要继续调养五日,五脏正气复原,才可以痊愈)</p>
</blockquote>
<blockquote>
<p>附:六经病欲解时</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/9fd2f66d958837a72d77b52f7456f992.jpg" style="zoom:50%;"></p>
</blockquote>
<h1 id="辨太阳病传经与否">辨太阳病传经与否</h1>
<p>伤寒一日,太阳受之,脉若静,为不传;颇欲吐,若燥烦,脉数急者,为传也.(4)</p>
<p>伤寒二三日,阳明,少阳症不见者,为不传也.(5)</p>
<blockquote>
<p>伤寒一日,太阳受之:外感邪气伤表,则病在太阳(太阳主一身之表而统营卫)</p>
<p>脉若静,为不传:如果脉症相符,则表示不传经(脉浮,头项强痛而恶寒).</p>
<p>颇欲吐:颇欲吐表示很想吐,此时<font color="red">邪传少阳,胆火范胃,胃气上逆</font>.提示邪已经传入少阳</p>
<p>若燥烦:若燥烦表示邪传阳明,此时<font color="red">邪传阳明,里热里实,上扰心神</font></p>
<p>脉数急者,为传也:提示脉已经发生变化(太阳病应当是浮缓脉或浮紧脉),此时表示已经传经.</p>
<p>伤寒二三日,阳明,少阳症不见者,为不传也:伤寒二三日,并没有看见阳明(烦躁)和少阳(胃气上逆)的症状(或已经不是浮脉),则表示并没有传其他经.</p>
</blockquote>
<blockquote>
<p>这表示<strong>传经与否与患病长短没有关系,应该从脉和症上去判断</strong></p>
</blockquote>
<h1 id="参考">参考</h1>
<ul>
<li>郝万山伤寒论讲稿</li>
</ul>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
        <tag>太阳病</tag>
      </tags>
  </entry>
  <entry>
    <title>Faster-RCNN总结</title>
    <url>/posts/dd3c4258.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li><a href="#RCNN">RCNN大体流程</a></li>
<li><a href="#Fast%20RCNN">Fast RCNN大体流程</a></li>
<li><a href="#整体流程">Fast RCNN在RCNN的基础上有哪些优化</a></li>
<li><a href="#整体流程">RPN的整体流程如何</a></li>
<li><a href="#1x1卷积">RPN中有几个1 x1​的卷积</a></li>
<li><a href="#补充：Anchor%20Box">Anchro Box是在哪一步生成的</a></li>
<li><a href="#补充：Anchor%20Box">RPN模型的输出是什么</a></li>
<li><a href="#目标位置生成">如何利用RPN生成Bounding Box,Bounding Box和Anchor Box又是什么关系</a></li>
<li><a href="#训练">RPN如何训练</a></li>
</ul>
<h2 id="概述">概述</h2>
<p>Two Steps的目标检测是由RCNN到Fast RCNN再到Faster RCNN。</p>
<h3 id="rcnn">RCNN</h3>
<p><code>RCNN</code>的大体流程如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201229151231.png">

</div>
<p>上图中，由于<code>RCNN</code>的<code>CNN</code>提取特征部分是对每一个<code>Region Proposal</code>用CNN网络进行特征提取，较为耗时。</p>
<h3 id="fast-rcnn">Fast RCNN</h3>
<p><code>Fast RCNN</code>基本上是在<code>RCNN</code>的后半部分做修改，修改如下：</p>
<ol style="list-style-type: decimal">
<li>用<code>CNN</code>整体图像进行特征提取，并建立<code>Feature Map</code>和原图像的映射关系。这样对于所有的<code>Region Proposal</code>就可以只提取一次</li>
<li>由于在<code>Fast RCNN</code>仅建立<code>Feature Map</code>和原图的映射关系，并没有对每一个<code>Region Proposal</code>做拉伸（在<code>RCNN</code>中被称为<code>warp</code>），所以在Fast RCNN中使用<code>SPP layer</code>，以保证在后续的全连接的输入一致性。即<code>Fast RCNN</code>中的<code>ROI Pooling</code>层</li>
<li>用<code>softmax</code>代替<code>SVM</code>，并且<code>loss</code>采用<code>L1</code>。所以<code>Faster RCNN</code>的输出为两个：<code>Bounding Box</code>的位置信息和<code>Softmax</code>的分类信息</li>
</ol>
<p><code>Fast RCNN</code>的大体流程图如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201229155337.png">

</div>
<p><code>Faster RCNN</code>主要在Two Steps的前半段做文章。发现在<code>Fast RCNN</code>中，最耗时的是<code>Selective Search</code>部分（后半段的经过<code>Fast RCNN</code>的修改已经很快).所以，<code>Faster RCNN</code>主要基于<code>Selective Search</code>做修改，一是为了提高速度（<code>Selective Search用时大约2秒左右</code>）；二是由于有<code>Selective Search</code>组件，<code>Fast RCNN</code>还不完全算是一个end-to-end的模型。</p>
<h2 id="整体流程">整体流程</h2>
<p><code>Faster RCNN</code>的主要用<code>RPN</code>网路来代替<code>Selective Search</code>来给出<code>Region Proposal</code>，大体流程如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201229161129.jpg">

</div>
<p>从上图中可以看到，给出<code>Region Proposal</code>也可以分为两个部分：图像特征提取的<code>Conv层</code>和<code>RPN</code>。通常<code>Conv层</code>都采用成熟的图像模型，论文中是用的<code>VGG16</code>。更详细的整体流程图如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201229162606.png">

</div>
<p><code>Conv层</code>不再阐述，下节主要讲<code>RPN</code>网络</p>
<h2 id="rpn网络">RPN网络</h2>
<p><code>RPN</code>网络的目的是给出<code>Region Proposal</code>。RPN的流程如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210105100025.png">

</div>
<p><code>RPN</code>的大体步骤如下：</p>
<ol style="list-style-type: decimal">
<li><code>Sliding Window</code>层特征提取：利用<code>Sliding Window</code>层进行特征提取（实际上<code>Sliding Window</code>就是一个<span class="math inline">\(3\times3\)</span>的卷积层，<span class="math inline">\(filter\)</span>的个数为256，所以输出的维数是256维）</li>
<li><span class="math inline">\(1 \times 1\)</span>卷积：对1中的结果做<span class="math inline">\(1\times1\)</span>的卷积操作（<span class="math inline">\(1\times1\)</span>的卷积相当于全连接层）</li>
<li><code>RPN</code>输出：对于2中的结果有两个输出：1-目标的坐标输出，2-是否是目标的分数输出。分别为<span class="math inline">\(4k\)</span>个和<span class="math inline">\(2k\)</span>个。其中<span class="math inline">\(k\)</span>表示<code>Anchor Box</code>的个数。</li>
</ol>
<p>由于3中会涉及到<code>Anchor Box</code>，且过程相对复杂，所以第3步的具体过程在下面详述。</p>
<h3 id="x1卷积">1x1卷积</h3>
<p><span class="math inline">\(1 \times 1\)</span>的卷积操作相当于全连接层，但需要注意的是，由于<code>RPN</code>网络有两个输出，<strong>所以<span class="math inline">\(1 \times 1\)</span>的卷积也有两个，分别对应目标的坐标以及目标的分数</strong>。<span class="math inline">\(filter\)</span>的个数分别为<span class="math inline">\(4k\)</span>和<span class="math inline">\(2k\)</span></p>
<h3 id="rpn的输出">RPN的输出</h3>
<p>在介绍<code>RPN</code>之前，不得不提到<code>Anchor Box</code>，这里先补充<code>Anchor Box</code>的知识。</p>
<h4 id="补充anchor-box">补充：Anchor Box</h4>
<blockquote>
<p>我们知道，实际上在<code>Feature Map</code>中的一点对应原图中一个区域（也就是感受野的概念），那么在<code>RPN</code>中的<span class="math inline">\(1 \times 1\)</span>的卷积层之中的一个像素点可以表示原图中的一个区域。对于`<span class="math inline">\(1 \times 1\)</span>卷积层的结果，就可以表示<span class="math inline">\(w \times h\)</span>个原图中的区域（<span class="math inline">\(w \times h\)</span>表示<span class="math inline">\(1 \times 1\)</span>卷积层的结果大小）。</p>
<p>如果有目标存在，则目标必定在这些感受野之中（虽然感受野不一定完全框中）。既然通过感受野不一定框中目标，那么我们可以在感受野的基础上添加形变，多几个框，那么我们框中目标的几率肯定会大大增加（虽然也不一定百分百框中），这便是<code>Anchor Box</code>的由来。<code>Anchor Box</code>如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210106101329.png">

</div>
<p>从上图可以看到，<code>Anchor Box</code>包含三种比例的长宽比，分别为<span class="math inline">\(1:1\)</span>,<span class="math inline">\(1:2\)</span>和<span class="math inline">\(2:1\)</span>，且包含三种不同大小的框，所以一共<span class="math inline">\(9\)</span>种。</p>
<p>例如，我们需要检测一个行人，行人的<code>Ground Truth</code>是一个长的矩形，如果用<code>Anchor Box</code>中<span class="math inline">\(2:1\)</span>的框，此时框中的几率会大大增加。实际上，我们可以看到<code>Anchor Box</code>的三种规格框实际上就是针对不同比例的目标。</p>
</blockquote>
<blockquote>
<p>对于<code>RPN</code>中的两个输出：目标位置和目标分数。这里先介绍目标位置，再介绍目标的分类（也就是分类）</p>
</blockquote>
<p>首先，在经过<span class="math inline">\(1 \times 1\)</span>的卷积后，有一个<span class="math inline">\(w \times h\)</span>长宽的结果，我们通过<code>Anchor Box</code>可以找到在原图中<span class="math inline">\(w \times h \times k\)</span>个框，其中，<span class="math inline">\(k\)</span>表示<code>Anchor Box</code>的个数。</p>
<p>并且，经过<span class="math inline">\(1 \times 1\)</span>的卷积，该层会产生<span class="math inline">\(w \times h \times 4 \times k\)</span>个预测结果（这里的结果算上<span class="math inline">\(Channel\)</span>）。其中<span class="math inline">\(4\)</span>表示位置的四个参数，<span class="math inline">\(k\)</span>表示<code>Anchor Box</code>的个数。<strong>（注意，这个预测结果表示的是<code>Anchor Box</code>和<code>Ground Truth</code>的偏差）</strong></p>
<p>既然在<code>RPN</code>中预测的是两者之间的偏差，那么在训练时对应的标签也应该是两者之间的偏差。下面介绍偏差的生成过程。</p>
<h4 id="目标位置生成">目标位置生成</h4>
<p>我们知道，生成的<code>Anchor Box</code>和<code>Ground Truth</code>是有差距的，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210107104422.jpg">

</div>
<p>图中，红色为<code>Anchor Box</code>的结果，而绿色为<code>Ground Truth</code>的结果。</p>
<p>要想从<code>Anchor Box</code>到<code>Ground Truth</code>，只需要对<code>Anchor Box</code>做平移和拉伸即可，所以在<code>Faster RCNN</code>中，平移和和拉伸作为衡量两者间的差距的指标。</p>
<p>设代表一个<code>Anchor Box</code>的四个参数为<span class="math inline">\(A=(x_a,y_a,w_a,h_a)\)</span>,分别表示其中心点坐标和长宽。其对应的<code>Ground Truth</code>为<span class="math inline">\(GT=(x,y,w,h)\)</span>,则两者间的平移可以表示为(<strong>平移的单位为长或宽的比例</strong>)：</p>
<p><span class="math display">\[
x \approx w_a .t_x + x_a    \tag 1
\]</span></p>
<p><span class="math display">\[
y \approx h_a .t_y + y_a   \tag 2
\]</span></p>
<p>缩放关系可以表示为： <span class="math display">\[
w \approx w_a . exp(t_w)    \tag 3
\]</span></p>
<p><span class="math display">\[
h \approx h_a . exp(t_h)    \tag 4
\]</span></p>
<p>上式中，<span class="math inline">\(d_*(A)\)</span>为需要求的未知数。通过变换可以表示为： <span class="math display">\[
t_x = \frac{x - x_a}{w_a}   \tag    5
\]</span></p>
<p><span class="math display">\[
t_y = \frac{y - y_a}{h_a}   \tag    6
\]</span></p>
<p><span class="math display">\[
t_w=\log{(w/w_a)}       \tag    7
\]</span></p>
<p><span class="math display">\[
t_h=\log{(h/h_a)}       \tag    8
\]</span></p>
<p>同理，设预测的<code>RPN</code>网路预测的结果为<span class="math inline">\((x^{\ast},y^{\ast},w^{\ast},h^{\ast})\)</span>,则预测框和<code>Anchor Box</code>的四个坐标的差距可以表示为： <span class="math display">\[
t_x^{\ast} = \frac{x^{\ast} - x_a}{w_a} \tag    9
\]</span></p>
<p><span class="math display">\[
t_y^{\ast} = \frac{y^{\ast} - y_a}{h_a} \tag    {10}
\]</span></p>
<p><span class="math display">\[
t_w^{\ast}=\log{(w^{\ast}/w_a)}     \tag    {11}
\]</span></p>
<p><span class="math display">\[
t_h^{\ast}=\log{(h^{\ast}/h_a)}     \tag    {12}
\]</span></p>
<p>也就是说，我们<code>RPN</code>网络需要预测的实际上是<span class="math inline">\(t_{\ast}^{\ast}\)</span>(下标的 * 表示<span class="math inline">\(x,y,w,h\)</span>,上标的 * 表示预测框)，也就是<code>Predict Box</code>和<code>Anchor Box</code>的差距。我们也可以通过<code>Ground Truth</code>和<code>Anchor Box</code>计算得到标签，这样神经网络就能够训练了。</p>
<p>总结一下目标位置的过程：</p>
<ol style="list-style-type: decimal">
<li><span class="math inline">\(1 \times 1\)</span>的卷积</li>
<li>生成<code>Anchor Box</code></li>
<li>利用<code>RPN</code>网络得到预测值，也就是生成偏差</li>
<li>再利用这个偏差还原成<code>Bounding Box</code></li>
</ol>
<h4 id="目标分数">目标分数</h4>
<blockquote>
<p>目标分数就是我们所说的<span class="math inline">\(confidence\)</span>,即模型认为是目标的置信度。</p>
</blockquote>
<p>相对于目标位置，目标分数较为简单，下面直接总结这条线的流程：</p>
<ol style="list-style-type: decimal">
<li><span class="math inline">\(1 \times 1\)</span>的卷积</li>
<li>利用<span class="math inline">\(softmax\)</span>分类（注意这里论文中是用的<span class="math inline">\(softmax\)</span>，所以分数的结果有<span class="math inline">\(w \times h \times 2 \times k\)</span>个）</li>
</ol>
<h3 id="loss-function">Loss Function</h3>
<p>了解了<code>RPN</code>的流程，我们再来看看RPN的<code>loss Function</code>，<code>RPN</code>中一个 <code>Mini Batch</code> 的<span class="math inline">\(loss\)</span>如下所示： <span class="math display">\[
loss(p_i,G_i)=\frac{1}{N_{cls}}\sum_{i}L_{cls}(p_i,p_i^{\ast})+ \lambda \frac{1}{N_{reg}}\sum_ip_i^{\ast}L_{reg}(t_i,t_i^{\ast})    \tag    {13}
\]</span> 上式(13)中,可以看到前半部分为分类的<span class="math inline">\(loss\)</span>,即普通的<code>cross Entropy</code>，<span class="math inline">\(p_i\)</span>表示预测是目标的概率，而<span class="math inline">\(p_i^{\ast}\)</span>表示的是label，当有目标时为1，无目标时为0。</p>
<p>而后半部分为位置的<span class="math inline">\(loss\)</span>，其中<span class="math inline">\(L_{reg}\)</span>为<code>smooth L1 loss​</code>。有： <span class="math display">\[
L_{reg}(t_i,t_i^{\ast})=\sum_{i\in\{x,y,p,t\}}smooth_{L1}(ti-t_i^{\ast})
\]</span> 其中：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"> <mi>s</mi> <mi>m</mi> <mi>o</mi> <mi>o</mi> <mi>t</mi> <msub> <mi>h</mi> <mrow class="MJX-TeXAtom-ORD"> <mi>L</mi> <mn>1</mn> </mrow> </msub> <mo stretchy="false">(</mo> <mi>x</mi> <mo stretchy="false">)</mo> <mo>=</mo> <mrow> <mo>{</mo> <mtable columnalign="left left" rowspacing=".2em" columnspacing="1em" displaystyle="false"> <mtr> <mtd> <mn>0.5</mn> <msup> <mi>x</mi> <mn>2</mn> </msup> </mtd> <mtd> <mrow> <mtext>if </mtext> <mrow class="MJX-TeXAtom-ORD"> <mrow class="MJX-TeXAtom-ORD"> <mo stretchy="false">|</mo> </mrow> <mi>x</mi> <mrow class="MJX-TeXAtom-ORD"> <mo stretchy="false">|</mo> </mrow> <mo>&lt;</mo> <mn>1</mn> </mrow> </mrow> </mtd> </mtr> <mtr> <mtd> <mrow class="MJX-TeXAtom-ORD"> <mo stretchy="false">|</mo> </mrow> <mi>x</mi> <mrow class="MJX-TeXAtom-ORD"> <mo stretchy="false">|</mo> </mrow> <mo>−<!-- − --></mo> <mn>0.5</mn> </mtd> <mtd> <mtext>otherwise</mtext> </mtd> </mtr> </mtable> <mo fence="true" stretchy="true" symmetric="true"></mo> </mrow> </math></p>
<!--
$$
smooth_{L1}(x)=\begin{cases}
0.5x^2 & \text{if $ |x|<1 $}\\
|x|-0.5 & \text{otherwise}
\end{cases}
$$
-->
<p><span class="math inline">\(\lambda\)</span>平衡是用于两者差的一个参数，为10</p>
<h3 id="训练">训练</h3>
<p>在训练时，不会将所有的生成的<code>Anchor Box</code>拿去训练，在生成的<code>Anchor Box</code>中，首先会筛选<code>Anchor</code>与<code>GT</code>的<span class="math inline">\(IOU&gt;0.7\)</span>的作为正样本，<code>Anchor</code>与<code>GT</code>的<span class="math inline">\(IOU&lt;0.3\)</span>作为负样本，其他的不要。</p>
<p>其次，为了保证样本的平衡性，在上述步骤生成的正负样本中个各选择128个送进网络中进行训练。</p>
<h2 id="整体训练">整体训练</h2>
<p>在<code>Faster RCNN</code>中，分为训练<code>RPN</code>和<code>Fast RCNN</code>两部分。步骤如下：</p>
<ol style="list-style-type: decimal">
<li>训练<code>RPN</code>网络（这是训练<code>RPN</code>的第一轮）</li>
<li>利用训练好的<code>RPN</code>网络收集<code>Region Proposals</code></li>
<li>利用2中的<code>Region Proposal</code>训练<code>Fast RCNN</code>(训练<code>Fast RCNN</code>的第一轮)</li>
<li>训练<code>RPN</code>网络（这是训练<code>RPN</code>的第二轮）</li>
<li>利用训练好的<code>RPN</code>网络收集<code>Region Proposals</code></li>
<li>利用2中的<code>Region Proposal</code>训练<code>Fast RCNN</code>(训练<code>Fast RCNN</code>的第二轮)</li>
</ol>
<h2 id="思考">思考</h2>
<h3 id="对anchor-box使用的疑惑">对Anchor Box使用的疑惑</h3>
<p>在<code>Anchor Box</code>中，让我疑惑的是，为何不直接让<code>Predict Box</code>和<code>Ground Truth</code>的偏差做回归，在中间又夹一个<code>Anchor Box</code>。论文中中的解释是由于在<code>R-CNN</code>和<code>Fast RCNN</code>中用了<code>ROI-Pooling</code>,由于<code>ROI-Pooling</code>的缘故可以武断的用共享权值（[1] 和[2]分别表示<code>SPP Net</code>和<code>Fast RCNN</code>两个模型的论文）</p>
<blockquote>
<p>In [1],[2], bounding-box regression is performed on features pooled from arbitrarily sized RoIs, and the regression weights are shared by all region sizes.</p>
</blockquote>
<p>但由于在<code>RPN</code>中仅是用<span class="math inline">\(3 \times 3\)</span>的卷积形成<code>Feature Map</code>,而目标的大小和位置多变的（没有用<code>ROI Pooling</code>），所以这里用了<span class="math inline">\(k\)</span>个不共享权值的回归器，并且这<span class="math inline">\(k\)</span>个回归器不共享权值。（<span class="math inline">\(k\)</span>个预测可能，答对的可能性也大一些）</p>
<blockquote>
<p>In our formulation, the features used for regression are of the same spatial size (3 × 3) on the feature maps. To account for varying sizes, a set of k bounding-box regressors are learned. Each regressor is responsible for one scale and one aspect ratio, and the k regressors do not share weights. As such, it is still possible to predict boxes of various sizes even though the features are of a fixed size/scale, thanks to the design of anchors.</p>
</blockquote>
<p>但文中并没有解释为何引入<code>Anchor Box</code>能够让<code>Predict Box</code>准确的预测出<code>Ground Truth</code>，相较于<code>Predict Box</code>和<code>Ground Truth</code>直接回归的优势是什么。对于以上的<span class="math inline">\(k\)</span>，完全可以训练<code>Predict Box</code>和<code>Ground Truth</code>的<span class="math inline">\(k\)</span>个回归器，能够达到同样的效果</p>
<p>对于以上，我的理解是<span class="math inline">\(3 \times 3\)</span>形成的感受野，在原图中对应的区域是有局限性的，一旦目标目标超出这个感受野，则效果不佳。所以引入了<code>Anchor Box</code>,</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/Terrypython/p/10584384.html" target="_blank" rel="noopener">RPN(区域生成网络)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/31426458" target="_blank" rel="noopener">一文读懂Faster RCNN</a></li>
<li><a href="https://blog.csdn.net/qq_30815237/article/details/93596163" target="_blank" rel="noopener">RPN网络</a></li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>神经网络</tag>
        <tag>目标检测</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>图像分割（一）：基于边缘突变的分割</title>
    <url>/posts/d2113c07.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li><a href="#一阶差分和二阶差分衡量边缘突变比较">一阶差分和二阶差分求边缘各有什么优缺点</a></li>
<li><a href="#边缘模型">在边缘检测前一般要做什么</a></li>
<li><a href="#基本的检测模型">Prewitt算子的解释</a></li>
<li><a href="#基本的检测模型">Sobel算子相比于Prewitt算子的优势是什么</a></li>
</ul>
<h2 id="梯度和差分基础">梯度和差分基础</h2>
<p>基于边缘突变的分割思想十分简单，如果一个像素点在分割的边缘上，那么，该像素点在某个方向上必定是突变的（这个方向不仅限于<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>）。鉴于以上思想，基于边缘的分割可以分割点、线甚至边缘。</p>
<p>衡量某个像素在某个方向上是否是突变的，我们最容易想到的是梯度，梯度向量的方向表示变换最大的方向，而梯度的幅值表示变换的大小。</p>
<p>图像在<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>两个方向上的梯度即为差分，可以表示为： <span class="math display">\[
\frac{\partial{f}}{\partial{x}}=f&#39;(x)=f(x+1)-f(x)   \tag{1}
\]</span></p>
<p><span class="math display">\[
\frac{\partial{f}}{\partial{y}}=f&#39;(y)=f(y+1)-f(y)   \tag{2}
\]</span></p>
<p>图像在<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>上的二阶差分为（二阶差分同样可以衡量突变）： <span class="math display">\[
\frac{\partial^2{f}}{\partial{x^2}}=f&#39;(x+1) - f&#39;(x)=f(x+2)-2f(x+1)+f(x) \tag{3}
\]</span></p>
<p><span class="math display">\[
\frac{\partial^2{f}}{\partial{y^2}}=f&#39;(y+1) - f&#39;(y)=f(y+2)-2f(y+1)+f(y) \tag{4}
\]</span></p>
<h2 id="一阶差分和二阶差分衡量边缘突变比较">一阶差分和二阶差分衡量边缘突变比较</h2>
<p>设有图像在<span class="math inline">\(x\)</span>方向如下图表所示，则其一阶导数和二阶导数的结果如下：</p>
<table>
<thead>
<tr class="header">
<th>编号</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
<th>12</th>
<th>13</th>
<th>14</th>
<th>15</th>
<th>16</th>
<th>17</th>
<th>18</th>
<th>19</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>原始数据</td>
<td>5</td>
<td>5</td>
<td>4</td>
<td>3</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>3</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>一阶差分</td>
<td></td>
<td>0</td>
<td>-1</td>
<td>-1</td>
<td>-1</td>
<td>-1</td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>-6</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>-2</td>
<td>-1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td>二阶差分</td>
<td></td>
<td></td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>6</td>
<td>-12</td>
<td>6</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>-4</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>其对应的图像如下：</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/图像差分.png" style="zoom:80%;"></p>
<p>通过观察以上图像可以得出以下几点特性：</p>
<ul>
<li>二阶导数对平缓的像素变化不敏感（例如编号从1到6的像素，一阶差分为-1，而二阶差分为0）</li>
<li>二阶导数在斜坡的开始处和结束处均不为0，而一阶导数仅有开始处不为0</li>
<li>二阶导数在斜坡的开始处和结束处的符号相反，这表示二阶导对光线从暗到亮和从亮到暗比较敏感，而一阶导数无此性质</li>
</ul>
<p>由此可以得出以下结论：</p>
<blockquote>
<ul>
<li>对于缓慢变化的边缘，一阶导（差分）更敏感</li>
<li>对于突变的边缘，二阶导更敏感，且二阶导可以分辨光线的明亮变化</li>
</ul>
</blockquote>
<h2 id="孤立点检测">孤立点检测</h2>
<p>通常孤立点同时在两个方向上变化均比较剧烈，所以根据前文所述，二阶差分对于突变更加敏感，所以二阶差分更适合孤立点检测。</p>
<p>所以，这里会用到拉普拉斯算子（拉普拉斯算子即是二阶差分在图像中一种应用）.</p>
<blockquote>
<p><strong>补充：拉普拉斯算子</strong></p>
<p>拉普拉斯算子定义为： <span class="math display">\[
\nabla^2f(x,y)=\frac{\partial^2f}{\partial{x^2}} + \frac{\partial^2f}{\partial{y^2}}   \tag{5}
\]</span> 也就是说，拉普拉斯算子为<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>两个方向上的二阶差分之和，也即<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>的变化程度之和。</p>
<p>由前面的二阶差分展开公式，可得拉普拉斯算子为： <span class="math display">\[
\nabla^2f(x,y)=f(x+1,y)+f(x-1,y)+f(x,y+1)+f(x,y-1)-4f(x,y)
\]</span> 实际上，拉普拉斯算子就是一个滤波器，上式的滤波模板可表示为：</p>
<table>
<thead>
<tr class="header">
<th>0</th>
<th>1</th>
<th>0</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>-4</td>
<td>1</td>
</tr>
<tr class="even">
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>但上式实际上仅考虑了<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>的两个方向上的变化，对于正反<span class="math inline">\(45^.\)</span>的变化并未考虑，所以，通常情况下，会加上45度角的检测，此时的拉普拉斯算子的滤波模板为：</p>
<table>
<thead>
<tr class="header">
<th>1</th>
<th>1</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>-8</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>以上模板即检测四个方向变化的模板。</p>
</blockquote>
<p>用以上模板对图像进行滤波，设滤波后的某一个点的结果为<span class="math inline">\(R(x,y)\)</span>，若：</p>
<p><span class="math display">\[
g(x,y)=\begin{cases} 1,&amp;\text{ |R(x,y)|} \geq T \\ 0,  &amp;\text{other} \end{cases}    \tag{6}
\]</span> 在结果<span class="math inline">\(g(x,y)\)</span>中，为1的点即为孤立点。</p>
<h3 id="demo">Demo</h3>
<p>下面是孤立点检测的Demo。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/孤立点检测.png">

</div>
<p>上图中，图一为原图片，图二为通过拉普拉斯变换后的结果，图三为通过阈值筛选后的结果，阈值取百分之99的分位数。</p>
<h2 id="线检测">线检测</h2>
<p>对于线的检测，同样用拉普拉斯变换，但前文提到，由于拉普拉斯的检测结果有<code>双边性</code>,也就是说检测的结果有两个边缘，此时需要保留其中一个边缘，另一个略去。如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/线检测.png">

</div>
<p>上图中，图一是原始图像，图二是经过拉普拉斯模板过滤后的图像，图三是图二取绝对值的结果，图四为取图二取正值的结果。</p>
<h2 id="基本的检测模型">基本的检测模型</h2>
<p><strong>由于一阶导数和二阶导数对噪声都较为敏感，所以通常情况下，在进行边缘检测之前要滤波处理</strong></p>
<p>实际上，由上面可知，一阶导数和二阶导数实现边缘检测，但又各有优势和劣势，所以对于检测一个物体的边缘，一阶导和二阶导都是可以的。这里先介绍一阶导。介绍一阶导的边缘提取通常需要用<code>Sobel</code>算子。</p>
<blockquote>
<p><strong>补充：Sobel算子以及Prewitt算子</strong></p>
<p>如公式（1）和公式（2），要用一阶导的模板过滤图像仅用两个窗格即可：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/一阶导边缘梯度模板.png">

</div>
<p>但以上模板对于中心点对称的边缘计算不是很有用。所以一阶的模板通常也采用<span class="math inline">\(3\times3\)</span>的模板，<span class="math inline">\(3\times3\)</span>的模板定义如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/3X3模板.png">

</div>
<p><span class="math inline">\(3\times3\)</span>的模板满足中心对称，以下是<code>Prewitt</code>算子：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/prewitt模板.png">

</div>
<p>其中，左上图表示<span class="math inline">\(y\)</span>方向上的检测，右上图表示<span class="math inline">\(x\)</span>方向上的检测。从检测算子中可以看出，实际上<code>Prewitt</code>算子并非计算两个相邻像素之间的差分，而是跳过一行（列）来计算差分，以此来保证中心对称性。其公式表示为： <span class="math display">\[
g_x=\frac{\partial{f}}{\partial{x}}=(z_7+z_8+z_9)-(z_1+z_2+z_3)   \tag{7}
\]</span></p>
<p><span class="math display">\[
g_y=\frac{\partial{f}}{\partial{y}}=(z_3+z_6+z_9)-(z_1+z_4+z_7)   \tag{8}
\]</span></p>
<p>此外，就是<code>Sobel</code>算子，<code>Sobel</code>是在<code>Prewitt</code>算子的基础上进行改进，其模板如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Sobel算子模板.png">

</div>
<p><strong><code>Sobel</code>算子相较于<code>Prewitt</code>算子可以平滑图像，所以通常对于一维的边缘提取，我们用<code>Sobel</code>算子</strong></p>
</blockquote>
<p>从<code>Sobel</code>算子可以看出，实际上<code>Sobel</code>算子仅能检测单个方向的边缘，要想综合两个方向的边缘，最容易想到的是类似于求梯度值的方式，即相加求平方根，求平方根太过费时，书上采用求绝对值再求和的方式： <span class="math display">\[
M(x,y)\approx|g_x|+|g_y|    \tag{9}
\]</span></p>
<h3 id="demo-1">Demo</h3>
<p>以下是通过<code>Sobel</code>进行边缘检测的Demo：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201104162047.png">

</div>
<p>上图中，图一为原图像，图二为<span class="math inline">\(x\)</span>方向的梯度的绝对值，图三为<span class="math inline">\(y\)</span>方向上的梯度的绝对值，图四为两个方向绝对值之和。</p>
<p><strong>通常情况下，在进行边缘检测之前需要对图像进行平滑处理，以减少噪声对边缘检测的影响</strong>。下图是先用均值滤波对原图像进行处理，再用<code>Sobel</code>进行边缘检测的结果。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20201104162051.png">

</div>
<p>可以看到，在经过平滑处理后的结果明显好于没有平滑处理的。</p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>区域的表示和描述</title>
    <url>/posts/d4747641.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>边界追踪的目的</li>
<li>表示和描述一般用在图像处理的什么地方</li>
<li>Moore边界追踪的大体流程</li>
<li>链码的主体思想</li>
<li>标记图的作用</li>
<li>标记图的主体思想</li>
<li>标记图如何解决旋转不变性</li>
<li>标记图解决缩放有哪两种方式，分别是什么，各自的优缺点是什么</li>
<li>形状数的目的</li>
<li>致密度如何计算</li>
<li>圆度率如何计算</li>
<li>何为区域的拓扑特性</li>
<li>拓扑特性有些什么，如何计算</li>
</ul>
<h1 id="图像区域的表示和描述">图像（区域）的表示和描述</h1>
<p>所有Demo见：https://github.com/qcymkxyc/Image-Process/blob/master/notebooks/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E4%B8%8E%E6%8F%8F%E8%BF%B0.ipynb</p>
<ul>
<li>表示：顾名思义，如何表示这一个区域。需要说明的是，像素仅是表示一个区域 的一种方式。（比如对于一个矩形，可以用另一种表示方式：四条线段）</li>
<li>描述：如何表示该区域的特性，例如纹理，梯度等</li>
</ul>
<p><strong>该流程是在图像分割之后，对分割后的单元（区域）进一步处理的流程</strong></p>
<h2 id="表示">表示</h2>
<h3 id="边界追踪moore边界追踪">边界追踪（Moore边界追踪）</h3>
<p>Moore边界追踪是最基本的像素级的表示方式</p>
<blockquote>
<p>边界追踪的目的是找一个物体（区域）的外边缘，或提取孔洞的外边缘</p>
</blockquote>
<p>Moore边界追踪的步骤如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/边界追踪.png">

</div>
<h3 id="链码">链码</h3>
<p>链码是以线段为单位来表示区域的外边界，相比于边界追踪，其泛化性更好，鲁棒性也更高。</p>
<p>链码又叫<strong>弗雷曼链码</strong></p>
<blockquote>
<p>链码的主旨思想是将多个像素组成的线段根据方向进行分类，这样，一个封闭曲线就由一系列方向化的线段表示。</p>
</blockquote>
<h4 id="详细步骤">详细步骤</h4>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/链码1.png">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/链码2.png">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/链码3.png">

</div>
<h4 id="算法代码实现">算法代码实现</h4>
<p>Freeman链码提取实现的代码较多，见https://github.com/qcymkxyc/Image-Process/blob/master/src/chapter11/freeman_code.py</p>
<h4 id="demo">Demo</h4>
<p><strong>提取原图像：</strong></p>
<p>Demo的任务是给定一个封闭曲线，给出其对应的Freeman链码，原图像如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Freeman原图像.png">

</div>
<p><strong>原图像二值化：</strong></p>
<p>对其进行均值滤波，并用<span class="math inline">\(OTSU\)</span>算法进行二值化后</p>
<p>主要代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp_img = cv2.blur(img,(<span class="number">9</span>,<span class="number">9</span>))</span><br><span class="line">th,tmp_img = cv2.threshold(tmp_img,<span class="number">0</span>,<span class="number">255</span>,cv2.THRESH_BINARY + cv2.THRESH_OTSU)</span><br><span class="line">plt.imshow(tmp_img)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p>二值化后的图像为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Freeman二值化后的图片.png">

</div>
<p><strong>构建Freeman链码</strong></p>
<p>主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">black_img = np.zeros_like(img)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.imshow(cv2.findContours(black_img,contours,1,[255,255,255],2))</span></span><br><span class="line"></span><br><span class="line">tmp_img = cv2.blur(img, (<span class="number">9</span>, <span class="number">9</span>))</span><br><span class="line">th, tmp_img = cv2.threshold(</span><br><span class="line">    tmp_img, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY + cv2.THRESH_OTSU)</span><br><span class="line">image, contours, hierarchy = cv2.findContours(</span><br><span class="line">    tmp_img, cv2.RETR_LIST, cv2.CHAIN_APPROX_NONE)</span><br><span class="line">contour = contours[<span class="number">-1</span>]</span><br><span class="line">contour = np.reshape(contour, (contour.shape[<span class="number">0</span>], contour.shape[<span class="number">-1</span>]))</span><br><span class="line">x = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> contour]</span><br><span class="line">y = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> contour]</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">r = freeman_code.get_freeman_coordination(tmp_img, contour)</span><br><span class="line"></span><br><span class="line">x = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> r]</span><br><span class="line">y = [i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> r]</span><br><span class="line"></span><br><span class="line">plt.plot(x,y)</span><br></pre></td></tr></table></figure>
<p>获取其外边框，且该外边框上的像素点必须是连续的，所以在调用opencv的<span class="math inline">\(findContours\)</span>方法时必须用cv2.CHAIN_APPROX_NONE​,该参数表示提取的边缘是严格8连接的，提取的外边框如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/freeman外边框.png">

</div>
<p>在获取外边框后，对外边框进行Freeman编码，编码的结果为一系列在Freeman网格中的坐标，部分如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">4</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">4</span>, <span class="number">1</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line"> (<span class="number">3</span>, <span class="number">2</span>),</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>
<p>对Freeman坐标进行画图，结果为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Freeman结果.png">

</div>
<h3 id="标记图">标记图</h3>
<blockquote>
<p>标记图可用来识别不同形状的闭合区域。例如可用来识别矩形和三角形</p>
</blockquote>
<h4 id="主要过程">主要过程</h4>
<p>标记图较为简单，主要分为两步：</p>
<ul>
<li>找到该区域的质心（质心等于该区域所有的点的平均）</li>
<li>计算质心到每一个边界点的距离以及角度（即以质心为圆心旋转<span class="math inline">\(360^\circ\)</span>查看该质心到边界的距离）</li>
</ul>
<p>最终会形成一个<strong>标记图</strong>，如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/标记图.png">

</div>
<p>如果该区域是一个四边形，会出现四个波峰；如果是三角形，则会出现三个波峰，由此我们可以判定该区域的形状。</p>
<h4 id="标记图旋转不变性">标记图旋转不变性</h4>
<p>在标记图中解决旋转不变性较为容易，即选择离质心最远的点作为起始点，那么反应到标记图中则是起始点为最高的波峰。</p>
<h4 id="标记图缩放解决">标记图缩放解决</h4>
<p>书中解决缩放问题有两种方式：</p>
<ol style="list-style-type: decimal">
<li>归一化 <span class="math display">\[
   \frac{距离}{max(距离) - min(距离)}
   \]</span></li>
</ol>
<p><strong>该方式的缺点是对噪声敏感</strong></p>
<ol start="2" style="list-style-type: decimal">
<li>样本/方差 <span class="math display">\[
   \frac{样本}{方差}
   \]</span></li>
</ol>
<p><strong>相比于归一化，该方式更加的稳定</strong></p>
<h3 id="骨架">骨架</h3>
<p>骨架见<a href="http://blog.zhangqi2019.top/posts/311496b5.html/">这篇博客</a></p>
<h2 id="边界描述">边界描述</h2>
<p>边界描述实际上是对区域边缘的描述，这种描述有粗有细，也就是说有泛化的描述也有精确的描述，他们各有各用途。</p>
<ul>
<li>泛化描述：形状数</li>
<li>细致描述：</li>
<li>边界像素个数</li>
<li>统计矩</li>
</ul>
<h3 id="形状数">形状数</h3>
<blockquote>
<p>形状数的目的：保证Freeman链码的旋转不变性</p>
</blockquote>
<p>形状数是在Freeman链码的基础上做两步事情：</p>
<ul>
<li>差分（这里的差分并非数学上的差分）</li>
<li>差分结果排序（这里也非单纯的排序，后面会详细说明）</li>
</ul>
<h2 id="区域描述">区域描述</h2>
<h3 id="偏心率">偏心率</h3>
<ul>
<li>边界的直径：封闭曲线内的最大直径（长轴）</li>
<li>短轴：垂直于长轴的轴</li>
</ul>
<p>长轴和短轴组成可包住区域的边框 <span class="math display">\[
偏心率=\frac{短轴}{长轴}
\]</span></p>
<p><strong>偏心率可以表示为总体形状的描述子</strong></p>
<h3 id="致密度描述子">致密度描述子</h3>
<p>影响致密度的两个因素为：</p>
<ul>
<li>区域的形状</li>
<li>区域是否有孔洞</li>
</ul>
<h4 id="致密度">致密度</h4>
<p>致密度的公式为： <span class="math display">\[
致密度 = \frac{周长^2}{面积}
\]</span></p>
<h4 id="圆度率">圆度率</h4>
<p>圆度率：一个区域的面积与具有相同周长的一个圆（最致密的形状，也就是说没有孔洞）的面积之比。</p>
<p>圆度率<span class="math inline">\(R_c\)</span>可以表示为： <span class="math display">\[
R_c=\frac{4\pi A}{P^2}
\]</span> 其中，<span class="math inline">\(A\)</span>表示区域面积，<span class="math inline">\(P\)</span>表示其对应的周长</p>
<h3 id="拓扑描述子">拓扑描述子</h3>
<p>拓扑特性定义：未受任何变形影响的图形的性质</p>
<p>拓扑描述子包括以下几个：</p>
<ul>
<li>孔洞数</li>
<li>连通分量数</li>
<li>欧拉数。欧拉数=连通分量数-孔洞数</li>
</ul>
<h3 id="纹理描述">纹理描述</h3>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>Demo</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>ELMO、BERT以及GPT</title>
    <url>/posts/3a513c16.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<h3 id="elmo">ELMO</h3>
<ul>
<li>ELMO的主旨思想</li>
<li>ELMO的流程</li>
<li>在多层情况下，ELMO的权值如何确定</li>
<li>在多层情况下，ELMO的最终结果如何得到</li>
</ul>
<h2 id="elmo-1">ELMO</h2>
<h3 id="概述">概述</h3>
<blockquote>
<p>在word2vec中任何一个词对应一个Word Embedding，但同一个词在不同的语境下表示的含义可能是不同的，所以ELMO认为相同的词在不同的语境下有不同的Embedding</p>
</blockquote>
<h3 id="算法流程">算法流程</h3>
<p>ELMO的流程较为简单，总体用一个Bi-Directional RNN来拟合。正向和反向部分结构一样，这里以正向为例。</p>
<blockquote>
<p>正向部分类似于Seq-to-Seq的Encoder，但输出是Many-To-Many的形式，每一个RNN的输出对应一个词的Embedding。</p>
</blockquote>
<p>将正向和反向的Embedding stack到一起即为一层对于一个词的Embedding。如下图所示。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-fa8c31b80704cc40.png">

</div>
<p>但通常情况下会有多层输出，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-de0f3386271083e3.png">

</div>
<p>对于一个词的Embedding取哪一层是一个问题。而ELMO的做法是<strong>都要</strong>，他将两层的结果进行加权，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-a92f25557abd193f.png">

</div>
<p>但权值的确定有两种：</p>
<ul>
<li>要么靠人为设定</li>
<li>要么网络自己学习</li>
</ul>
<p>ELMO选择后者（通常神经网络都会选择让算法自己学习）。</p>
<p>但需要学习，必定要输出才行。所以，ELMO的做法是：<strong>在特定的任务下学习权值。</strong></p>
]]></content>
      <categories>
        <category>自然语言处理</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>自然语言处理</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;&lt;伤寒论&gt;&gt;方歌</title>
    <url>/posts/e9897890.html/</url>
    <content><![CDATA[<h2 id="桂枝汤类方歌二十一首">1．桂枝汤类方歌（二十一首）</h2>
<p>一、桂枝汤：桂枝汤方桂芍草，佐用生姜和大枣。啜粥温服取微汗，调和营卫解肌表。</p>
<p>二、桂枝加葛根汤：桂加葛根走经输，项背几几反汗濡。解肌驱风滋经脉，用治柔痉理不殊。</p>
<p>三、桂枝加附子汤：桂加附子治有三，风寒肢痛脉迟弦。汗漏不止恶风甚，肌肤麻木卫阳寒。</p>
<p>四、桂枝去芍药汤：桂枝去芍意何居，胸满心悸膻中虚。若见咳逆和短气，桂甘姜枣治无遗。</p>
<p>五、桂枝去芍药加附子汤：桂枝去芍避阴寒，加附助阳理固然。脉促无力舌质淡，胸痹治法非等闲。</p>
<p>六、桂枝麻黄各半汤：桂加麻杏名各半，肌表小邪不得散。面有热色身亦痒，两方合用发小汗。</p>
<p>七、桂枝二麻黄一汤：桂二麻一名合方，寒热如疟治法良。大汗之后表未解，祛邪同时正亦匡。</p>
<p>八、桂枝二越婢一汤：桂加麻膏量要轻，热多寒少脉不丰。小汗法中兼清热，桂二越一记心中。</p>
<p>九、桂枝去桂加茯苓白术汤：桂枝汤中去桂枝，苓术加来利水湿。小便不利心下满，颈项强痛热翕翕。</p>
<p>十、桂枝加厚朴杏子汤：桂加厚朴杏子仁，喘家中风妙如神。如今肺炎求治法，媲美麻杏说与君。</p>
<p>十一、桂枝加芍药生姜各一两人参三两新加汤：桂枝加参新加汤，增姜加芍效力彰。身疼脉沉非表证，血虚营弱汗多伤。</p>
<p>十二、桂枝甘草汤：桂枝甘草补心虚，两手叉冒已浇漓。汗多亡液心阳弱，药少力专不须疑。</p>
<p>十三、小建中汤：桂加饴糖小建中，倍加芍药方奏功。虚劳里急心烦悸，伤寒尺迟梦失精。</p>
<p>十四、桂枝去芍药加蜀漆牡蛎龙骨救逆汤：桂枝去芍恐助阴，痰水犯心狂躁纷。龙牡安神桂枝助，蜀漆涤饮有奇勋。</p>
<p>十五、桂枝加桂汤：桂枝加桂剂量增，奔豚冲心来势凶。平冲降逆解外寒，补心代肾立奇功。</p>
<p>十六、桂枝甘草龙骨牡蛎汤：桂枝甘草组成方，龙牡加入安神良。心悸同时兼烦躁，补阳宁心效果彰。</p>
<p>十七、桂枝附子汤：桂枝附子寒痹痛，去芍加附量要重。扶阳散寒应兼顾，脉浮虚涩是其应。</p>
<p>十八、去桂加白术汤：去桂加术大便硬，寒湿相搏身疼痛。术附姜枣加甘草，三阴都尽冒始应。</p>
<p>十九、桂枝加芍药汤：桂枝加芍腹痛诊，此病原来属太阴。慢性菌痢久不已，脉沉弦缓是指针。</p>
<p>二十、桂枝加大黄汤：桂枝大黄治腹痛，太阴阳明表里病。调和气血泻结滞，胃弱之人宜慎用。</p>
<p>二十一、桂枝人参汤：人参汤方即理中，加桂后煎力方增。痞利不解中寒甚，温中解表建奇功。</p>
<h2 id="麻黄汤类方歌八首">2．麻黄汤类方歌（八首）</h2>
<p>一、麻黄汤：麻黄汤治太阳寒，麻桂杏草四味联。表实无汗头身疼，脉紧气喘更恶寒。</p>
<p>二、大青龙汤：大青麻杏石膏枣，桂姜相加七味好。不汗焦躁身疼痛，饮流四肢肿胀讨。</p>
<p>三、小青龙汤：小青龙汤用麻黄，桂芍辛味与干姜。半夏炙草同剂量，表寒里饮病为殃。</p>
<p>四、麻黄杏仁甘草石膏汤：麻杏石甘四味施，汗出而喘肺热居。身热脉数证方是，不恶寒兮别桂枝。</p>
<p>五、麻黄连翘赤小豆汤：麻黄连翘赤豆汤，湿热兼表身发黄。麻翘姜辛梓皮枣，杏仁赤豆煮潦浆。</p>
<p>六、麻黄细辛附子汤：麻黄细辛附子汤，太少两感用此方。发热恶寒脉不起，温经解表有特长。</p>
<p>七、麻黄附子甘草汤：麻黄附子甘草汤，伤寒两感阳气伤。此方本来无里症，助阳发汗保康乐。</p>
<p>八、麻黄升麻汤：麻黄升桂汤芍姜，知膏天冬苓术黄。归蕤炙草十四味，寒热并用和阴阳。</p>
<h2 id="葛根汤类方歌三首">3．葛根汤类方歌（三首）</h2>
<p>一、葛根汤：葛根桂枝加葛黄，无汗项背几几强。二阳合病下利治，刚痉无汗角弓张。</p>
<p>二、葛根加半夏汤：葛根加夏病二阳，下利呕逆表邪强。疏表解肌利肠胃，合病治法好思忖。</p>
<p>三、葛根黄芩黄连汤：葛根芩连加甘草，协热下利喘汗宝。清热生津解表里，葛根用至八钱好。</p>
<h4 id="抵当汤类方歌三首">4．抵当汤类方歌（三首）</h4>
<p>一、桃核承气汤：桃核承气硝黄草，桃仁桂枝五药讨。太阳蓄血腹痛急，其人如狂成效好。</p>
<p>二、抵当汤：抵当汤顶事大黄，虻虫桃蛭力最强。少腹硬满小方便，攻瘀逐热治发狂。</p>
<p>三、抵当丸：抵当丸即抵当汤，捣药成丸煮水浆。连渣服之只一颗，缓攻瘀血正不伤。</p>
<h2 id="栀子豉汤类方歌七首">5．栀子豉汤类方歌（七首）</h2>
<p>一、栀子豉汤：栀子豉汤治虚烦，懊憹倒置不得眠。呕吐少气加姜草，胸窒结痛药不添。</p>
<p>二、栀子甘草豉汤：见栀子豉汤方歌内</p>
<p>三、栀子生姜豉汤：见栀子豉汤方歌内</p>
<p>四、栀子厚朴汤：栀子厚朴药有三，栀子厚朴枳实煎。心烦腹满分上下，清烦泻满两证兼。</p>
<p>五、栀子干姜汤：栀子干姜治心烦，身热不去泻又添。寒热并用分上下，清热温寒一方肩。</p>
<p>六、枳实栀子豉汤：枳实枝豉劳复宝，食后再加大黄好。酒疸心热且懊憹，栀子大黄力能讨。</p>
<p>七、栀子柏皮汤：栀子柏皮湿热黄，发热尿赤量不长。栀子黄柏兼甘草，清热祛湿好思忖。</p>
<h2 id="陷胸汤类方歌六首">6．陷胸汤类方歌（六首）</h2>
<p>一、大陷胸丸：大陷胸丸法最超，半升葶苈杏硝调。项强如痉君须记，大黄甘遂下之消。</p>
<p>二、大陷胸汤：大陷胸汤遂硝黄，心下硬痛脉紧强。热气内陷水热结，小有潮热要参详。</p>
<p>三、十枣汤：十枣汤治胁下水，心下痞硬胁痛锐。甘遂芫戟研细末，枣汤煮浓服钱匕。</p>
<p>四、小陷胸汤：小陷胸汤大瓜蒌，半夏黄连三药投。痰热胶结心下痛，利痰清热服之廖。</p>
<p>五、白散：白散三物巴桔贝，寒实结胸此方贵。或吐或利分上下，中病即止莫伤胃。</p>
<p>六、瓜蒂散：瓜蒂散是涌吐方，胸中痞硬痰邪猖。气冲咽喉不得息，蒂豆研散调豉汤。</p>
<h2 id="泻心汤类方歌六首">7．泻心汤类方歌（六首）</h2>
<p>一、半夏泻心汤：半夏泻心芩连姜，人参草枣融合方。心下痞满兼呕吐，去渣重煎调胃肠。</p>
<p>二、大黄黄连泻心汤：大黄黄连泻心汤，黄芩黄连和大黄。清热泻痞沸汤渍，擅治焦躁吐衄殃。</p>
<p>三、附子泻心汤：附子泻心芩连黄，恶寒汗出痞为殃。专煎轻渍须记住，泻热之中又扶阳。</p>
<p>四、生姜泻心汤：生姜泻心是良方，胃中不和痞为殃。噫气下利芩连草，参枣半夏与二姜。</p>
<p>五、甘草泻心汤：甘草泻心用芩连，干姜半夏参枣全。心下痞硬下利甚，更治狐惑心热烦。</p>
<p>六、旋覆代赭汤：旋覆代赭痞在中，噫气不除饮气冲。参草姜枣半夏予，赭轻姜重方奏功。</p>
<h2 id="甘草汤类方歌四首">8．甘草汤类方歌（四首）</h2>
<p>一、甘草汤：甘草名汤咽痛求，生用一两不多收。莫道此是中焦药，清解少阴效最优。</p>
<p>二、炙甘草汤：炙甘草汤少阴虚，心慌脉结证无疑。麦地麻胶桂姜枣，清酒与水煎法奇。</p>
<p>三、甘草附子汤：甘草附子汤四味，桂枝白术药方备。骨节掣痛不可近，恶风短气阳虚最。</p>
<p>四、甘草干姜汤：甘草干姜二药齐，温肺运脾暖四肢。金匮用以治肺痿，咳嗽多涎尿也遗。</p>
<h2 id="苓桂术甘汤类方歌六首">9．苓桂术甘汤类方歌（六首）</h2>
<p>一、茯苓桂枝白术甘草汤：苓桂术甘温药方，气上冲胸水为殃。头眩心慌阴邪重，咳嗽短气成效彰。</p>
<p>二、茯苓桂枝甘草大枣汤：苓桂枣甘伏水邪，脐下悸占用则确。或许上冲发奔豚，甘澜水煮效方捷。</p>
<p>三、茯苓甘草汤（苓桂姜甘汤）：茯苓甘草与桂姜，胃中停水悸为殃。气趋小腹或成泄，健胃泻水厥亦良。</p>
<p>四、五苓散：五苓苓桂泽猪术，水停膀胱津不输。口渴心烦尿不利，饮入则吐脉来浮。</p>
<p>五、猪苓汤：猪苓汤治少阴虚，热与水蓄烦呕居。小便不利口又渴，泽胶猪茯及滑石。</p>
<p>六、文蛤散：水潠原逾汗法门，肉上粟起更增烦。意中思水还无渴，文蛤磨调药不繁。</p>
<h2 id="黄芩黄连汤类方歌四首">10．黄芩黄连汤类方歌（四首）</h2>
<p>一、黄芩汤：黄芩汤治太少利，腹痛急切脉弦细。黄芩白芍甘草枣，清热和阴平肝逆。</p>
<p>二、黄芩加半夏生姜汤：黄芩原方加夏姜，呕吐下利胃肠伤。太少合病邪热淫，苦降辛开治少阳。</p>
<p>三、黄连汤：黄连汤内参连草，姜桂半夏和大枣。胃中有痛心胸热，呕吐腹痛此方宝。</p>
<p>四、黄连阿胶汤：黄连阿胶治少阴，焦躁不寐脉数频。舌尖如梅是的候，芩连芍胶黄搅匀。</p>
<h2 id="白虎汤类方歌三首">11．白虎汤类方歌（三首）</h2>
<p>一、白虎汤：白虎烦渴用石膏，大热汗出脉浩浩。知粳甘草四药足，清气生津润枯焦。</p>
<p>二、白虎加人参汤：白虎加参气阴伤，烦渴脉大饮水浆。汗出过多脉成芤，背微恶寒舌焦黄。</p>
<p>三、竹叶石膏汤：竹叶石膏气阴伤，病后虚羸呕逆方。不欲茶饭参草麦，粳叶石膏半夏匡。</p>
<h2 id="承气汤类方歌六首">12．承气汤类方歌（六首）</h2>
<p>一、调胃承气汤：调胃承气用大黄，芒硝甘草三药偿，胃气不和心烦热，便燥谵语舌苔黄。</p>
<p>二、小承气汤：小承气汤朴枳黄，便硬谵语腹胀详。识得燥结分轻重，脉滑不紧用此方。</p>
<p>三、大承气汤：大承气汤用硝黄，厚朴枳实四药强。潮热蒸蒸濈濈汗，腹满硬痛峻攻良。</p>
<p>四、麻子仁丸：麻子仁丸结果好，大便秘结津液少。枳朴大黄泻胃强，麻杏芍药滋脾约。</p>
<p>五、蜜煎导方：（方歌见下）</p>
<p>六、猪胆汁灌方：蜜煎熟后样如饴，稍冷搓挺四寸余。温纳肛门润肠燥，古法导便叹诧异。津亏有热便不出，猪胆一枚方适宜。胆汁调醋灌肠内，虚家便秘奏效奇。</p>
<h2 id="柴胡汤类方歌七首">13．柴胡汤类方歌（七首）</h2>
<p>一、小柴胡汤：小柴胡汤解少阳，胸满胁痛呕吐详。口苦咽干目眩是，柴芩参草枣半姜。</p>
<p>二、大柴胡汤：大柴胡汤大黄枳，柴芩姜夏芍枣宜。少明合病气火郁，呕吐口苦心下急。</p>
<p>三、柴胡加芒硝汤：小柴加硝两解方，芒硝后煎入药良。日晡潮热胸胁满，协调胃胆利少阳。</p>
<p>四、柴胡桂枝汤：柴胡桂枝双边合，善治太少两经疴。心下支结关节痛，前期肝硬亦能和。</p>
<p>五、柴胡桂枝干姜汤：柴胡桂姜痛胁背，大便不实尿欠利。阳邪向阴气化衰，柴芩姜桂草粉蛎。</p>
<p>六、柴胡加龙骨牡蛎汤：柴加龙牡桂丹铅，大黄茯苓记要谙。扣除甘草铅要裹，胸满烦惊小便难。</p>
<p>七、四逆散：柴芍枳草四逆散，肝郁气结肢不暖。脉沉而弦胸胁痛，随证治疗须加减。</p>
<h2 id="芍药当归汤类方歌四首">14．芍药当归汤类方歌（四首）</h2>
<p>一、芍药甘草汤：芍药甘草两药投，筋挛拘急足趾抽。苦甘化阴利血统，滋阴柔肝效立瘳。</p>
<p>二、芍药甘草附子汤：芍药甘草附子汤，汗后阴阳两俱伤。恶寒不热应温补，芍甘和阴附助阳。</p>
<p>三、当归四逆汤：当归四逆治厥寒，脉细欲绝病杰出。归芍桂甘枣通细，补血散寒治在肝。</p>
<p>四、当归四逆加吴茱萸生姜汤：当归四逆加萸姜，清酒烹来效始彰。内有久寒厥阴是，药分五次缓服康。</p>
<h2 id="干姜汤类方歌三首">15．干姜汤类方歌（三首）</h2>
<p>一、干姜附子汤：干姜附子治少阴，阳虚烦躁夜则宁。不呕不渴无表证，身无大热脉微沉。</p>
<p>二、干姜黄芩黄连人参汤：干姜芩连与人参，辛开苦降法超群。四物平行各三两，诸凡格拒此方珍。</p>
<p>三、理中丸（汤）：理中白术与人参，干姜炙草四药亲。脾阳虚衰寒湿甚，腹满吐利脉迟沉。</p>
<h2 id="赤石脂汤类方二首">16．赤石脂汤类方（二首）</h2>
<p>一、赤石脂禹余粮汤：赤石禹粮两药珍，大便滑脱利不禁。理中不应宜此法，涩以固脱是指针。</p>
<p>二、桃花汤：桃花石脂米干姜，少阴下利脓血方。温固下焦和胃气，汤末搭配力方彰。</p>
<h2 id="四逆汤类方九首">17．四逆汤类方（九首）</h2>
<p>一、四逆汤：四逆生附老干姜，炙草将将有专长。少阴阳虚肢不暖，吐利烦躁欲寐方。</p>
<p>二、四逆加人参汤：四逆加参治何为，下利多时阴亦摧。四逆扶阳参滋血，更取中州化精微。</p>
<p>三、茯苓四逆汤：茯苓四逆少阴虚，心肾阴阳已不支。补阳生附姜甘草，扶阴参苓两药施。</p>
<p>四、通脉四逆汤：通脉四逆草附姜，加重剂量另名方。手足厥逆吐利甚，脉搏不出急回阳。</p>
<p>五、通脉四逆加猪胆汁汤：通脉四逆治亡阳，再加胆汁救阴伤。吐已下断烦呕甚，津液枯竭用此汤。</p>
<p>六、真武汤：真武名汤镇水寒，扶阳法中有心传。附术苓芍生姜共，内惕心悸小便难。</p>
<p>七、白通汤：白通汤治少阴寒，阳虚下利非等闲。葱白四茎姜附一，加入胆尿治呕烦。</p>
<p>八、白通加猪胆汁汤：白通汤治少阴寒，阳虚下利非等闲。葱白四茎姜附一，加入胆尿治呕烦。</p>
<p>九、附子汤：附子汤治背恶寒，脉沉口和阳气残。参附苓术芍药共，更治妊娠腹如扇。</p>
<h2 id="杂方类方歌十一首">18．杂方类方歌（十一首）</h2>
<p>一、厚朴生姜半夏甘草人参汤：厚朴夏姜参草寻，善治腹胀妙通神。脾气不运痰气结，三补七消法超群。</p>
<p>二、茵陈蒿汤：茵陈蒿汤治疸黄，阴阳寒热细推详。阳黄大黄栀子入，阴黄附子与干姜。</p>
<p>三、猪肤汤：猪肤斤许用水煎，水煎减半滓须捐。再投粉蜜熬香服，少阴咽痛利且烦。</p>
<p>四、桔梗汤：甘草桔梗治咽痛，消炎解毒妙堪用。阴中伏热结于喉，切忌苦寒投此证。</p>
<p>五、苦酒汤：半夏一枚十四开，鸡清苦酒搅几回。刀环捧壳煎三沸，咽痛频吞绝妙哉。</p>
<p>六、半夏散及汤：半夏研散或用汤，少阴咽痛效最彰。半夏桂甘煎少与，微冷慢呷不用忙。</p>
<p>七、乌梅丸：乌梅丸治蛔厥证，连柏干姜参归用。川椒桂辛与附子，乌梅三百力始胜。</p>
<p>八、白头翁汤：白头翁汤下利寻，黄连黄柏白头秦。识得欲饮属内热，下重难通此方珍。</p>
<p>九、吴茱萸汤：吴茱萸汤暖胃肝，呕吐涎水痛在巅。萸姜人参与大枣，温中降逆治阴寒。</p>
<p>十、烧裈散：近阴裆处剪来烧，研末还须用水调。同气相求疗二易，长沙无法不翘翘。</p>
<p>十一、牡蛎泽泻汤：牡蛎泽泻治如何，下肢肿胀病未瘥。商陆葶苈泻水结，蜀漆海藻破坚邪。</p>
]]></content>
      <categories>
        <category>中医</category>
      </categories>
      <tags>
        <tag>中医</tag>
        <tag>伤寒论</tag>
      </tags>
  </entry>
  <entry>
    <title>形态学总结</title>
    <url>/posts/c1f4dbab.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>开操作和闭操作的作用</li>
<li>击中的作用</li>
<li>在形态学中如何进行边界提取</li>
<li>孔洞填充和连通分量提取的局限性在哪里</li>
<li>一般在灰度级的形态学中，结构元的特点</li>
<li>顶帽的用途</li>
</ul>
<h2 id="形态学">形态学</h2>
<p>所有的实现Demo源代码在这里：https://github.com/qcymkxyc/Image-Process</p>
<h3 id="腐蚀">腐蚀</h3>
<p>腐蚀的作用：</p>
<blockquote>
<p>腐蚀会清除小于结构元的图像细节，腐蚀比较典型的应用包括去噪、去除断点等</p>
</blockquote>
<p>腐蚀的原理：</p>
<blockquote>
<p>腐蚀会用一个模板（书面的说法是结构元，俗称刷子）依次扫描过图像（类似于滤波），如果该结构元中的非0元素在图像中对应的位置的像素也为非0元素，则该点为1，否则为0。</p>
</blockquote>
<p>腐蚀表示为： <span class="math display">\[
A\Theta{B}
\]</span> 以下是腐蚀的原图像：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/腐蚀原图像.png">

</div>
<p>腐蚀后的结果为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/腐蚀后的结果.png">

</div>
<h3 id="膨胀">膨胀</h3>
<blockquote>
<p>与腐蚀相反，腐蚀的作用是连接断点</p>
</blockquote>
<p>膨胀的原理：</p>
<blockquote>
<p>在结构元扫过的图像时，若重叠部分有超过一个有色的（即模板和对应的像素均大于1），则该点为1</p>
</blockquote>
<p>膨胀表示为： <span class="math display">\[
A\bigoplus{B}
\]</span> 以下为原图像：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/膨胀原图像.png">

</div>
<p>膨胀后的结果为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/膨胀后的图像.png">

</div>
<h3 id="开操作和闭操作">开操作和闭操作</h3>
<p>书上的对两者作用的解释：</p>
<blockquote>
<p>开操作一般会平滑物体的轮廓，断开较窄的狭颈并消除细的突出物。闭操作同样也会平滑轮廓的一部分，但与开操作相反，它通常会弥合较窄的间断和细长的沟壑，消除小的孔洞，填补轮廓线中的断裂。</p>
</blockquote>
<p>我的理解：</p>
<blockquote>
<p>虽然腐蚀和膨胀对图像有一定的正向作用，但也有一定的副作用。例如，我们用腐蚀消除噪声，虽然噪声消除了，但也使有些相连的部分断裂了，所以，我们需要用膨胀“还原”</p>
<p>综上所述，开操作和闭操作的第二步其实就是对 前一步的后处理。两个操作的真正作用在第一步，那么：</p>
<ul>
<li>开操作： 去除小部分，包括椒盐噪声等等</li>
<li>闭操作：连接断点，较大的结构元可以填充孔洞</li>
</ul>
</blockquote>
<p>以下是开操作和闭操作的公式表示,,</p>
<ul>
<li>开操作：</li>
</ul>
<p><span class="math display">\[
A\circ{B}=(A\Theta{B})\bigoplus{B}
\]</span></p>
<ul>
<li>闭操作：</li>
</ul>
<p><span class="math display">\[
A\cdot{B}=(A\bigoplus{B})\Theta{B}
\]</span></p>
<p>原始图像：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/开操作原图像.png">

</div>
<p>开操作结果：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/开操作结果.png">

</div>
<p>闭操作结果：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/闭操作结果.png">

</div>
<h3 id="击中以及不击中">击中以及不击中</h3>
<h4 id="公式说明及理解">公式说明及理解</h4>
<blockquote>
<p>击中即利用形态学在一幅图中做模板匹配，这在实际应用中相当有用</p>
</blockquote>
<p>击中除了需要匹配的模板之外还需要一个模板的补集，才能完成击中。击中的公式表示为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/击中公式1.png">

</div>
<p>上式中，<span class="math inline">\(A\)</span>表示图像，<span class="math inline">\(B_1\)</span>是由与一个目标相联系的<span class="math inline">\(B\)</span>的元素构成的集合，<span class="math inline">\(B_2\)</span>是由与相应背景相联系的<span class="math inline">\(B\)</span>的元素构成的集合。</p>
<blockquote>
<p>实际上，上式的<span class="math inline">\(B_1\)</span>是我们要匹配的模板，<span class="math inline">\(B_2\)</span>是一个与模板互为补集的另一个模板</p>
</blockquote>
<h4 id="击中实现代码">击中实现代码</h4>
<p>在OpenCV中没有现成的击中代码，关于击中的核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hit</span><span class="params">(img:np.ndarray,shape1:np.ndarray,shape2:np.ndarray)</span>:</span></span><br><span class="line">    <span class="string">"""击中"""</span></span><br><span class="line">    <span class="keyword">if</span> shape1.dtype != np.uint8 <span class="keyword">or</span> shape2.dtype != np.uint8:</span><br><span class="line">        <span class="keyword">raise</span> TypeError</span><br><span class="line">        </span><br><span class="line">    part1 = cv2.erode(img,shape1)</span><br><span class="line">    part2 = cv2.erode(<span class="number">1</span> - img, shape2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> np.logical_and((part1 == part2),part1 == <span class="number">1</span>).astype(int)</span><br></pre></td></tr></table></figure>
<h4 id="击中demo">击中Demo</h4>
<p>图片如下图所示（该图用numpy随机构成）：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/击中原图.png">

</div>
<p>公式中的<span class="math inline">\(B_1\)</span>如下（实际上模板是白色的矩阵，也就是全是1，不知道为什么用matplotlib显示时，显示的是黑色）：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/击中B1.png">

</div>
<p>公式中的<span class="math inline">\(B_2\)</span>,<span class="math inline">\(B_2\)</span>是在<span class="math inline">\(B_1\)</span>的基础上在周围添加<span class="math inline">\(N\)</span>个像素，填充为白色（也就是1），以前的<span class="math inline">\(B_1\)</span>替换为黑色 （即0），<span class="math inline">\(B_2\)</span>如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/击中B2.png">

</div>
<p>击中的结果如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/击中的结果.png">

</div>
<p>上图中的白点即为击中的位置。</p>
<p>打印的击中位置结果如下 ：</p>
<blockquote>
<p>[(37, 20), (73, 116), (171, 182)]</p>
</blockquote>
<p>原结果位置：</p>
<blockquote>
<p>[(37, 20), (73, 116), (171, 182)]</p>
</blockquote>
<h2 id="边界提取">边界提取</h2>
<h4 id="公式说明">公式说明</h4>
<p>对于形态学而言，边界提取是一件相当简单的事</p>
<blockquote>
<p>边界提取可以用原图减去腐蚀后的图像，也可以用膨胀后的图像减去腐蚀后的图像</p>
</blockquote>
<p>书上是用原图像减去腐蚀后的图像，即：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/边界提取公式.png">

</div>
<h4 id="demo">Demo</h4>
<p>以下是边界提取的原图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/边界提取原图.png">

</div>
<p>提取的结果如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/边界提取结果.png">

</div>
<h3 id="孔洞填充">孔洞填充</h3>
<h4 id="公式">公式</h4>
<p>孔洞填充的形态学应用不同之前的形态学应用，孔洞填充是一个迭代的过程，当在第<span class="math inline">\(k\)</span>次迭代后不再变化则停止。</p>
<p>孔洞填充的第<span class="math inline">\(k\)</span>次迭代的公式如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/孔洞填充公式.png">

</div>
<p>其中，<span class="math inline">\(A\)</span>表示要孔洞填充的图片，<span class="math inline">\(B\)</span>表示结构元，<span class="math inline">\(X_{k-1}\)</span>表示第<span class="math inline">\(k-1\)</span>次迭代的结果。</p>
<h4 id="过程说明">过程说明</h4>
<ul>
<li>首先，在进行形态学的孔洞填充时，我们会给定一个空白的且形状和原图相等的“黑”图（该图的所有像素值均为0），然后找出孔洞填充的起始点，并将该点标为1（即此时该图中仅有一个点的像素值为1，其余的点为0）。该图像即为公式中的<span class="math inline">\(X_1\)</span></li>
<li>根据上述公式可以得到<span class="math inline">\(X_2\)</span>,以此类推，直到<span class="math inline">\(X_k\)</span>和<span class="math inline">\(X_{k-1}\)</span>完全相同为止</li>
</ul>
<h4 id="demo-1">Demo</h4>
<p>孔洞填充的核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blank_fill</span><span class="params">(img,start_coordination)</span> -&gt; np.ndarray:</span></span><br><span class="line">    <span class="string">""""""</span></span><br><span class="line">    kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">9</span>,<span class="number">9</span>))</span><br><span class="line">    </span><br><span class="line">    last_temp_img = np.zeros_like(img)</span><br><span class="line">    last_temp_img[start_coordination] = <span class="number">1</span></span><br><span class="line">    current_temp_img = cv2.dilate(last_temp_img,kernel)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (current_temp_img != last_temp_img).any():</span><br><span class="line">        last_temp_img = current_temp_img    </span><br><span class="line">        current_temp_img = cv2.dilate(current_temp_img,kernel)</span><br><span class="line"></span><br><span class="line">        current_temp_img = np.logical_and(current_temp_img == <span class="number">1</span>,current_temp_img == (<span class="number">1</span> - img)).astype(float)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> current_temp_img</span><br></pre></td></tr></table></figure>
<p>原图如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/孔洞填充原图.png">

</div>
<p>选择（0,27）作为起始的填充点，则填充的结果如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/孔洞填充结果.png">

</div>
<h3 id="连通分量提取">连通分量提取</h3>
<h4 id="公式及说明">公式及说明</h4>
<blockquote>
<p>连通分量的限定条件和孔洞填充是相反的，孔洞填充的限定条件是<span class="math inline">\(A^c\)</span>,而连通分量提取的限定条件是<span class="math inline">\(A\)</span>.因为限定的不同，所造成的结果完全不同。</p>
</blockquote>
<p>孔洞填充的公式如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/连通分量提取公式.png">

</div>
<h4 id="代码实现">代码实现</h4>
<p>连通分量的核心代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connected_area</span><span class="params">(img,start_coodination)</span> -&gt; np.ndarray:</span></span><br><span class="line">    <span class="string">"""提取连通分量"""</span></span><br><span class="line">    kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    </span><br><span class="line">    last_temp_img = np.zeros_like(img)</span><br><span class="line">    last_temp_img[start_coodination] = <span class="number">1</span></span><br><span class="line">    current_temp_img = cv2.dilate(last_temp_img,kernel)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (current_temp_img != last_temp_img).any():</span><br><span class="line">        last_temp_img = current_temp_img    </span><br><span class="line">        current_temp_img = cv2.dilate(current_temp_img,kernel)</span><br><span class="line">        current_temp_img = np.logical_and((current_temp_img == img),current_temp_img == <span class="number">1</span>).astype(float)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> current_temp_img</span><br></pre></td></tr></table></figure>
<h4 id="demo-2">Demo</h4>
<p>原图如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/连通分量原图.png">

</div>
<p>取坐标（113,57）作为起始坐标点，最终迭代的结果如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/连通分量结果.png">

</div>
<h2 id="形态学重建">形态学重建</h2>
<h3 id="测地膨胀">测地膨胀</h3>
<p>令<span class="math inline">\(D_{G}^{(1)}(F)\)</span>表示大小为1的标记图像关于模板的测地膨胀定义为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/测地膨胀公式1.png">

</div>
<p>其中<span class="math inline">\(F\)</span>表示标记图像，<span class="math inline">\(G\)</span>表示模板图像。<span class="math inline">\(F\)</span>关于<span class="math inline">\(G\)</span>的大小为<span class="math inline">\(n\)</span>的测地膨胀定义为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/测地膨胀公式2.png">

</div>
<h3 id="测地腐蚀">测地腐蚀</h3>
<p>类似有测地膨胀，大小为1的测地腐蚀表示为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/测地腐蚀公式1.png">

</div>
<p><span class="math inline">\(F\)</span>关于<span class="math inline">\(G\)</span>的大小为<span class="math inline">\(n\)</span>的测地腐蚀定义为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/测地腐蚀公式2.png">

</div>
<p><strong>经证明，有限数量的图像的测地膨胀和腐蚀经过有限数量的迭代步骤后总会收敛。</strong></p>
<h3 id="膨胀的形态学重建">膨胀的形态学重建</h3>
<blockquote>
<p>膨胀的形态学重建即测地膨胀达到稳定状态的结果</p>
</blockquote>
<p>所以可以定义膨胀的形态学重建<span class="math inline">\(R_G^D(F)\)</span>,实际上就是测地膨胀达到稳定状态的结果（也就是上述所提及的收敛），公式如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/膨胀形态学重建公式.png">

</div>
<p>即测地膨胀迭代<span class="math inline">\(k\)</span>次，直至<span class="math inline">\(D_G^{(k)}(F)=D_G^{(k+1)}(F)\)</span>,停止迭代</p>
<h3 id="腐蚀的形态学重建">腐蚀的形态学重建</h3>
<p>腐蚀的形态学重建基本上同膨胀的重建，公式表示为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/腐蚀的形态学重建公式.png">

</div>
<p>其中，停止的条件为<span class="math inline">\(E_G^{(k)}(F)=E_G^{(k+1)}(F)\)</span></p>
<h3 id="重建开操作">重建开操作</h3>
<blockquote>
<p>同普通的开操作，重建开操作也用于删除一些小的物体（例如椒盐噪声）。</p>
</blockquote>
<p>重建开操作的公式如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/重建开操作公式.png">

</div>
<p>其中，<span class="math inline">\(F\Theta{nB}\)</span>表示<span class="math inline">\(B\)</span>对<span class="math inline">\(F\)</span>的<span class="math inline">\(n\)</span>次腐蚀</p>
<h4 id="实现">实现</h4>
<p>核心 代码如下 ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rebuild_open</span><span class="params">(img:np.ndarray,kernel:np.ndarray,erode_time:int = <span class="number">1</span>)</span> -&gt; np.ndarray:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"""多次腐蚀"""</span></span><br><span class="line">    temp_img = img.copy()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(erode_time):</span><br><span class="line">        temp_img = cv2.erode(temp_img,kernel)</span><br><span class="line">        </span><br><span class="line">    <span class="string">"""测地膨胀"""</span></span><br><span class="line">    dialate_kernel = cv2.getStructuringElement(cv2.MORPH_RECT,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    last_img = temp_img.copy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        current_img = cv2.dilate(last_img,dialate_kernel)</span><br><span class="line">        current_img  = np.logical_and(current_img  == <span class="number">1</span>,current_img == img)</span><br><span class="line">        current_img = current_img.astype(float)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (current_img ==  last_img).all():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            last_img = current_img</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> current_img</span><br></pre></td></tr></table></figure>
<h4 id="demo-3">Demo</h4>
<p>该Demo用于提取垂直笔画的长字符。</p>
<p>原图片如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/重建开操作原图.png">

</div>
<p>在进行了一次腐蚀的重建开操作后的结果为：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/重建开操作结果.png">

</div>
<h2 id="灰度形态学">灰度形态学</h2>
<p>灰度的形态学基本上同，但有以下不同：</p>
<ul>
<li>灰度的形态学的结构元基本上是圆形</li>
<li>腐蚀和膨胀的规则稍有不同</li>
</ul>
<h3 id="灰度腐蚀">灰度腐蚀</h3>
<p>灰度腐蚀定义为图像<span class="math inline">\(f\)</span>和结构元<span class="math inline">\(b\)</span>重合区域的<strong>最小值</strong>,灰度腐蚀的公式如下所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度腐蚀公式.png">

</div>
<h3 id="灰度膨胀">灰度膨胀</h3>
<p>相反，灰度膨胀定义为图像<span class="math inline">\(f\)</span>和结构元<span class="math inline">\(b\)</span>重合区域的<strong>最大值</strong>，灰度膨胀公式如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度膨胀公式.png">

</div>
<h3 id="灰度开操作和闭操作">灰度开操作和闭操作</h3>
<h4 id="公式-1">公式</h4>
<p>灰度的开操作和闭操作完全同二值图像的开操作和闭操作，公式如下：</p>
<ul>
<li><p>灰度开操作：<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度开操作公式.png"></p></li>
<li><p>灰度闭操作：<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度闭操作公式.png"></p></li>
</ul>
<h4 id="作用">作用</h4>
<p>灰度开操作和闭操作的作用：</p>
<blockquote>
<ul>
<li>开操作会使亮度高的区域平滑</li>
<li>闭操作会使亮度低的区域平滑</li>
</ul>
</blockquote>
<h4 id="demo-4">Demo</h4>
<p>以下是原图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度原图.png">

</div>
<p>用半径为3的结构元进行开操作得到的结果：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度开操作结果.png">

</div>
<p>用半径为5的结构元进行闭操作得到的结果 ：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/灰度闭操作结果.png">

</div>
<h3 id="灰度形态学梯度">灰度形态学梯度</h3>
<h4 id="公式-2">公式</h4>
<p>灰度的形态学梯度很像在二值图像中的边界提取，公式如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/形态学梯度公式.png">

</div>
<h4 id="demo-5">Demo</h4>
<p>原图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/形态学梯度原图.png">

</div>
<p>提取的梯度结果：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/形态学梯度结果.png">

</div>
<h3 id="顶帽和底帽变换">顶帽和底帽变换</h3>
<h4 id="公式-3">公式</h4>
<p><strong>顶帽变换的一个重要用途是校正不均匀光照的影响，通过顶帽变换，背景应会变得均匀</strong></p>
<p>顶帽和底帽变换的公式如下：</p>
<ul>
<li>顶帽变换：<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/顶帽公式.png"></li>
<li>底帽变换：<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/底帽公式.png"></li>
</ul>
<h4 id="demo-6">Demo</h4>
<p>该Demo是从以下图中选出米粒。如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/顶帽原图.png">

</div>
<p>通过一系列变换，最终分离出的米粒如下图中最右图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/顶帽结果.png">

</div>
<p>上图中，第1幅图为原图像（即最左面的图像）。第2幅图是通过一个全局阈值分离出的米粒，可以看到左上角并未明显的分离。第3幅图是将原图进行开操作的结果，所用的结构元为半径为40的圆形结构元。第4幅图是顶帽操作的结果。第5幅图对第4幅图进行阈值分离的结果，可以看到米粒更加清晰的分离出来。但第5幅图中发现有噪声存在，所以需要对该图去噪 ，第6幅图是对第5幅图进行腐蚀后的结果。</p>
<h3 id="纹理分割">纹理分割</h3>
<blockquote>
<p>纹理分割是用于分离不同形状不同大小的图形</p>
</blockquote>
<h4 id="demo-7">Demo</h4>
<p>该 Demo用来分离下图中大小两个不同圆，从而在两个圆之间形成一条分割线。</p>
<p>用于纹理分割的原图如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/纹理分割原图.png">

</div>
<p>如果我们用一个半径在大圆和小圆的之间的结构元进行闭操作，这样会填平小的圆。下图 图2表示以50为半径的圆形结构元进行闭操作的结果。要想形成一条明显的分割线我们对图2做开操作，只要开操作的结构元足够大，那么右半部分黑色圆的空隙就会被填平，这里选用半径为100的结构元进行开操作，得到 的结果如下图3所示。图4表示将图3加入原图得到的分割曲线。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/纹理分割结果.png">

</div>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>冈萨雷斯版《数字图像处理》</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>骨架算法</title>
    <url>/posts/311496b5.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<h2 id="概述">概述</h2>
<p>骨架算法是什么？</p>
<blockquote>
<p>下图中，左图是书法字，右图是骨架后的结果<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/示例对比.png" style="zoom: 67%;"></p>
</blockquote>
<p>骨架算法有什么用？</p>
<blockquote>
<p>例如，在基于毛笔OCR识别中，通常会使用字的骨架进行识别，而非原图像</p>
</blockquote>
<h2 id="骨架算法">骨架算法</h2>
<h3 id="什么是好的骨架算法">什么是好的骨架算法</h3>
<p>好的骨架算法必须满足以下三点：</p>
<ul>
<li>不能删除端点</li>
<li>不能破坏连接性</li>
<li>不能导致区域过度腐蚀</li>
</ul>
<h3 id="基于mat中轴变换的一种实现">基于MAT（中轴变换）的一种实现</h3>
<p>基于MAT思想认为骨架为一条线最中间的部分（例如上图中一竖，他对应的骨架就是这一竖最中间的像素点组成的一条线）。那么，该骨架满足该条线上的点到两个边缘的距离是相等的。</p>
<p>此时，一个很自然的形成骨架的算法是：对于一个笔画，我们从边缘等量的向中轴减少像素点，直到中轴上的仅有一个像素点宽，自然而然的就是该笔画的骨架了。</p>
<p>下面是一个基于MAT思想算法实现的代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@decorators.func_output_type_check()</span></span><br><span class="line"><span class="meta">@decorators.func_input_type_check()</span></span><br><span class="line"><span class="meta">@decorators.input_shape_check(0, (3, 3))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__mat_process_first</span><span class="params">(around_area: np.ndarray)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""MAT算法步骤1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    对于相邻像素区域：</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [p9,p2,p3],</span></span><br><span class="line"><span class="string">        [p8,p1,p4],</span></span><br><span class="line"><span class="string">        [p7,p6,p5]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    包括以下几个部分：</span></span><br><span class="line"><span class="string">    a. 2 &lt;=非零像素个数 &lt;= 6</span></span><br><span class="line"><span class="string">    b. 顺时针跳数 = 1</span></span><br><span class="line"><span class="string">    c. p2 * p4 * p6 = 0</span></span><br><span class="line"><span class="string">    d. p4 * p6 * p8 = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param around_area: numpy.array, 一个像素的相邻像素，为3*3</span></span><br><span class="line"><span class="string">    :return: bool，是否满足以上所有条件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result_list = list()    <span class="comment"># 保存所有步骤是否符合条件</span></span><br><span class="line">    <span class="string">"""步骤a"""</span></span><br><span class="line">    near_one_count = __near_pix_equal_one_count(around_area)</span><br><span class="line">    result_list.append(<span class="number">2</span> &lt;= near_one_count &lt;= <span class="number">6</span>)</span><br><span class="line">    <span class="string">"""步骤b"""</span></span><br><span class="line">    result_list.append(__binary_transform_count(around_area) == <span class="number">1</span>)</span><br><span class="line">    <span class="string">"""步骤c"""</span></span><br><span class="line">    pix_2 = around_area[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    pix_4 = around_area[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    pix_6 = around_area[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">    result_list.append(pix_2 * pix_4 * pix_6 == <span class="number">0</span>)</span><br><span class="line">    <span class="string">"""步骤d"""</span></span><br><span class="line">    pix_8 = around_area[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    result_list.append(pix_4 * pix_6 * pix_8 == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bool(reduce(<span class="keyword">lambda</span> x, y: x <span class="keyword">and</span> y, result_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__mat_process_second</span><span class="params">(around_area: np.ndarray)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""MAT算法步骤2</span></span><br><span class="line"><span class="string">    对于相邻像素区域：</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [p9,p2,p3],</span></span><br><span class="line"><span class="string">        [p8,p1,p4],</span></span><br><span class="line"><span class="string">        [p7,p6,p5]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    包括以下几个部分：</span></span><br><span class="line"><span class="string">    a. 2 &lt;=非零像素个数 &lt;= 6</span></span><br><span class="line"><span class="string">    b. 顺时针跳数 = 1</span></span><br><span class="line"><span class="string">    c. p2 * p4 * p8 = 0</span></span><br><span class="line"><span class="string">    d. p2 * p6 * p8 = 0</span></span><br><span class="line"><span class="string">    :param around_area: numpy.array, 周围的区域</span></span><br><span class="line"><span class="string">    :return: bool,是否全部子条件</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result_list = list()    <span class="comment"># 保存所有步骤是否符合条件</span></span><br><span class="line">    <span class="string">"""步骤a"""</span></span><br><span class="line">    near_one_count = __near_pix_equal_one_count(around_area)</span><br><span class="line">    result_list.append(<span class="number">2</span> &lt;= near_one_count &lt;= <span class="number">6</span>)</span><br><span class="line">    <span class="string">"""步骤b"""</span></span><br><span class="line">    result_list.append(__binary_transform_count(around_area) == <span class="number">1</span>)</span><br><span class="line">    <span class="string">"""步骤c"""</span></span><br><span class="line">    pix_2 = around_area[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    pix_4 = around_area[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    pix_8 = around_area[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    pix_6 = around_area[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line">    result_list.append(pix_2 * pix_4 * pix_8 == <span class="number">0</span>)</span><br><span class="line">    <span class="string">"""步骤d"""</span></span><br><span class="line">    result_list.append(pix_2 * pix_6 * pix_8 == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bool(reduce(<span class="keyword">lambda</span> x, y: x <span class="keyword">and</span> y, result_list))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorators.func_output_type_check()</span></span><br><span class="line"><span class="meta">@decorators.func_input_type_check()</span></span><br><span class="line"><span class="meta">@decorators.input_shape_check(0, (3, 3))</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__near_pix_equal_one_count</span><span class="params">(around_area: np.ndarray)</span> -&gt; int or np.int:</span></span><br><span class="line">    <span class="string">"""计算相邻像素中为1的个数(不包括中间点)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    即，对于相邻像素区域：</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [p9,p2,p3],</span></span><br><span class="line"><span class="string">        [p8,p1,p4],</span></span><br><span class="line"><span class="string">        [p7,p6,p5]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    统计出p1之外所有的1的个数</span></span><br><span class="line"><span class="string">    :param around_area: numpy.array, 一个像素的相邻像素，为3*3</span></span><br><span class="line"><span class="string">    :return int,像素为1的个数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    temp_around_area = np.copy(around_area)</span><br><span class="line">    temp_around_area[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> int(np.sum(temp_around_area, dtype=np.int))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorators.input_shape_check(0, (3, 3))</span></span><br><span class="line"><span class="meta">@decorators.func_input_type_check()</span></span><br><span class="line"><span class="meta">@decorators.func_output_type_check()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__binary_transform_count</span><span class="params">(around_area: np.ndarray)</span> -&gt; int or np.int:</span></span><br><span class="line">    <span class="string">"""给定一个3*3的二进制图片，获取其顺时针的跳数（从0到1）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    即，对于相邻像素区域：</span></span><br><span class="line"><span class="string">    [</span></span><br><span class="line"><span class="string">        [p9,p2,p3],</span></span><br><span class="line"><span class="string">        [p8,p1,p4],</span></span><br><span class="line"><span class="string">        [p7,p6,p5]</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">    以p9,p2,p3,p4,p5,p6,p7,p8的顺序访问，如果是0到1，则为一跳</span></span><br><span class="line"><span class="string">    :param around_area: numpy.array, 一个像素的相邻像素，为3*3</span></span><br><span class="line"><span class="string">    :return int, 顺时针跳数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next_index</span><span class="params">(current_coor: <span class="params">(int, int)</span>)</span> -&gt; (int, int):</span></span><br><span class="line">        <span class="string">"""给定当前位置，返回下一个位置</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param current_coor: (int,int),当前位置</span></span><br><span class="line"><span class="string">        :return: (int,int), 下一个位置</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="string">'''四个方向的下一个位置'''</span></span><br><span class="line">        right_next = (current_coor[<span class="number">0</span>], current_coor[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">        down_next = (current_coor[<span class="number">0</span>] + <span class="number">1</span>, current_coor[<span class="number">1</span>])</span><br><span class="line">        left_next = (current_coor[<span class="number">0</span>], current_coor[<span class="number">1</span>] - <span class="number">1</span>)</span><br><span class="line">        up_next = (current_coor[<span class="number">0</span>] - <span class="number">1</span>, current_coor[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="string">"""按照指定的规则寻找，不报错则表示正确的方向"""</span></span><br><span class="line">        next_coordinate_list = [right_next, down_next, left_next, up_next]</span><br><span class="line">        <span class="keyword">for</span> i, next_coordinate <span class="keyword">in</span> enumerate(next_coordinate_list):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                around_area[next_coordinate]</span><br><span class="line">            <span class="keyword">except</span> IndexError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="string">'''如果该点已经走过'''</span></span><br><span class="line">                <span class="keyword">if</span> is_walked[next_coordinate[<span class="number">0</span>], next_coordinate[<span class="number">1</span>]]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    is_walked[next_coordinate[<span class="number">0</span>], next_coordinate[<span class="number">1</span>]] = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">return</span> next_coordinate</span><br><span class="line"></span><br><span class="line">    is_walked = np.full_like(around_area, <span class="literal">False</span>)  <span class="comment"># 用于标识该点是否已经走过</span></span><br><span class="line">    is_walked[<span class="number">1</span>][<span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line">    transform_count = <span class="number">0</span>  <span class="comment"># 用于记录跳数</span></span><br><span class="line">    <span class="string">"""循环对比"""</span></span><br><span class="line">    last_pix = around_area[<span class="number">0</span>][<span class="number">0</span>]  <span class="comment"># 上一个的值</span></span><br><span class="line">    current_coordinate = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> current_coordinate != (<span class="number">0</span>, <span class="number">0</span>):</span><br><span class="line">        current_pix = around_area[current_coordinate[<span class="number">0</span>], current_coordinate[<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">if</span> last_pix == <span class="number">0</span> <span class="keyword">and</span> current_pix == <span class="number">1</span>:</span><br><span class="line">            transform_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        last_pix = current_pix</span><br><span class="line">        current_coordinate = __next_index(current_coordinate)</span><br><span class="line"></span><br><span class="line">    <span class="string">'''当循环到第一个点时再对比一次'''</span></span><br><span class="line">    current_pix = around_area[current_coordinate[<span class="number">0</span>], current_coordinate[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">if</span> last_pix == <span class="number">0</span> <span class="keyword">and</span> current_pix == <span class="number">1</span>:</span><br><span class="line">        transform_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> transform_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorators.func_input_type_check()</span></span><br><span class="line"><span class="meta">@decorators.func_output_type_check()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__remove_pix_by_coordination</span><span class="params">(img: np.ndarray, points: list)</span>:</span></span><br><span class="line">    <span class="string">"""给定坐标的list，删除图像上的点（实际就是标记为0）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param img: numpy.array,图像</span></span><br><span class="line"><span class="string">    :param points: List[(int,int)]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> single_coordination <span class="keyword">in</span> points:</span><br><span class="line">        i_row, i_col = single_coordination</span><br><span class="line">        img[i_row][i_col] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get_remove_points</span><span class="params">(img: np.ndarray, func)</span> -&gt; [(int, int)]:</span></span><br><span class="line">    <span class="string">"""给定图像以及，删除点的规则，返回要删除的点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param img: numpy.array, 原图像</span></span><br><span class="line"><span class="string">    :param func: function, 规则，也就是一个函数</span></span><br><span class="line"><span class="string">    :return: List[（int,int）],坐标的list</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    remove_points_list = list()</span><br><span class="line">    temp_img = img</span><br><span class="line">    img_iter = np.nditer(temp_img, flags=[<span class="string">"multi_index"</span>])</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> img_iter.finished:</span><br><span class="line">        current_pix = img_iter[<span class="number">0</span>]</span><br><span class="line">        i_row, i_col = img_iter.multi_index</span><br><span class="line">        img_iter.iternext()</span><br><span class="line">        <span class="string">'''如果是背景点则直接跳过'''</span></span><br><span class="line">        <span class="keyword">if</span> current_pix != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"""如果是前景点"""</span></span><br><span class="line">        around_area = temp_img[i_row - <span class="number">1</span>:i_row + <span class="number">2</span>, i_col - <span class="number">1</span>:i_col + <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> func(around_area):</span><br><span class="line">            remove_points_list.append((i_row, i_col))</span><br><span class="line"></span><br><span class="line">        img_iter.iternext()</span><br><span class="line">    <span class="keyword">return</span> remove_points_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorators.func_input_type_check()</span></span><br><span class="line"><span class="meta">@decorators.func_output_type_check()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_skeleton_by_mat</span><span class="params">(img: np.ndarray)</span> -&gt; np.ndarray:</span></span><br><span class="line">    <span class="string">"""根据字体的图像得到字的骨架</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param img, numpy.array, 原图片</span></span><br><span class="line"><span class="string">    :raise ValueError</span></span><br><span class="line"><span class="string">        - 图片不为单通道</span></span><br><span class="line"><span class="string">        - 图片并未归一化</span></span><br><span class="line"><span class="string">        - 图片并未标准化</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">'''检验图片是否是单通道'''</span></span><br><span class="line">    <span class="keyword">if</span> len(img.shape) != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"该图片不是单通道"</span>)</span><br><span class="line">    <span class="string">"""检验标准化"""</span></span><br><span class="line">    <span class="keyword">if</span> img.max() &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"该图片并未标准化"</span>)</span><br><span class="line">    <span class="string">"""检验二值化"""</span></span><br><span class="line">    <span class="keyword">if</span> (np.unique(img.flatten()) != (<span class="number">0</span>, <span class="number">1</span>)).all():</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"该函数并未二值化"</span>)</span><br><span class="line"></span><br><span class="line">    temp_img = img.copy()</span><br><span class="line">    <span class="string">"""遍历每一个像素点"""</span></span><br><span class="line">    is_remove_flag = <span class="literal">True</span>  <span class="comment"># 表示是否继续删除的标志</span></span><br><span class="line">    i_round = <span class="number">1</span>  <span class="comment"># 记录迭代的轮数</span></span><br><span class="line">    <span class="keyword">while</span> is_remove_flag:</span><br><span class="line">        is_remove_flag = <span class="literal">False</span></span><br><span class="line">        logger.info(<span class="string">"正在执行MAT算法的第&#123;&#125;轮"</span>.format(i_round))</span><br><span class="line">        <span class="string">"""执行步骤1"""</span></span><br><span class="line">        remove_points = __get_remove_points(temp_img, __mat_process_first)</span><br><span class="line">        <span class="keyword">if</span> len(remove_points) != <span class="number">0</span>:</span><br><span class="line">            is_remove_flag = <span class="literal">True</span></span><br><span class="line">            __remove_pix_by_coordination(temp_img, remove_points)</span><br><span class="line"></span><br><span class="line">        <span class="string">"""执行步骤2"""</span></span><br><span class="line">        remove_points = __get_remove_points(temp_img, __mat_process_second)</span><br><span class="line">        <span class="keyword">if</span> len(remove_points) != <span class="number">0</span>:</span><br><span class="line">            is_remove_flag = <span class="literal">True</span></span><br><span class="line">            __remove_pix_by_coordination(temp_img, remove_points)</span><br><span class="line"></span><br><span class="line">        i_round += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp_img</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ul>
<li>《数字图像处理》 冈萨雷斯版</li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>MCMC</title>
    <url>/posts/90e44d07.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>蒙特卡洛采样的作用</li>
<li>Inverse Sampling的适用范围</li>
<li>Inverse Sampling的过程</li>
<li>Rejection Sampling的大致思想</li>
<li>Rejection Sampling的流程</li>
<li>什么是影响Rejection Sampling效率的关键因素</li>
<li>Importance Sampling的大致思想</li>
<li>Importance Sampling的流程</li>
</ul>
<h2 id="蒙特卡洛采样">蒙特卡洛采样</h2>
<h3 id="蒙特卡洛的作用引子">蒙特卡洛的作用（引子）</h3>
<p>当我们要计算函数<span class="math inline">\(f(x)\)</span>的期望时,有： <span class="math display">\[
E[f(z)]=\int{P(z)f(z) \, {\rm dx}} \\
\approx\frac{1}{N}\sum_{i=1}^{N}f(z_i)
\]</span></p>
<blockquote>
<p>如果是<span class="math inline">\(z_i\)</span>是一个已知的分布，我们可以直接从上面采样（比如高斯分布，均匀分布），获得<span class="math inline">\(z\)</span>，然后计算期望值<span class="math inline">\(E[f(z)]\)</span>,但如果是一个不规则的分布，我们无法直接从上面采样，蒙特卡洛采样的目的就是解决求函数<span class="math inline">\(f(z)\)</span>的期望。</p>
</blockquote>
<p><strong>总而言之，蒙特卡洛采样就是对于一个非常罕见.</strong></p>
<p><strong>的分布解决怎样采样的问题</strong></p>
<p>蒙特卡洛采样有许多种，常用的有以下几种：</p>
<h3 id="inverse-sampling">Inverse Sampling</h3>
<blockquote>
<p>Inverse Sampling(逆采样)适用于<strong>累积分布函数已知（可求得）</strong>的情况，例如高斯分布，指数分布等</p>
</blockquote>
<p>首先介绍均匀分布的采样，因为<strong>所有Inverse Sampling都是根据均匀分布而来</strong>：</p>
<p><strong>均匀分布的采样可以看成生成一定范围的随机数</strong>（比如（0,1）的均匀分布采样可以看成在（0,1）之间生成随机数），每一个数生成的可能都是相等的。</p>
<p>此时，均匀分布的采样问题就变成了随机数的生成问题。</p>
<p>在计算机中，<strong>伪随机数</strong>的生成过程如下： <span class="math display">\[
x_{n+1}=(ax_n+c) \, \rm mod \,  m
\]</span> 其中，<span class="math inline">\(m\)</span>表示均匀分布的范围，<span class="math inline">\(a\)</span>和<span class="math inline">\(c\)</span>是数学推导出的常数，<span class="math inline">\(x_n\)</span>表示当前值。<strong>伪随机数是通过当前值计算下一个值</strong>，以此递推。</p>
<p>至此，我们就能在均匀分布上采样了。</p>
<p>但对于其他分布如何采样呢？</p>
<blockquote>
<p>Inverse Sampling是将概率密度函数转换为累积分布函数（CDF），然后利用CDF反映射求得采样值</p>
</blockquote>
<p>具体过程如下：</p>
<ul>
<li>对要采样的分布<span class="math inline">\(P(x)\)</span>计算其累积分布函数(CDF)-<span class="math inline">\(F\)</span>(x)</li>
<li>求出<span class="math inline">\(F(x)\)</span>的反函数<span class="math inline">\(F^{-1}(y)\)</span></li>
<li>在一个均匀分布<span class="math inline">\(U(0,1)\)</span>中采样，得到<span class="math inline">\(y_i\)</span>,再通过<span class="math inline">\(F^{-1}(y)\)</span>计算得到<span class="math inline">\(x_i\)</span></li>
</ul>
<p><span class="math inline">\(x_i\)</span>即为采样得到的值</p>
<p>构建的PDF如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Inverse-Sampling.png">

</div>
<p>但对于无法求得CDF的分布，Inverse Sampling无能为力，以下两种方法是解决CDF无法计算的情况下的采样方式。</p>
<h3 id="rejection-sampling">Rejection Sampling</h3>
<blockquote>
<p>Rejection Sampling的大致思想是用一个已知的分布来辅助未知的分布采样。</p>
</blockquote>
<p>流程如下：</p>
<p>设我们需要采样的未知分布为<span class="math inline">\(P(z)\)</span></p>
<ul>
<li><p>预设一个已知的分布<span class="math inline">\(z\)</span>服从于一个已知分布<span class="math inline">\(Q(z)\)</span>,(例如<span class="math inline">\(Q(z)\)</span>为一个正态分布)</p></li>
<li><p>对于<span class="math inline">\(\forall{z}\)</span> 服从于<span class="math inline">\(Q(z)\)</span>,给定一个正数<span class="math inline">\(m\)</span>,有<span class="math inline">\(mQ(z)\geq{P(z)}\)</span></p></li>
<li><p>在<span class="math inline">\(Q(z)\)</span>中采样得到采样的结果为<span class="math inline">\(z_{i}\)</span></p></li>
<li><p>计算接收率<span class="math inline">\(\alpha=\frac{P(z_{i})}{mQ(z_{i})}\)</span>(接收率即分布<span class="math inline">\(P(z)\)</span>占<span class="math inline">\(mQ(z)\)</span>的比例,且有<span class="math inline">\(0\leq\alpha\leq1\)</span>)</p></li>
<li><p>设有变量<span class="math inline">\(u\)</span>服从于均匀分布<span class="math inline">\(U(0,1)\)</span>,并从<span class="math inline">\(u\)</span>中采样得到<span class="math inline">\(u_i\)</span></p></li>
<li><p>如果<span class="math inline">\(u_i\leq{\alpha}\)</span>,则接受<span class="math inline">\(z_{i}\)</span>,否则拒绝<span class="math inline">\(z_{i}\)</span>,即 <span class="math display">\[
  \begin{cases} accept, &amp; if \, {\rm u_{i}}\leq{z_i} \\ reject ,&amp; other \end{cases}
  \]</span></p></li>
</ul>
<p>两个分布的情况如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/Rejection-Sampling.png">

</div>
<p><strong>注:</strong></p>
<blockquote>
<ul>
<li><span class="math inline">\(m\)</span>的值越大，会导致接收率<span class="math inline">\(\alpha\)</span>的值越小，采样的效率也就会越低。所以，应该在满足条件的情况下尽量小的选择<span class="math inline">\(m\)</span>的值</li>
<li>分布的维数越高，采样的效率也会越低</li>
<li>分布<span class="math inline">\(Q\)</span>和分布<span class="math inline">\(P\)</span>越接近，采样的效率也越高</li>
</ul>
</blockquote>
<h3 id="importance-sampling">Importance Sampling</h3>
<blockquote>
<p>Importance Sampling是用两个分布的比例作为采样的权重来辅助未知分布的采样</p>
</blockquote>
<p>函数期望<span class="math inline">\(E[f(z)]\)</span>可写成： <span class="math display">\[
E[f(z)] = \int{P(z)f(z)dz}
\]</span> 设有一个已知的分布<span class="math inline">\(Q(Z)\)</span>，有: <span class="math display">\[
E[f(z)]=\int{\frac{P(z)}{Q(z)}Q(z)\cdot f(z) \, \rm dz} \\
\approx\frac{1}{N}\sum_{i=1}^{N}{f(z_i)\frac{P(z_i)}{Q(z_i)}}
\]</span> 其中,<span class="math inline">\(z_i\)</span>服从于分布<span class="math inline">\(Q(z)\)</span>。也就是说，<span class="math inline">\(z_i\)</span>是从<span class="math inline">\(P(Z)\)</span>中采样而来。</p>
<blockquote>
<ul>
<li><span class="math inline">\(\frac{P(Z)}{Q(Z)}\)</span> 实际上是一个权值，它代表的是两个分布的相近程度，也就是重要程度，故该采样的叫Importance Sampling</li>
<li><span class="math inline">\(P(Z)\)</span>和<span class="math inline">\(Q(Z)\)</span>两个分布越接近，采样的效率越高</li>
</ul>
</blockquote>
<h2 id="mcmc">MCMC</h2>
<p>马氏链经过若干步之后会形成平稳分布（平稳分布是在某一步之后分布不在变化）</p>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://www.cnblogs.com/daniel-D/p/3388724.html</li>
<li>白板机器学习系列：MCMC</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Tensorflow Dataset模块笔记</title>
    <url>/posts/df0579b5.html/</url>
    <content><![CDATA[<h2 id="基本用法">基本用法</h2>
<h3 id="创建一个datasets">创建一个datasets：</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">datasets = tf.data.DataSets.from_tensor_slices([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">datasets</span><br></pre></td></tr></table></figure>
<h3 id="遍历datasets">遍历datasets：</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> dataset:</span><br><span class="line">  print(elem.numpy())</span><br></pre></td></tr></table></figure>
<h3 id="迭代器单独取出datasets中的数">迭代器单独取出datasets中的数：</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">it = iter(dataset)</span><br><span class="line"></span><br><span class="line">print(next(it).numpy())</span><br></pre></td></tr></table></figure>
<h3 id="reduce函数">reduce函数</h3>
<p>dataset可以用类似于spark中的map、reduce计算结果<strong>（但用法略有不同）</strong></p>
<blockquote>
<p>reduce函数的第一个参数就是后面lambda函数的state，然后reduce函数会遍历datasets中的每一个元素，转换为lambda函数中的value，直到返回结果。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datasets = tf.data.DataSets.from_tensor_slices([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(dataset.reduce(<span class="number">0</span>, <span class="keyword">lambda</span> state, value: state + value).numpy())</span><br></pre></td></tr></table></figure>
<h3 id="map函数">map函数</h3>
<blockquote>
<p>map函数也是同样的道理</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = dataset.map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> y:</span><br><span class="line">    print(elem.numpy())</span><br></pre></td></tr></table></figure>
<h2 id="数据的结构">数据的结构</h2>
<h3 id="typespec">TypeSpec</h3>
<p>通过数据的element_spec属性可以看数据的Type</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset1 = tf.data.Dataset.from_tensor_slices(tf.random.uniform([<span class="number">4</span>, <span class="number">10</span>]))</span><br><span class="line"></span><br><span class="line">dataset1.element_spec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为：</span></span><br><span class="line"><span class="comment"># TensorSpec(shape=(10,), dtype=tf.float32, name=None)</span></span><br></pre></td></tr></table></figure>
<h3 id="数据的合并">数据的合并</h3>
<p>多个子数据集可以合并成为一个总的数据集，<strong>这些子数据集可以有不同的TypeSpec</strong></p>
<blockquote>
<p>通过zip函数即可合并</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset1 = tf.data.Dataset.from_tensor_slices(</span><br><span class="line">    tf.random.uniform([<span class="number">4</span>, <span class="number">10</span>], minval=<span class="number">1</span>, maxval=<span class="number">10</span>, dtype=tf.int32))</span><br><span class="line">    </span><br><span class="line">dataset2 = tf.data.Dataset.from_tensor_slices(</span><br><span class="line">   (tf.random.uniform([<span class="number">4</span>]),</span><br><span class="line">    tf.random.uniform([<span class="number">4</span>, <span class="number">100</span>], maxval=<span class="number">100</span>, dtype=tf.int32)))</span><br><span class="line"></span><br><span class="line">dataset3 = tf.data.Dataset.zip((dataset1, dataset2))</span><br><span class="line"></span><br><span class="line"><span class="string">'''打印数据'''</span></span><br><span class="line"><span class="keyword">for</span> a, (b,c) <span class="keyword">in</span> dataset3:</span><br><span class="line">  print(<span class="string">'shapes: &#123;a.shape&#125;, &#123;b.shape&#125;, &#123;c.shape&#125;'</span>.format(a=a, b=b, c=c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果为</span></span><br><span class="line">shapes: (<span class="number">10</span>,), (), (<span class="number">100</span>,)</span><br><span class="line">shapes: (<span class="number">10</span>,), (), (<span class="number">100</span>,)</span><br><span class="line">shapes: (<span class="number">10</span>,), (), (<span class="number">100</span>,)</span><br><span class="line">shapes: (<span class="number">10</span>,), (), (<span class="number">100</span>,)</span><br></pre></td></tr></table></figure>
<h2 id="读取输入数据">读取输入数据</h2>
<h3 id="方式一直接从numpy读取">方式一：直接从Numpy读取</h3>
<p>如果数据足够小，最简单也最便捷的方式是直接从numpy中读取，调用<code>from_tensor_slices</code>即可</p>
<h3 id="方式二用生成器读取">方式二：用生成器读取</h3>
<p>由于内存的限制，所以大部分情况下，我们都会从generator中读取，<strong>但此方式有一定的局限性</strong>，有以下几点需要注意：</p>
<blockquote>
<ul>
<li>只能在同一进程下写一个生成器</li>
<li>需要遵守<a href="https://en.wikipedia.org/wiki/Global_interpreter_lock" target="_blank" rel="noopener">GIL</a>.</li>
</ul>
</blockquote>
<p>调用<code>tf.data.Dataset.from_generator</code>即可</p>
<p>关于<code>from_generator</code>函数：</p>
<blockquote>
<ul>
<li>args必须要用list，起码是一个iter</li>
<li>output_types是必选参数，官方的解释是tf.data模块会在内部生成一个<code>tf.Graph</code>,而<code>tf.Graph</code>需要<code>tf.dtype</code></li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(stop)</span>:</span></span><br><span class="line">  i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> i&lt;stop:</span><br><span class="line">    <span class="keyword">yield</span> i</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 如果generator的参数仅有一个，则args外层也一定要加一个list包住，否则报错</span></span><br><span class="line">ds_counter = tf.data.Dataset.from_generator(count, args=[<span class="number">25</span>], output_types=tf.int32, output_shapes = (), )  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> count_batch <span class="keyword">in</span> ds_counter.repeat().batch(<span class="number">10</span>).take(<span class="number">10</span>):</span><br><span class="line">  print(count_batch.numpy())</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>repeat</code>表示该生成器循环多少次，如果不填，则表示一直循环</p></li>
<li><p><code>batch</code>表示一次循环取多少个数据</p></li>
<li><p><code>take</code>表示基于前面的结果一次取多少个数据</p></li>
</ul>
<h3 id="方式三tfrecord">方式三：TFRecord</h3>
<h2 id="batch-data">Batch Data</h2>
<h3 id="simple-batch">Simple Batch</h3>
<blockquote>
<p>最简单的方式就是调用batch函数，batch中的值表示一个batch取几个，代码如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">inc_dataset = tf.data.Dataset.range(<span class="number">100</span>)</span><br><span class="line">dec_dataset = tf.data.Dataset.range(<span class="number">0</span>, <span class="number">-100</span>, <span class="number">-1</span>)</span><br><span class="line">dataset = tf.data.Dataset.zip((inc_dataset, dec_dataset))</span><br><span class="line">batched_dataset = dataset.batch(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> batched_dataset.take(<span class="number">4</span>):</span><br><span class="line">  print([arr.numpy() <span class="keyword">for</span> arr <span class="keyword">in</span> batch])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果在取batch的过程中想忽略掉最后一个batch(因为最后一个数可能数据不齐)，则加入参数<code>drop_remainder</code>即可。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batched_dataset = dataset.batch(<span class="number">7</span>, drop_remainder=<span class="literal">True</span>)</span><br><span class="line">batched_dataset</span><br></pre></td></tr></table></figure>
<h3 id="batching-tensors-with-padding">Batching tensors with padding</h3>
<blockquote>
<p>当遇到输入数据的维度不齐时，可以调用<code>padded_batch</code>函数，该函数可以将不整齐的输入数据补齐，如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataset = tf.data.Dataset.range(<span class="number">100</span>)</span><br><span class="line">dataset = dataset.map(<span class="keyword">lambda</span> x: tf.fill([tf.cast(x, tf.int32)], x))</span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> dataset.take(<span class="number">5</span>):</span><br><span class="line">  print(batch.numpy())</span><br><span class="line">  print()</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"==================================="</span>)</span><br><span class="line">dataset = dataset.padded_batch(<span class="number">4</span>, padded_shapes=(<span class="literal">None</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> dataset.take(<span class="number">2</span>):</span><br><span class="line">  print(batch.numpy())</span><br><span class="line">  print()</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[]</span><br><span class="line"></span><br><span class="line">[1]</span><br><span class="line"></span><br><span class="line">[2 2]</span><br><span class="line"></span><br><span class="line">[3 3 3]</span><br><span class="line"></span><br><span class="line">[4 4 4 4]</span><br><span class="line"></span><br><span class="line">===================================</span><br><span class="line">[[0 0 0]</span><br><span class="line"> [1 0 0]</span><br><span class="line"> [2 2 0]</span><br><span class="line"> [3 3 3]]</span><br><span class="line"></span><br><span class="line">[[4 4 4 4 0 0 0]</span><br><span class="line"> [5 5 5 5 5 0 0]</span><br><span class="line"> [6 6 6 6 6 6 0]</span><br><span class="line"> [7 7 7 7 7 7 7]]</span><br></pre></td></tr></table></figure>
<h2 id="training-workflows">Training workflows</h2>
<h3 id="processing-multiple-epochs">Processing multiple epochs</h3>
<blockquote>
<p>repeat函数即可实现epoch循环</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_batch_sizes</span><span class="params">(ds)</span>:</span></span><br><span class="line">  batch_sizes = [batch.shape[<span class="number">0</span>] <span class="keyword">for</span> batch <span class="keyword">in</span> ds]</span><br><span class="line">  plt.bar(range(len(batch_sizes)), batch_sizes)</span><br><span class="line">  plt.xlabel(<span class="string">'Batch number'</span>)</span><br><span class="line">  plt.ylabel(<span class="string">'Batch size'</span>)</span><br><span class="line"></span><br><span class="line">titanic_file = tf.keras.utils.get_file(<span class="string">"train.csv"</span>, <span class="string">"https://storage.googleapis.com/tf-datasets/titanic/train.csv"</span>)</span><br><span class="line">titanic_lines = tf.data.TextLineDataset(titanic_file)</span><br><span class="line"></span><br><span class="line">titanic_batches = titanic_lines.repeat(<span class="number">3</span>).batch(<span class="number">128</span>)</span><br><span class="line">plot_batch_sizes(titanic_batches)</span><br></pre></td></tr></table></figure>
<p>得到的结果如下图所示：</p>
<div class="figure">
<img src="/Tensorflow-Dataset模块笔迹/1.png">

</div>
<p>教程中还提到另外一种方式：</p>
<div class="figure">
<img src="/Tensorflow-Dataset模块笔迹/2.png">

</div>
<h3 id="randomly-shuffling-input-data">Randomly shuffling input data</h3>
<p>调用<code>shuffle</code>函数即可，这里重点说明一下<code>shuffle</code>函数中的<code>buffer_size</code>参数：</p>
<p>tensorflow中的打乱顺序是通过采样实现的。也就是说，给定一个<code>batch_size</code>，在数据集中抽取这么多个（<code>batch_size</code>个数据）数据，从而达到打乱顺序的目的。但有时候，原数据集太大，这么抽很耗时，所以就有了<code>buffer</code>，buffer的作用是代替原数据集来进行抽样，即<code>batch</code>中的数据是从<code>buffer</code>里面抽，这个buffer越大，越能够代表原数据集，所以<code>buffer_size</code>参数实际上是代表<code>buffer</code>的大小的。</p>
<p>以下是原文：</p>
<blockquote>
<p>This dataset fills a buffer with <code>buffer_size</code> elements, then randomly samples elements from this buffer, replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or equal to the full size of the dataset is required.</p>
<p>For instance, if your dataset contains 10,000 elements but <code>buffer_size</code> is set to 1,000, then <code>shuffle</code> will initially select a random element from only the first 1,000 elements in the buffer. Once an element is selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element, maintaining the 1,000 element buffer.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lines = tf.data.TextLineDataset(titanic_file)</span><br><span class="line">counter = tf.data.experimental.Counter()</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.zip((counter, lines))</span><br><span class="line">dataset = dataset.shuffle(buffer_size=<span class="number">100</span>)</span><br><span class="line">dataset = dataset.batch(<span class="number">20</span>)</span><br><span class="line">dataset</span><br></pre></td></tr></table></figure>
<h2 id="preprocessing-data">Preprocessing data</h2>
<h3 id="数据map">数据map</h3>
<p>见 <a href="#map函数">map函数</a></p>
<h3 id="py_function函数">py_function函数</h3>
<blockquote>
<p><code>py_function</code>使得tensorflow可以调用非tensorflow库，如下：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">tf.py_function(f,[x],[tf.int32])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>编程</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>产品笔记</title>
    <url>/posts/e989d30a.html/</url>
    <content><![CDATA[<h2 id="产品文章">产品文章</h2>
<ul>
<li><p><a href="https://www.zhihu.com/question/36016196/answer/311844945?utm_source=cn.ticktick.task&amp;utm_medium=social&amp;utm_oi=734158589647675392" target="_blank" rel="noopener">B端和C端的本质区别</a></p></li>
<li><p><a href="http://www.woshipm.com/operate/1875475.html" target="_blank" rel="noopener">2B中产品和定制的利弊权衡</a></p></li>
</ul>
]]></content>
      <categories>
        <category>产品</category>
      </categories>
      <tags>
        <tag>产品</tag>
      </tags>
  </entry>
  <entry>
    <title>RANSAC算法</title>
    <url>/posts/e108c696.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>RANSAC有什么用</li>
<li>RANSAC的中文名叫什么</li>
<li>RANSAC的流程</li>
</ul>
<h2 id="ransac">RANSAC</h2>
<h3 id="概述">概述</h3>
<blockquote>
<p>RANSAC(Random Sample Consensus，随机采样一致）可以将数据中的噪声排除在外，从而使模型拟合正常点。</p>
<p>RANSAC的基本假设是数据由“内点”和“外点”组成，内点即为正常数据，外点(outliers)非正常数据（包括异常点、噪声等），而RANSAC的目的是将“外点”排除在外，仅拟合内点。</p>
</blockquote>
<h3 id="流程">流程</h3>
<p>RANSAC是通过反复选择数据集去估计出模型，一直迭代到估计出认为比较好的模型。 具体的实现步骤可以分为以下几步：</p>
<ol style="list-style-type: decimal">
<li>选择出可以估计出模型的最小数据集；(对于直线拟合来说就是两个点，对于计算Homography矩阵就是4个点)</li>
<li>使用这个数据集来计算出数据模型；</li>
<li>将所有数据带入这个模型，计算出“内点”的数目；(累加在一定误差范围内的适合当前迭代推出模型的数据)</li>
<li>比较当前模型和之前推出的最好的模型的“内点“的数量，记录最大“内点”数的模型参数和“内点”数；</li>
<li>重复1-4步，直到迭代结束或者当前模型已经足够好了(“内点数目大于一定数量”)。</li>
</ol>
<h2 id="实验代码">实验代码</h2>
<h3 id="数据准备">数据准备</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_real = <span class="number">100</span></span><br><span class="line">n_fake = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">x = np.random.uniform(low=<span class="number">0</span>,high = <span class="number">100</span>,size = n_real + n_fake)</span><br><span class="line"></span><br><span class="line">k,b = <span class="number">3</span>,<span class="number">7</span></span><br><span class="line">y = k * x + b</span><br><span class="line"></span><br><span class="line">x = np.random.normal(scale = <span class="number">20</span>,size = x.shape) + x</span><br><span class="line">y = np.random.normal(scale = <span class="number">20</span>,size = y.shape) + y</span><br><span class="line"></span><br><span class="line">y_fake = np.asarray([<span class="number">500</span>] *n_fake) + np.random.normal(scale=<span class="number">20</span>,size=n_fake)</span><br><span class="line">y[n_real:] = y_fake</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:n_real],y[:n_real],label = <span class="string">"Real"</span>)</span><br><span class="line">plt.scatter(x[n_real:],y[n_real:],label = <span class="string">"Fake"</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure>
<p>数据分布的散点图如下图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/数据散点图.png">

</div>
<h3 id="对比">对比</h3>
<p>这里用线性回归来拟合散点图，对比不用 RANSAC和用RANSAC的区别，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">alpha = <span class="number">5</span> <span class="comment"># 判断的宽限条件</span></span><br><span class="line">best_model = <span class="literal">None</span></span><br><span class="line">best_fit_num = <span class="number">0</span> <span class="comment">#最多的拟合个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span>:</span><br><span class="line">    model = LinearRegression()</span><br><span class="line">    </span><br><span class="line">    sample_i = np.random.choice(range(len(x)),size = <span class="number">2</span>)</span><br><span class="line">    sample_x = x[sample_i]</span><br><span class="line">    sample_y = y[sample_i]</span><br><span class="line">    temp_x = sample_x.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    model.fit(temp_x,sample_y)</span><br><span class="line">    predict_y = model.predict(x.reshape(<span class="number">-1</span>,<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    current_fit_num = np.sum(np.abs(predict_y - y) &lt; alpha)</span><br><span class="line">    <span class="keyword">if</span> current_fit_num &gt; best_fit_num:</span><br><span class="line">        best_model = model</span><br><span class="line">        best_fit_num = current_fit_num</span><br><span class="line">    </span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">normal_model = LinearRegression()</span><br><span class="line">temp_x = x.reshape(<span class="number">-1</span>,<span class="number">1</span>)</span><br><span class="line">normal_model.fit(temp_x,y)</span><br></pre></td></tr></table></figure>
<p>得到的结果如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/拟合结果.png">

</div>
<p>代码见：https://github.com/qcymkxyc/AlgorithmImplement/blob/master/notebooks/RANSAC.ipynb</p>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://lixin97.com/2019/04/10/RANSAC/</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Haar特征</title>
    <url>/posts/da5401e0.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>Haar特征的流程</li>
<li>积分图的作用是什么</li>
<li>用分类器做目标检测的思路</li>
<li>为何人脸识别会用Adaboost</li>
</ul>
<h2 id="haar特征">Haar特征</h2>
<h3 id="haar特征的流程">Haar特征的流程</h3>
<p>Haar特征实际上非常简单：</p>
<blockquote>
<p>即用一个类似于卷积层的模板滑过图片，用白色区域的和减去黑色区域的和即为Haar特征</p>
</blockquote>
<p>但在Haar特征的模板多种多样，不同的模板有不同的作用，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1328274-20180802215641326-115308739.png">

</div>
<p>上图中A和B检验的是竖直和水平的边缘，C模板是检测一条线模板</p>
<h3 id="积分图">积分图</h3>
<blockquote>
<p>积分图的作用是加快Haar特征的计算的</p>
</blockquote>
<p>因为在计算Haar特征时，如果不用积分图，一个区域的像素点会相加很多次，这在效率上很不划算，所以就会计算积分图（一句话，用空间换时间）</p>
<p>至于具体如何做，就是从左上角往右下角叠加</p>
<h2 id="关于基于adaboost的人脸检测">关于基于Adaboost的人脸检测</h2>
<h3 id="基于分类器的检测算法的大体流程">基于分类器的检测算法的大体流程</h3>
<p>众所周知，分类器是不能直接进行目标检测的。用分类器做目标检测的大体思路是：先用不同大小的Bounding Box扫过图像（类似于穷举），再用分类器对Bounding Box内的图像进行判断，判断该Bounding Box中是否有目标（2分类问题）</p>
<p>在训练分类器时，有Ground Truth即标为正样本，无Ground Truth标为负样本</p>
<h3 id="haar-adaboost级联人脸识别">Haar +Adaboost级联人脸识别</h3>
<p>该流程分为两部分：</p>
<ul>
<li>用<strong>不同大小，不同形态</strong>的模板对图片提取Haar特征</li>
<li>用Adaboost模型基于上述的目标检测思路进行识别</li>
</ul>
<p>那为什么这么多分类器会选Adaboost？</p>
<blockquote>
<p>主要还是因为效率问题。由于在第一步会提取非常多的Haar特征，如果后续的分类器速度太慢，效率非常低，识别速度会很慢；如果用复杂度较低的模型，识别效果又会非常不理想。所以，这里的识别器要兼顾两点：</p>
<ul>
<li>速度较快</li>
<li>识别效果好</li>
</ul>
<p>能很好的兼顾以上两点的只有级联分类器（大神就是大神）</p>
<ul>
<li>在该级联分类器的前面，都是一些较为简单但效果很差的模型（或许只比猜好一点点），简单模型的好处是速度快，它可以过滤掉明显不是目标的样本，这样，数据就不会往后传了（这就可以保证速度快的特点）</li>
<li>随着数据流逐渐往后走，模型会相对的复杂，此时识别效果会上升。并且，由于Adaboost本身也是一个集成模型，随着分类器的增多，识别的精度也会上升，这就保证了识别的精度（此时可以保证识别效果）</li>
</ul>
</blockquote>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://www.cnblogs.com/zyly/p/9410563.html</li>
<li>https://blog.csdn.net/liulina603/article/details/8617281</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>机器学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>对JS散度的KL散度总结以及实现</title>
    <url>/posts/46a23.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li>KL散度有什么性质</li>
<li>KL散度主要的作用是什么</li>
<li>JS散度有什么性质</li>
<li>JS散度如何计算</li>
</ul>
<h2 id="kl散度">KL散度</h2>
<blockquote>
<p>KL( Kullback–Leibler divergence)散度又名相对熵（relative entropy)，用来衡量两个分布之间的距离</p>
</blockquote>
<p>公式为： <span class="math display">\[
D(P||Q)=\sum_{i\in{X}}{P(i)[log(\frac{P(i)}{Q(i)})]}
\]</span> 如果是P和Q为连续分布，则公式为： <span class="math display">\[
D(P||Q)=\int_x{P(x)*\left[log(\frac{P(x)}{Q(x)})\right] dx}
\]</span> <strong>KL散度的性质</strong></p>
<ul>
<li><strong>KL散度不具有对称性</strong>，即<span class="math inline">\(D(P||Q)\neq D(Q||P)\)</span></li>
<li>KL散度不满足三角不等式，即<span class="math inline">\(D(A||B) &gt; D(A||C)+D(C||B)\)</span></li>
</ul>
<h2 id="js散度">JS散度</h2>
<blockquote>
<p>由于KL散度不具有对称性，于是就有了JS散度</p>
</blockquote>
<p><strong>JS散度即为两个方向的KL散度取平均</strong>,即： <span class="math display">\[
JS(P||Q)=\frac{1}{2}D(P||Q)+\frac{1}{2}D(Q||P)
\]</span></p>
<h2 id="代码实现">代码实现</h2>
<h3 id="一维kl散度实现">一维KL散度实现</h3>
<blockquote>
<p>通常情况下，我们遇到的数据均是属于连续数据，而连续数据无法直接计算KL散度，这里用 蒙特卡洛采样来计算，采样所用的分布用p的分布（也就是第一列数据）</p>
</blockquote>
<p>下面是一维的KL散度的实现，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_kl_divergence</span><span class="params">(p_seq, q_seq, n_sample=<span class="number">5000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""计算KL散度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    由于签字数据中多是连续数据，对于连续数据无法直接计算KL散度，这里用</span></span><br><span class="line"><span class="string">    蒙特卡洛采样来计算。对于采样与数据的分布说明如下：</span></span><br><span class="line"><span class="string">        - 蒙特卡洛采样的分布用P的分布采样</span></span><br><span class="line"><span class="string">        - P和Q均是采用正态分布拟合</span></span><br><span class="line"><span class="string">        - 默认的采样个数为50000个</span></span><br><span class="line"><span class="string">    :param p_seq: List or pandas.Serise</span></span><br><span class="line"><span class="string">    :param q_seq: List or pandas.Serise</span></span><br><span class="line"><span class="string">    :param n_sample: int, 蒙特卡洛的采样点，默认为50000个</span></span><br><span class="line"><span class="string">    :return: float,KL散度</span></span><br><span class="line"><span class="string">    :raise TypeError: 参数类型错误</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># TODO 没有考虑离散的分布</span></span><br><span class="line">    <span class="string">"""错误的类型判断"""</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (isinstance(p_seq, (list, pd.Series))</span><br><span class="line">            <span class="keyword">and</span> isinstance(q_seq, (list, pd.Series))):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"数据类型错误"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""分布拟合"""</span></span><br><span class="line">    p_loc, p_std = stats.norm.fit(p_seq)</span><br><span class="line">    q_loc, q_std = stats.norm.fit(q_seq)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""采样并计算概率密度"""</span></span><br><span class="line">    samples = stats.norm.rvs(loc=p_loc, scale=p_std, size=n_sample)</span><br><span class="line">    <span class="comment"># 计算概率密度</span></span><br><span class="line">    p_y = stats.norm.pdf(samples, loc=p_loc, scale=p_std)</span><br><span class="line">    q_y = stats.norm.pdf(samples, loc=q_loc, scale=q_std)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""计算KL散度"""</span></span><br><span class="line">    <span class="keyword">return</span> np.sum(p_y * np.log(p_y / q_y))</span><br></pre></td></tr></table></figure>
<h3 id="多维kl散度实现">多维KL散度实现</h3>
<p>多维原理同一维的KL散度，这里不再阐述，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_multi_kl_divergence</span><span class="params">(p_matrix, q_matrix, n_sample=<span class="number">10000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""多维情况下计算KL散度，设置同单维的KL散度计算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param p_matrix: pandas.DataFrame or numpy.array, 矩阵P</span></span><br><span class="line"><span class="string">    :param q_matrix: pandas.DataFrame or numpy.array, 矩阵Q</span></span><br><span class="line"><span class="string">    :param n_sample: int, 蒙特卡洛采样的个数,默认为10000</span></span><br><span class="line"><span class="string">    :return: float, KL散度</span></span><br><span class="line"><span class="string">    :raise</span></span><br><span class="line"><span class="string">        - TypeError： 参数类型不对</span></span><br><span class="line"><span class="string">        - ValueError: P和Q的维数不统一</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="string">"""类型判断"""</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(p_matrix, (pd.DataFrame, np.ndarray)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"参数类型错误"</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(q_matrix, (pd.DataFrame, np.ndarray)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">"参数类型错误"</span>)</span><br><span class="line">    <span class="string">"""维数判断，两个输入的维数一定要相等"""</span></span><br><span class="line">    <span class="keyword">if</span> p_matrix.shape[<span class="number">1</span>] != q_matrix.shape[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"P和Q的维数不统一"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""生成两个矩阵的分布"""</span></span><br><span class="line">    p_mean = np.mean(p_matrix, axis=<span class="number">0</span>)</span><br><span class="line">    q_mean = np.mean(q_matrix, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    p_cov = np.cov(p_matrix.T, bias=<span class="literal">False</span>)</span><br><span class="line">    q_cov = np.cov(q_matrix.T, bias=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    p_distribution = stats.multivariate_normal(mean=p_mean, cov=p_cov)</span><br><span class="line">    q_distribution = stats.multivariate_normal(mean=q_mean, cov=q_cov)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""采样"""</span></span><br><span class="line">    samples = p_distribution.rvs(size=n_sample)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""计算概率密度"""</span></span><br><span class="line">    p_probs = p_distribution.pdf(samples)</span><br><span class="line">    q_probs = q_distribution.pdf(samples)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> np.sum(p_probs * np.log(p_probs / q_probs))</span><br></pre></td></tr></table></figure>
<h3 id="js散度-1">JS散度</h3>
<p>JS计算就很简单了，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_js_divergence</span><span class="params">(p_seq, q_seq, n_sample=<span class="number">50000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""计算JS散度，详细参考KL散度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param p_seq: List or pandas.Serise</span></span><br><span class="line"><span class="string">    :param q_seq: List or pandas.Serise</span></span><br><span class="line"><span class="string">    :param n_sample: int, 蒙特卡洛的采样点，默认为50000个</span></span><br><span class="line"><span class="string">    :return: float,KL散度</span></span><br><span class="line"><span class="string">    :raise TypeError: 参数类型错误</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    kl_diver1 = <span class="number">0.5</span> * get_kl_divergence(p_seq, q_seq)</span><br><span class="line">    kl_diver2 = <span class="number">0.5</span> * get_kl_divergence(q_seq, p_seq)</span><br><span class="line">    <span class="keyword">return</span> kl_diver1 + kl_diver2</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_multi_js_divergence</span><span class="params">(p_matrix, q_matrix, n_sample=<span class="number">10000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""多维情况下计算JS散度，设置同单维的JS散度计算</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       :param p_matrix: pandas.DataFrame or numpy.array, 矩阵P</span></span><br><span class="line"><span class="string">       :param q_matrix: pandas.DataFrame or numpy.array, 矩阵Q</span></span><br><span class="line"><span class="string">       :param n_sample: int, 蒙特卡洛采样的个数,默认为10000</span></span><br><span class="line"><span class="string">       :return: float, KL散度</span></span><br><span class="line"><span class="string">       :raise</span></span><br><span class="line"><span class="string">           - TypeError： 参数类型不对</span></span><br><span class="line"><span class="string">           - ValueError: P和Q的维数不统一</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    js_diver1 = <span class="number">0.5</span> * get_multi_kl_divergence(p_matrix, q_matrix, n_sample)</span><br><span class="line">    js_diver2 = <span class="number">0.5</span> * get_multi_kl_divergence(q_matrix, p_matrix, n_sample)</span><br><span class="line">    <span class="keyword">return</span> js_diver1 + js_diver2</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://blog.csdn.net/qq_40406773/article/details/80630280</li>
<li>https://blog.csdn.net/leviopku/article/details/81388306</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>self-Attention总结</title>
    <url>/posts/d9717497.html/</url>
    <content><![CDATA[<p><strong>DeepLearningAi</strong>上的Attention机制似乎和李宏毅教程上的有一定出入，本文以李宏毅教程上的为准</p>
<h2 id="question">Question</h2>
<ul>
<li>和LSTM层相比，Attention机制的优势是什么</li>
<li>Attention 机制一般用在什么任务中</li>
<li>Attention的流程</li>
<li>Multi Head Attention好于self-Attention机制的解释是什么</li>
<li>Multi Head Attention的流程</li>
</ul>
<h2 id="概述">概述</h2>
<p>Transformer模型的主要创新点就是Self-Attention机制</p>
<p>只要以前可以用seq-to-seq模型的地方，均可以用Attention机制代替。Attention机制的优点分为以下几点：</p>
<ul>
<li>可以并行计算（而LSTM层需要等上一次的输出）</li>
<li>由于Self-Attention的第一层采用卷积的思想，所以即使相隔很远也可以建立联系（总结一句话就是：天涯若比邻）</li>
<li>在Seq-to-Seq模型的翻译任务中，在Decoder部分，如果用LSTM层，Bleu Score会因为句子的增长而降低。Attention机制可以避免这个问题（出自NG DeepLearning课程）</li>
</ul>
<p><strong>只要能用Seq2Seq的地方，都可以用Attention机制代替</strong>，如下图所示：</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-859dc652d45bcb8a.png" style="zoom: 80%;"></p>
<h2 id="基本attention机制的流程">基本Attention机制的流程</h2>
<h3 id="第一步">第一步</h3>
<p>Attention机制先将<span class="math inline">\(a^i\)</span>输入乘以三个个权重，得到一个三个值<span class="math inline">\(q^i,k^i,v^i\)</span>,如下图所示：</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-3af6168784972c3d.png" style="zoom:80%;"></p>
<h3 id="第二步">第二步</h3>
<p>计算<span class="math inline">\(q^i\)</span>和<span class="math inline">\(k^j\)</span>的内积，得到一个值<span class="math inline">\(a_{i,j}\)</span>。</p>
<blockquote>
<p>实质上，计算<span class="math inline">\(q^i\)</span>和<span class="math inline">\(k^j\)</span>的内积是计算<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>的相似度。对于 <span class="math inline">\(t=1\)</span>的，它会计算从<span class="math inline">\(t=1\)</span>到<span class="math inline">\(t=T\)</span>的相似程度（注意，会计算自身到自身的相似程度），</p>
<p>那么，对于一个长度为<span class="math inline">\(T\)</span>的序列，会计算一个<span class="math inline">\(T \times T\)</span>的相似矩阵。</p>
</blockquote>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-162d501ebec07596.png" style="zoom:80%;"></p>
<h3 id="第三步">第三步</h3>
<p>将<span class="math inline">\(a_{i,j}\)</span>,通过一个<span class="math inline">\(softmax\)</span>函数<strong>归一化</strong>，得到归一化后的结果<span class="math inline">\(\hat{a_{i,j}}\)</span>,该结果作为权重，如下图所示：</p>
<blockquote>
<p>这里即将上述矩阵按行归一化，归一化的结果可以看成权重。</p>
</blockquote>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-7ae69a8fe1679bab.png">

</div>
<h3 id="第四步">第四步</h3>
<p>用第三步得到的权重和<span class="math inline">\(v^i\)</span>进行加权计算，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-c0d9670deb5a794c.png">

</div>
<p>所得的结果<span class="math inline">\(b^1\)</span>就是<span class="math inline">\(a^1\)</span>对应的结果，后面的<span class="math inline">\(b^2\)</span>,<span class="math inline">\(b^3\)</span>等以此类推</p>
<h2 id="multi-head-attention">Multi Head Attention</h2>
<blockquote>
<p>之所以会有Multi Head，文中的理由是会分成多个子空间，可以让Multi Head关注不同方面的信息</p>
</blockquote>
<p>Multi Head Attention的流程如下：</p>
<ul>
<li><p>Multi Head在之前<span class="math inline">\(q^{i},k^i,v^i\)</span>的基础上再乘以<span class="math inline">\(n\)</span>个矩阵（有多少个Head就乘以多少个矩阵），得到<span class="math inline">\(q^{i,1},q^{i,2}...,q^{i,n}\)</span>(以<span class="math inline">\(q^i\)</span>为例，其他相同)</p></li>
<li>然后以每个Head为单位分别计算，得到<span class="math inline">\(b^{i,1},b^{i,2},...,b^{i,n}\)</span></li>
<li><p>最终将<span class="math inline">\(b^{i,1},b^{i,2},...,b^{i,n}\)</span>乘以一个矩阵<span class="math inline">\(w\)</span>得到最终的结果<span class="math inline">\(b^i\)</span></p></li>
</ul>
<p>如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/11864412-7c5882bac6e86c4a.png">

</div>
<h2 id="position-encoding">Position Encoding</h2>
<p>但在<code>Self-Attention</code>中，并没有体现位置的关系（因为全部用相似度加权），这就丧失了序列本身的特性，所以加上序列信息是必要的。在<code>Attention</code>机制中，是将位置信息生成一个向量，将这个向量加在<code>token Embedding</code>中，即： <span class="math display">\[
\text {final Embedding}= \text{Position Encoding} + \text{token Embedding}
\]</span> 那么，下一个问题是，<code>position Encoding</code>如何生成？</p>
<p><a href="https://papers.nips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf" target="_blank" rel="noopener">Attention is All you Need</a>中是用如下方式生成的： <span class="math display">\[
PE_{(pos,2i)}=sin(\frac{pos}{10000^{2i/d_{model}}})     \tag {1}
\]</span></p>
<p><span class="math display">\[
PE_{(pos,2i+1)}=cos(\frac{pos}{10000^{2i/d_{model}}})   \tag {2}
\]</span></p>
<p>其中，</p>
<ul>
<li><span class="math inline">\(pos\)</span>表示位置信息，也就是位置的<code>index</code>,例如第一个为0，第二个为1，以此类推。</li>
<li><span class="math inline">\(i\)</span>为一个自然数，<span class="math inline">\(PE_{(pos,2i)}\)</span>表示位置信息<span class="math inline">\(pos\)</span>在生成的<code>Position Encoding</code>向量中位置在<span class="math inline">\(2i\)</span>的值。同理<span class="math inline">\(PE_{(pos,2i+1)}\)</span>表示在<span class="math inline">\(2i+1\)</span>的值。（即偶数位置和奇数位置的计算方式不同）</li>
<li><span class="math inline">\(d_{model}\)</span>代表<code>token Embedding</code>的维度</li>
</ul>
<p>那么，位置为<span class="math inline">\(1\)</span>的<code>Position Encoding</code>为： <span class="math display">\[
PE(1)={\left[sin(\frac{1}{10000^{0/512}}),cos(\frac{1}{10000^{0/512}}),sin(\frac{1}{10000^{2/512}}),cos(\frac{1}{10000^{2/512}}),...\right]}
\]</span> 其中，<span class="math inline">\(PE(1)\)</span>是一个<span class="math inline">\(1 \times d_{model}\)</span>的向量，和<code>token Embedding</code>的向量维度等同。</p>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li><a href="https://arxiv.org/abs/1706.03762" target="_blank" rel="noopener">Self-Attention机制的论文</a></li>
<li>https://www.jianshu.com/p/50130426e5e8</li>
<li><a href="http://speech.ee.ntu.edu.tw/~tlkagk/courses_ML19.html" target="_blank" rel="noopener">李宏毅官网</a></li>
<li><a href="https://www.zhihu.com/question/341222779" target="_blank" rel="noopener">知乎上的一个对于Multi Head Attention的详细解释</a></li>
<li><a href="https://arxiv.org/pdf/1905.09418.pdf" target="_blank" rel="noopener">Multi Head Attention论文</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/98641990" target="_blank" rel="noopener">对Transformer中的Positional Encoding一点解释和理解</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>对Pearson，Spearman，协方差等相关性的总结</title>
    <url>/posts/75634b1e.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<blockquote>
<ol style="list-style-type: decimal">
<li>在numpy中协方差矩阵是以行为单位计算还是以列为单位计算</li>
<li>在numpy中计算协方差是有偏的还是无偏的</li>
<li>协方差以及Pearson相识度的计算流程</li>
<li>Pearson相关度和协方差的区别</li>
<li>什么时候适合用spearman相关度</li>
<li>spearman相似度计算的流程</li>
</ol>
</blockquote>
<h2 id="协方差">协方差</h2>
<p>首先说最简单的——协方差，协方差的计算比较简单： <span class="math display">\[
Cov(x,y)=E[(x-\overline{x})\cdot(y-\overline{y})]
\]</span> 或者将 <span class="math inline">\(x\)</span> 和<span class="math inline">\(y\)</span>的协方差表示为,设<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>均为<strong>维度为n的向量</strong>，则两个向量的协方差可以表示为： <span class="math display">\[
Cov(x,y)=\frac{1}{n}\sum_{i=1}^{n}{(x_i-\overline{x})(y_i-\overline{y})}
\]</span> 对于一个矩阵如何计算向量呢，在numpy中，是将矩阵<strong>以行为单位看成是一个feature</strong>（即一行一个feature），计算相关性（<strong>所以，在计算特征的相关度时需要transform一下</strong>）。并且，在numpy中计算方差基本都是使用无偏估计（也就是自由度为1）。下面是演示代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">print(np.cov(x))</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1.66666667</span> <span class="number">1.66666667</span> <span class="number">1.66666667</span>]</span><br><span class="line"> [<span class="number">1.66666667</span> <span class="number">1.66666667</span> <span class="number">1.66666667</span>]</span><br><span class="line"> [<span class="number">1.66666667</span> <span class="number">1.66666667</span> <span class="number">1.66666667</span>]]</span><br></pre></td></tr></table></figure>
<p>总结一下：</p>
<ol style="list-style-type: decimal">
<li>numpy的协方差矩阵计算是以行为单位计算</li>
<li>在计算协方差时是用<span class="math inline">\(n-1\)</span>计算的</li>
</ol>
<h2 id="pearson相关性">Pearson相关性</h2>
<p><strong>Pearson相关度可以看成是归一化后的协方差</strong>，公式为： <span class="math display">\[
Pearson-correlation = \frac{cov(x,y)}{\sqrt{cov(x,x)*cov(y,y)}}
\]</span></p>
<h2 id="spearman相关性">Spearman相关性</h2>
<blockquote>
<p>Spearman主要是用于测量两个时间距离的相似度，因为如果用Pearson相似度测量两个时间序列的相似度，数字的序列性将无法体现。</p>
</blockquote>
<h3 id="算法流程">算法流程</h3>
<ol style="list-style-type: decimal">
<li>对两个序列（向量）进行排序，获取每个数字在序列中的个数，例如<span class="math inline">\(x=[12,2,7,90]\)</span>得到的结果为<span class="math inline">\(rankx=[3,1,2,4]\)</span></li>
<li>对两个序列排序的结果进行pearson相似度的计算</li>
</ol>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://www.cnblogs.com/weiyinfu/p/10693445.html</li>
<li>https://blog.csdn.net/lambsnow/article/details/79972145</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>相似度</tag>
        <tag>距离度量</tag>
      </tags>
  </entry>
  <entry>
    <title>距离总结</title>
    <url>/posts/348aa22b.html/</url>
    <content><![CDATA[<h2 id="queston">Queston</h2>
<ol style="list-style-type: decimal">
<li>欧氏距离和曼哈顿距离的在几何上的区别</li>
<li><a href="#Jaccard距离">Jaccard距离</a>在什么场景用</li>
</ol>
<h2 id="闵可夫斯基距离">闵可夫斯基距离</h2>
<p>曼哈顿距离和欧式距离可以看成是特殊的闵可夫斯基距离。</p>
<p>设有两个向量<span class="math inline">\(P=(x_1,x_2,...,x_n)\)</span>和<span class="math inline">\(Q=(y_1,y_2,..,y_n)\)</span>,则两个向量的欧式距离和曼哈顿距离可以分别表示为： <span class="math display">\[
\left(\sum_{i=1}^{n}{(x_i-y_i)}^2\right)^{\frac{1}{2}}
\]</span></p>
<p><span class="math display">\[
\sum_{i=1}^{n}{|x_i-y_i|}
\]</span></p>
<p>而闵可夫斯基距离表示为： <span class="math display">\[
\left(\sum_{i=1}^{n}{|x_i-y_i|}^p\right)^{\frac{1}{p}}
\]</span> 所以，欧式距离和曼哈顿距离可以表示成特殊的闵可夫斯基距离，关于曼哈顿距离和欧氏距离的区别网上有一张形象的图，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20140423145904625.jpg">

</div>
<p><strong>图中，绿线表示欧氏距离，红蓝黄三条线表示曼哈顿距离</strong></p>
<h2 id="jaccard距离">Jaccard距离</h2>
<p><code>Jaccard距离</code>和<code>Jaccard相似度</code>相反.下面说明<code>Jaccard相似度</code></p>
<p><strong><code>Jaccard相似度</code>衡量的是两个集合的相似度</strong>。设有两个集合<span class="math inline">\(A\)</span>和<span class="math inline">\(B\)</span>，则他们的<code>Jaccard相似度</code>可以表示为： <span class="math display">\[
J(A,B)=\frac{|A\bigcap{B}|}{|A\bigcup{B|}}
\]</span> 而<code>Jaccard距离</code><span class="math inline">\(J_{\epsilon}\)</span>为： <span class="math display">\[
J_{\epsilon}=1-J(A,B)=\frac{|A\bigcup{B}-A\bigcap{B}|}{|A\bigcup{B}|}
\]</span></p>
<h2 id="马氏距离">马氏距离</h2>
<blockquote>
<p>马氏距离可以看成是欧式距离的一种改良，他在欧氏距离的基础上考虑了特征（维度）的相关性，对于数据集的距离衡量也更加合理。</p>
</blockquote>
<p>对于数据集中的两个点，A和B。A和B对于聚点中心的欧氏距离都相同，但可以明显的看出A点是一个离群点，而B不是。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/v2-3cee35b79d272dda86e2604c160934ee_720w.jpg">

</div>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li><p>https://blog.csdn.net/eric41050808/article/details/24365765</p></li>
<li>https://www.jianshu.com/p/5706a108a0c6</li>
<li><p>https://zhuanlan.zhihu.com/p/46626607</p></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>距离度量</tag>
        <tag>指标</tag>
      </tags>
  </entry>
  <entry>
    <title>Hough变换</title>
    <url>/posts/e9f2d7e8.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ol style="list-style-type: decimal">
<li>笛卡尔坐标系中多点共线，在Hough空间中表现如何</li>
<li>在Hough变换中，如何保证多点共线，即保证共线的原理是什么</li>
<li>霍夫变换对图像的输入有什么要求</li>
<li><a href="#霍夫变换原理">以<span class="math inline">\(k\)</span>和<span class="math inline">\(b\)</span>为基的空间的缺点在哪儿</a></li>
<li>霍夫变换的大体流程</li>
</ol>
<h2 id="霍夫变换原理">霍夫变换原理</h2>
<p>对于笛卡尔坐标系中的一条线<span class="math inline">\(y=kx+b\)</span>,可以转换成霍夫空间下的一个点（霍夫空间是以<span class="math inline">\(k\)</span>和<span class="math inline">\(b\)</span>为坐标），如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424185145272-8035578-1584177392001.png">

</div>
<p>那么，对于笛卡尔坐标系中的一个点<span class="math inline">\((x_1,y_1)\)</span>，则转换为霍夫空间下的一条线，如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424185846412-1947419957-1584177461604.png">

</div>
<p><strong>它表示经过改点的所有直线</strong></p>
<p>那么，在笛卡尔坐标系中经过两点的直线，表现为在霍夫空间下两条直线的交点：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424190504412-864862338-1584177533599.png">

</div>
<p>三点共线在霍夫空间中表现为三条线相交于一点：</p>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424213944022-348637873.png" style="zoom:80%;"></p>
<p><strong>再次引申，如果多个点共线，那么在Hough空间中表现为多条线相交于一点</strong></p>
<p><strong>如果一条线是垂直于x轴的，那么该线在Hough空间中无法表示（此时为<span class="math inline">\(\infty\)</span>）</strong>，所以这里将k和q表示的Hough空间转换为极坐标，如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424215910740-145827126.png">

</div>
<p>同以<em>k</em>和<em>q</em> 组成的Hough空间，三点共线表示为三线相交，以下是两个Hough空间的对比图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1085343-20170424221329412-431224652-1584178146121.png">

</div>
<h2 id="流程">流程</h2>
<ol style="list-style-type: decimal">
<li><p>首先，获取一个二值化图像</p></li>
<li><p>建立一个矩阵<span class="math inline">\(H\)</span>，行为<span class="math inline">\(p\)</span>的所有取值，列为<span class="math inline">\(\theta\)</span>（<span class="math inline">\(\theta\)</span>的取值范围为(-90,180)）</p></li>
<li><p>遍历图像中的所有边缘点，得到该点的坐标<span class="math inline">\((x,y)\)</span>，再遍历<span class="math inline">\(\theta\)</span>的取值，通过公式<span class="math inline">\(p=xcos{\theta}+ysin{\theta}\)</span> 得到<span class="math inline">\(p\)</span>,用伪代码表示为：</p></li>
</ol>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> each edge Point(x,y):</span><br><span class="line">	<span class="keyword">for</span> theta <span class="keyword">in</span> range(<span class="number">-90</span>,<span class="number">90</span>):</span><br><span class="line">		p = x * cos(theta) + y * sin(theta)</span><br><span class="line">		H(theta,p) += <span class="number">1</span></span><br><span class="line">	end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p>
<ol start="4" style="list-style-type: decimal">
<li>在<span class="math inline">\(H\)</span>中找出最大的n个值即找出n条直线</li>
</ol>
<h2 id="参考">参考</h2>
<blockquote>
<p>https://www.cnblogs.com/php-rearch/p/6760683.html</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>机器学习</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>DTW距离</title>
    <url>/posts/4df0af7c.html/</url>
    <content><![CDATA[<h2 id="dtw距离">DTW距离</h2>
<h3 id="question">Question</h3>
<ol style="list-style-type: decimal">
<li>DTW的作用</li>
<li>DTW的大致流程</li>
</ol>
<h3 id="dtw距离-1">DTW距离</h3>
<blockquote>
<p>DTW全称Dynamic Time Warping，用于衡量两个不同长度的两个序列的距离</p>
</blockquote>
<ol style="list-style-type: decimal">
<li>构造匹配矩阵</li>
</ol>
<p>设序列1<span class="math inline">\(Q=q_1,q_2,...,q_n\)</span>,序列2<span class="math inline">\(C=c_1,c_2,...,c_m\)</span> ,其中<span class="math inline">\(n\neq m\)</span>,然后构造一个<span class="math inline">\(m\times n\)</span>的矩阵，矩阵中的值是<span class="math inline">\(q_i\)</span>和<span class="math inline">\(c_j\)</span>的距离（通常用欧式距离），如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20130620200852375-1584176187632.jpg">

</div>
<ol start="2" style="list-style-type: decimal">
<li>路径规划限制条件</li>
</ol>
<blockquote>
<p>即找到一条从左下角到右上角的路径,路径表示为： <span class="math display">\[
W=w_1,w_2,w_3,...,w_k,...,w_K   ，\text max(m,n) \leqslant K \leqslant m+n-1
\]</span></p>
</blockquote>
<blockquote>
<p><strong>前置条件</strong></p>
<p>但是该路径必须满足几个条件：</p>
<ol style="list-style-type: decimal">
<li>边界约束：<span class="math inline">\(w_1=(1,1)\)</span>,<span class="math inline">\(w_K=(m,n)\)</span>,就是说两条序列的开始点和结束点一定是重合的</li>
<li>连续性：如果<span class="math inline">\(w_{k-1}= (a’, b’)\)</span>，那么对于路径的下一个点<span class="math inline">\(w_k=(a, b)\)</span>需要满足 (a-a’) &lt;=1和 (b-b’) &lt;=1。就是说序列上的每一个点都要计算距离</li>
<li>单调性： 如果<span class="math inline">\(w_{k-1}= (a’, b’)\)</span>，那么对于路径的下一个点<span class="math inline">\(w_{k}=(a, b)\)</span>需要满足0&lt;=(a-a’)和0&lt;= (b-b’)。也就是说不能回头连接算距离</li>
</ol>
<p><strong>以上三个约束其实就一个目的，限定路径只能往这几个方向走，且只能走一步。</strong></p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20130620200949125-1584176277643.jpg">

</div>
</blockquote>
<ol start="3" style="list-style-type: decimal">
<li>路劲规划</li>
</ol>
<blockquote>
<p>即找到权重和最小路径</p>
</blockquote>
<p>最后使用动态规划实现计算DTW距离，在上图中找到一条路径实现距离之和最小（从<span class="math inline">\(w_1=(1,1)\)</span>开始,<span class="math inline">\(w_K=(m,n)\)</span>结束），公式表示为： <span class="math display">\[
DTW（Q，C）=min（\sqrt{\sum_{k=1}^K{w_k}}）
\]</span> 有时候为了增加路径长度的惩罚，路径可以表示为： <span class="math display">\[
DTW（Q，C）=min（\left(\sqrt{\sum_{k=1}^K{w_k}} \right)/K）
\]</span></p>
<h3 id="代码实现">代码实现</h3>
<h4 id="整体的dtw距离">整体的DTW距离：</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dtw_distance</span><span class="params">(matrix_a, matrix_b, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""计算DTW距离</span></span><br><span class="line"><span class="string">    所用的距离度量标准是欧式距离，但前提是两个矩阵的列数必须一致，若不一致则报错，</span></span><br><span class="line"><span class="string">    计算距离分下面几种情况：</span></span><br><span class="line"><span class="string">    1. 若两个矩阵行数相同，则直接计算欧式距离</span></span><br><span class="line"><span class="string">    2. 若两个矩阵的行数不同，则计算DTW距离</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param matrix_a: np.array,矩阵或向量A</span></span><br><span class="line"><span class="string">    :param matrix_b: np.array,矩阵或向量B</span></span><br><span class="line"><span class="string">    :return: float,np.array(int,int)</span></span><br><span class="line"><span class="string">        - 序列之间的距离</span></span><br><span class="line"><span class="string">        - 最短路径的坐标</span></span><br><span class="line"><span class="string">    :raise: ValueError:</span></span><br><span class="line"><span class="string">        - 1. Weight的shape不对，其shape必须和两个矩阵的列相等</span></span><br><span class="line"><span class="string">        - 2.两个矩阵的列数不同</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n_row_a, n_col_a = matrix_a.shape</span><br><span class="line">    n_row_b, n_col_b = matrix_b.shape</span><br><span class="line"></span><br><span class="line">    <span class="string">"""两个矩阵的列不同则报错"""</span></span><br><span class="line">    <span class="keyword">if</span> n_col_a != n_col_b:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"两个矩阵的列必须相同"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""列相等且为1的情况，直接计算欧式距离"""</span></span><br><span class="line">    <span class="keyword">if</span> n_row_a == n_row_b:</span><br><span class="line">        <span class="comment"># 如果矩阵A和矩阵B均为1维，则直接计算欧式距离</span></span><br><span class="line">        <span class="keyword">if</span> n_col_a == <span class="number">1</span> <span class="keyword">and</span> n_col_b == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> np.sqrt(np.sum(pow(matrix_a - matrix_b, <span class="number">2</span>))), [(<span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">        <span class="comment"># 如果是矩阵，则计算矩阵范数，这里采用的是2范数</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            path = list(range(n_row_a))</span><br><span class="line">            path = list(zip(path, path))</span><br><span class="line">            <span class="keyword">return</span> np.sqrt(np.sum(pow(matrix_a - matrix_b, <span class="number">2</span>))), path</span><br><span class="line"></span><br><span class="line">    <span class="string">"""行数不相等的情况，计算DTW距离"""</span></span><br><span class="line">    distance_matrix = np.zeros((n_row_a, n_row_b))</span><br><span class="line">    <span class="comment"># 获取权重并且判断weights的shape是否正确</span></span><br><span class="line">    weights = kwargs.get(<span class="string">"weights"</span>)</span><br><span class="line">    <span class="keyword">if</span> weights <span class="keyword">is</span> <span class="literal">None</span>:     <span class="comment"># 默认情况下，权重为1</span></span><br><span class="line">        weights = np.ones(n_col_a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        weights = np.asarray(weights)</span><br><span class="line">        <span class="string">"""验证weights的shape是否正确"""</span></span><br><span class="line">        <span class="keyword">if</span> weights.shape[<span class="number">0</span>] != n_col_a <span class="keyword">and</span> len(weights.shape) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Weights的shape错误"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a_row_index, a_row <span class="keyword">in</span> enumerate(matrix_a):</span><br><span class="line">        <span class="keyword">for</span> b_row_index, b_row <span class="keyword">in</span> enumerate(matrix_b):</span><br><span class="line">            single_dtw_distance = np.sqrt(</span><br><span class="line">                np.sum(weights * pow((a_row - b_row), <span class="number">2</span>)))</span><br><span class="line">            distance_matrix[a_row_index][b_row_index] = single_dtw_distance</span><br><span class="line"></span><br><span class="line">    shortest_path, shortest_distance = __shortest_distance_with_dynamic(</span><br><span class="line">        distance_matrix)</span><br><span class="line">    <span class="keyword">return</span> shortest_distance, shortest_path</span><br></pre></td></tr></table></figure>
<h4 id="生成的dtw矩阵寻找最短路径">生成的DTW矩阵寻找最短路径</h4>
<p>对于寻找最短路径有两种方式：</p>
<ol style="list-style-type: decimal">
<li>递归</li>
<li>动态规划</li>
</ol>
<p>下面是递归部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__shortest_distance_with_recursion</span><span class="params">(distance_matrix, current_row=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       current_col=<span class="number">0</span>, path=[], last_distance=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""用递归查找DTW距离的最短距离</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param distance_matrix: np.array, DTW矩阵</span></span><br><span class="line"><span class="string">    :param current_row: int, 当前位置所在的行，</span></span><br><span class="line"><span class="string">    :param current_col: int, 当前位置所在的列</span></span><br><span class="line"><span class="string">    :param path: list[(int,int)] , 之前所走的路径</span></span><br><span class="line"><span class="string">    :return: List[(int,int)], int</span></span><br><span class="line"><span class="string">        - 最短路径</span></span><br><span class="line"><span class="string">        - 最短路径的长度</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    path = copy.copy(path)</span><br><span class="line">    n_row, n_col = distance_matrix.shape</span><br><span class="line"></span><br><span class="line">    <span class="string">""" 退出限定"""</span></span><br><span class="line">    <span class="comment"># 如果没有到达最下角，即超出边界,此时返回的路径是无穷大</span></span><br><span class="line">    <span class="keyword">if</span> current_row &gt;= n_row <span class="keyword">or</span> current_col &gt;= n_col:</span><br><span class="line">        <span class="keyword">return</span> path, np.inf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果到达了最下角</span></span><br><span class="line">    path.append((current_row, current_col))</span><br><span class="line">    current_num = distance_matrix[current_row][current_col]</span><br><span class="line">    current_distance = last_distance + current_num</span><br><span class="line">    <span class="keyword">if</span> (current_row + <span class="number">1</span>, current_col + <span class="number">1</span>) == distance_matrix.shape:</span><br><span class="line">        <span class="keyword">return</span> path, current_distance</span><br><span class="line"></span><br><span class="line">    <span class="string">"""递归的向三个方向走"""</span></span><br><span class="line">    <span class="comment"># 向右走</span></span><br><span class="line">    right_path, right_length = __shortest_distance_with_recursion(distance_matrix, current_row, current_col + <span class="number">1</span>,</span><br><span class="line">                                                                  path=path, last_distance=current_distance)</span><br><span class="line">    <span class="comment"># 向下走</span></span><br><span class="line">    down_path, down_length = __shortest_distance_with_recursion(distance_matrix, current_row + <span class="number">1</span>,</span><br><span class="line">                                                                current_col, path=path, last_distance=current_distance)</span><br><span class="line">    <span class="comment"># 向斜下走</span></span><br><span class="line">    decline_path, decline_length = __shortest_distance_with_recursion(distance_matrix, current_row + <span class="number">1</span>,</span><br><span class="line">                                                                      current_col + <span class="number">1</span>, path=path, last_distance=current_distance)</span><br><span class="line"></span><br><span class="line">    <span class="string">"""在以上3个方向中选出最短路径"""</span></span><br><span class="line">    last_pathes = (right_path, down_path, decline_path)</span><br><span class="line">    last_lengthes = (right_length, down_length, decline_length)</span><br><span class="line">    shortest_index = np.argmin(last_lengthes)</span><br><span class="line">    shortest_path, shortest_lengthes = last_pathes[shortest_index], last_lengthes[shortest_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shortest_path, shortest_lengthes</span><br></pre></td></tr></table></figure>
<p>动态规划方式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get_property_value</span><span class="params">(matrix, current_row, current_col)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        value = matrix[current_row][current_col]</span><br><span class="line">    <span class="keyword">except</span> IndexError:</span><br><span class="line">        value = np.inf</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__shortest_distance_with_dynamic</span><span class="params">(distance_matrix)</span>:</span></span><br><span class="line">    <span class="string">"""用动态规划查找DTW距离</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param distance_matrix: np.array, DTW矩阵</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    n_row, n_col = distance_matrix.shape</span><br><span class="line"></span><br><span class="line">    <span class="string">"""计算到达当前位置最小的路径值"""</span></span><br><span class="line">    min_distance_matrix = np.zeros(distance_matrix.shape)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(n_row):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(n_col):</span><br><span class="line">            <span class="comment"># 第一步则不计算</span></span><br><span class="line">            <span class="keyword">if</span> row == <span class="number">0</span> <span class="keyword">and</span> col == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 左上</span></span><br><span class="line">            upleft_value = __get_property_value(</span><br><span class="line">                min_distance_matrix, row - <span class="number">1</span>, col - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 左边</span></span><br><span class="line">            left_value = __get_property_value(</span><br><span class="line">                min_distance_matrix, row, col - <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 上面</span></span><br><span class="line">            up_value = __get_property_value(min_distance_matrix, row - <span class="number">1</span>, col)</span><br><span class="line"></span><br><span class="line">            min_value = np.min([upleft_value, left_value, up_value])</span><br><span class="line">            min_distance_matrix[row][col] = distance_matrix[row][col] + min_value</span><br><span class="line"></span><br><span class="line">    <span class="string">"""查找最短路径"""</span></span><br><span class="line">    row, col = n_row - <span class="number">1</span>, n_col - <span class="number">1</span></span><br><span class="line">    path = [(row, col)]</span><br><span class="line">    <span class="keyword">while</span> row &gt;= <span class="number">0</span> <span class="keyword">and</span> col &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="string">'''当已经到达原点则直接退出'''</span></span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">0</span> <span class="keyword">and</span> col == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 左上</span></span><br><span class="line">        upleft_value = __get_property_value(</span><br><span class="line">            min_distance_matrix, row - <span class="number">1</span>, col - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 左边</span></span><br><span class="line">        left_value = __get_property_value(min_distance_matrix, row, col - <span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 上面</span></span><br><span class="line">        up_value = __get_property_value(min_distance_matrix, row - <span class="number">1</span>, col)</span><br><span class="line"></span><br><span class="line">        candidate_values = [upleft_value, left_value, up_value]</span><br><span class="line">        min_index = np.argmin(candidate_values)</span><br><span class="line">        <span class="comment"># 往左上寻址</span></span><br><span class="line">        <span class="keyword">if</span> min_index == <span class="number">0</span>:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">            col -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 往左寻址</span></span><br><span class="line">        <span class="keyword">elif</span> min_index == <span class="number">1</span>:</span><br><span class="line">            col -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 往上寻址</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        path.append((row, col))</span><br><span class="line"></span><br><span class="line">    path.reverse()</span><br><span class="line">    <span class="keyword">return</span> path, min_distance_matrix[n_row - <span class="number">1</span>][n_col - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h3 id="参考">参考</h3>
<blockquote>
<p>https://blog.csdn.net/qq_40006058/article/details/79992255</p>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>距离</tag>
      </tags>
  </entry>
  <entry>
    <title>LBP特征</title>
    <url>/posts/edf1298.html/</url>
    <content><![CDATA[<h2 id="lbp特征">LBP特征</h2>
<h3 id="question">Question</h3>
<ul>
<li>LBP特征的流程</li>
<li>LBP特征的改进点在哪里，解决了什么问题</li>
</ul>
<h3 id="lbp特征-1">LBP特征</h3>
<blockquote>
<p>LBP特征用于提取纹理特征</p>
</blockquote>
<ol style="list-style-type: decimal">
<li><p>将图像切分block，比如切分成16*16</p></li>
<li><p>对每个block内以3*3为单位，提取LBP特征</p></li>
</ol>
<p>​ 对比3*3的方格中周围的值和中间的值，如果周围的值大于中间的值，则表示为1，反之则表示为0，公式表示如下： <span class="math display">\[
   img(i,j)=\begin{cases} 0, &amp; img(i,j)&gt;=img(center) \\ 1, &amp; img(i,j)&lt;img(center)\end{cases}
   \]</span> <img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/14596362-7ea1a8cd7c2757f7-1584175992695.png"></p>
<p>上述操作得到一个二进制表格，从左上角开始顺时针排列得到一个二进制数，将该二进制数转换为十进制数即为该cell的LBP特征</p>
<blockquote>
<p><strong>改进点：</strong>为了保证LBP特征的旋转不变性，转换为二进制特征的方式改为跳数，即如果上一个数和下一个数不同（即一个是0，一个是1），则算为1，否则为0，用公式表示为：</p>
</blockquote>
<p><span class="math display">\[
   cell(i)=\begin{cases} 1,&amp; cell(i-1) \neq cell(i) \\ 0, &amp; cell(i-1) =cell(i) \end{cases} (i\in(2,..,9)
   \]</span></p>
<ol start="3" style="list-style-type: decimal">
<li>直方图统计</li>
</ol>
<p>由于不同大小的图片得到的LBP特征也不同，所以这里以block为单位进行直方图统计，每个block在统计后进行归一化处理。</p>
<ol start="4" style="list-style-type: decimal">
<li>整幅图的block拉成一条向量即为该图片的LBP特征</li>
</ol>
<h2 id="参考">参考</h2>
<blockquote>
<p><a href="http://citeseer.ist.psu.edu/viewdoc/download;jsessionid=145DB5D01FBCC36DA0EA57425B04AA9A?doi=10.1.1.157.1576&amp;rep=rep1&amp;type=pdf" target="_blank" rel="noopener">《Multiresolution gray-scale and rotation invariant texture classification with local binary patterns》</a></p>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>计算机视觉</tag>
        <tag>特征提取</tag>
      </tags>
  </entry>
  <entry>
    <title>Triple网络</title>
    <url>/posts/d5b27990.html/</url>
    <content><![CDATA[<h1 id="triplet-network">Triplet Network</h1>
<h2 id="question">Question</h2>
<ol style="list-style-type: decimal">
<li><code>Triplet Network</code>和<code>Siamese Network</code>相比哪个效果好</li>
<li><code>Triplet Network</code>的大体流程</li>
<li><code>Triplet NetWork</code>的主体思想是什么</li>
<li><code>loss</code>中<span class="math inline">\(\alpha\)</span>的作用</li>
</ol>
<h2 id="triplet-network-1">Triplet Network</h2>
<blockquote>
<p>既然<code>Siamese</code>网络是衡量两个样本间的相似度，<code>Triple Network</code>是衡量三个样本间的相似度</p>
<p>且<strong>Triple Network的效果要好于Siamese Network</strong></p>
</blockquote>
<p><code>Triple Network</code>的主体思想是：</p>
<blockquote>
<p>相同类别间的距离尽可能的小，不同类别间的距离尽可能的大</p>
</blockquote>
<h3 id="网络结构图">网络结构图：</h3>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1338991-20181213135951412-1275320373.png" style="zoom:80%;"></p>
<p><strong>输入解释</strong></p>
<ul>
<li>Anchor表示需要衡量的图片（输入）</li>
<li>Postive表示正类图片</li>
<li>negative表示负类图片</li>
</ul>
<h3 id="loss函数">Loss函数</h3>
<p><span class="math display">\[
L(A,P,N)=max(D_w(A,P)-D_w(A,N)+\alpha,0)
\]</span></p>
<blockquote>
<p><span class="math inline">\(D_w\)</span>表示两个输入值在经过子网络后的距离，有： <span class="math display">\[
 D_w(X,Y)=\sqrt{[G_w(X)-G_w(Y)]^2}
 \]</span> 其中，<span class="math inline">\(G_w\)</span>表示经过网络的输出（也就是<code>Embedding</code>层）</p>
</blockquote>
<p>对<code>loss</code>函数的理解：</p>
<blockquote>
<p>同<code>Siamese</code>网络，<span class="math inline">\(\alpha\)</span>的大小直接衡量了学习的难度，<span class="math inline">\(\alpha\)</span>越大，则学习的难度越大,要求： <span class="math display">\[
D_w(A,P) + \alpha \leqslant D_w(A,N)
\]</span></p>
</blockquote>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li>https://www.cnblogs.com/Lee-yl/p/10113386.html</li>
<li>https://blog.csdn.net/koala_tree/article/details/78647528</li>
<li><a href="https://arxiv.org/pdf/1412.6622.pdf" target="_blank" rel="noopener">论文原文</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Siamese网络</title>
    <url>/posts/e2e6b321.html/</url>
    <content><![CDATA[<h1 id="siamese网络">Siamese网络</h1>
<h2 id="question">Question</h2>
<ol style="list-style-type: decimal">
<li>孪生网络的两个网络结构需要相同吗？权重是否一定要一致？</li>
<li>孪生网络的大体流程</li>
<li>在生成的结果中，两个向量的相似程度如何计算？是直接算欧氏距离还是loss</li>
<li>孪生网络中的loss中m的作用，增大m会有什么影响</li>
<li>2-Channel的主体思想</li>
<li>Triple Network的主体思想</li>
</ol>
<h2 id="siamese网络-1">Siamese网络</h2>
<h3 id="作用">作用</h3>
<blockquote>
<p>Siamese适用的情景：</p>
<ol style="list-style-type: decimal">
<li>少样本甚至1个样本的情况（俗称的One-Shot 或者Few-Shot问题）</li>
<li>分类的类别数不确定</li>
</ol>
</blockquote>
<h3 id="主体思想">主体思想</h3>
<blockquote>
<p>样本通过网络编码，量化为一个向量，最后计算向量之间的相似度</p>
</blockquote>
<p><img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1338991-20181213123654582-1284082097.png" style="zoom:50%;"></p>
<p>图中，input 1和input 2是需要对比的两个输入，输入可以是图像，可以是文本，甚至可以是数字</p>
<p>两个输入通过网络之后均形成一个向量，然后对比两个向量的相似程度<strong>（也就是Loss）</strong></p>
<h3 id="损失函数">损失函数</h3>
<p><span class="math display">\[
（1-Y）\frac{1}{2}(D_w)^2+(Y)\frac{1}{2}[max(0,m-D_w)^2]
\]</span></p>
<ul>
<li><p>其中<span class="math inline">\(D_w\)</span>表示两个姐妹子网络输出的欧氏距离,如下： <span class="math display">\[
  D_w=\sqrt{[G_w(X_1)-G_w(X_2)]^2}
  \]</span></p></li>
<li><p>Y为label，如果两个子网络输出相似，则0，否则为1</p></li>
<li><p><span class="math inline">\(m\)</span>表示边际价值，为一个自己设定的参数。实际上，我的理解是加大学习的难度。<strong>就是说，m越大，则学习的难度越大</strong></p></li>
</ul>
<h2 id="改进">改进</h2>
<h3 id="channel">2-Channel</h3>
<blockquote>
<p>个人认为，2-Channel在结果上可能并不能改进什么，可能在速度上有所改进</p>
</blockquote>
<p>2-Channel的主体思想如下：</p>
<p>将两个输入的图片合成一张，看成是有多个通道的图片，然后一起带入网络中。此时，<strong>两张图片就可以通过CNN一起卷积</strong>，卷积的结果最后代入后面的全连接层，最终输出一个结果。该结果为0表示相同，1表示不同。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/1338991-20181213130146077-1166762109.png">

</div>
<h3 id="triple-network">Triple Network</h3>
<blockquote>
<p>既然Siamese网络是衡量两个样本间的相似度，Triple Network是衡量三个样本间的相似度</p>
</blockquote>
<p>Triple Network笔记：<a href="Triple网络.md">Triple Network</a></p>
<h2 id="对siamese网络以及度量学习的一点理解">对Siamese网络以及度量学习的一点理解</h2>
<p><strong>loss的大小并不能完全表示度量模型学习程度的好坏</strong></p>
<p>（以下是本人的一些理解，仅供参考）</p>
<h3 id="结果指标">结果指标</h3>
<p>下面是一个本人在一次Metric Learning任务中训练所得的Siamese模型，得到的Train Loss和Validation Loss如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2020-05-26T08-40-16.697Z.png">

</div>
<p>可以看到Train和Validation Loss都较小。</p>
<p>通过以上的模型，通过移动阈值，可以绘制<span class="math inline">\(FAR\)</span>和<span class="math inline">\(FRR\)</span>曲线，所得的验证集的<span class="math inline">\(FAR\)</span>和<span class="math inline">\(FRR\)</span>曲线如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/低loss对应指标.png">

</div>
<p>根据上图得到的<span class="math inline">\(ERR\)</span>点结果如下：</p>
<blockquote>
<ul>
<li><p><span class="math inline">\(FAR = FRR = 0.5933333333333334\)</span></p></li>
<li><p><span class="math inline">\(threshoold = 0.516687226098579\)</span></p></li>
</ul>
</blockquote>
<p>并附上预测结果</p>
<table>
<thead>
<tr class="header">
<th></th>
<th>Predict Distance</th>
<th>Label</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0.511279</td>
<td>0.0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0.500313</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>2</td>
<td>0.511920</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>3</td>
<td>0.512624</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td>4</td>
<td>0.504918</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>5</td>
<td>0.861020</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>6</td>
<td>0.500000</td>
<td>0.0</td>
</tr>
<tr class="even">
<td>7</td>
<td>0.499787</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>8</td>
<td>0.510990</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>9</td>
<td>0.516549</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td>10</td>
<td>0.500447</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>11</td>
<td>0.874551</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>12</td>
<td>0.516883</td>
<td>0.0</td>
</tr>
<tr class="even">
<td>13</td>
<td>0.514373</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>14</td>
<td>0.528016</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>15</td>
<td>0.515205</td>
<td>1.0</td>
</tr>
<tr class="odd">
<td>16</td>
<td>0.516599</td>
<td>1.0</td>
</tr>
<tr class="even">
<td>17</td>
<td>0.860529</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>18</td>
<td>0.508360</td>
<td>0.0</td>
</tr>
<tr class="even">
<td>19</td>
<td>0.503932</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td>20</td>
<td>0.515846</td>
<td>1.0</td>
</tr>
</tbody>
</table>
<p>可以看到以上模型预测的结果（也就是两个子网络的距离）基本上都在0.5左右，在计算Loss时，再加上平方（参见<a href="#损失函数">Siamese Loss</a>），造成算出的Loss结果就会相当的小，但<span class="math inline">\(FAR\)</span>和<span class="math inline">\(FRR\)</span>却居高不下。换句话说，该模型根本没有辨识能力，loss效果却相当的好看。</p>
<p>另外，反过来看，Loss大不一定代表模型不好，如下图。</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/火狐截图_2020-05-28T08-28-47.927Z.png">

</div>
<p>得到的<span class="math inline">\(ERR\)</span>图如下：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/index1.png">

</div>
<p><span class="math inline">\(ERR\)</span>结果:</p>
<blockquote>
<ul>
<li><p><span class="math inline">\(FAR = FRR = 0.3559322033898305\)</span></p></li>
<li><p><span class="math inline">\(threshoold = 0.1881966181994088\)</span></p></li>
</ul>
</blockquote>
<h2 id="参考">参考</h2>
<blockquote>
<ul>
<li><p>https://www.cnblogs.com/Lee-yl/p/10113386.html</p></li>
<li><p>https://blog.csdn.net/qq_35826213/article/details/86313469</p></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown语法手册(转)</title>
    <url>/posts/60b0c1f1.html/</url>
    <content><![CDATA[<h1 id="cmd-markdown-简明语法手册">Cmd Markdown 简明语法手册</h1>
<hr>
<h3 id="斜体和粗体">1. 斜体和粗体</h3>
<p>使用 * 和 ** 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="分级标题">2. 分级标题</h3>
<p>使用 === 表示一级标题，使用 --- 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">这是一个一级标题</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line">这是一个二级标题</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">### 这是一个三级标题</span><br></pre></td></tr></table></figure>
<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="外链接">3. 外链接</h3>
<p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://ghosertblog.github.com" target="_blank" rel="noopener">本人博客</a> 的链接。</p>
<h3 id="无序列表">4. 无序列表</h3>
<p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="有序列表">5. 有序列表</h3>
<p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol style="list-style-type: decimal">
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="文字引用">6. 文字引用</h3>
<p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="行内代码块">7. 行内代码块</h3>
<p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="代码块">8. 代码块</h3>
<p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。</code></pre>
<h3 id="插入图像">9. 插入图像</h3>
<p>使用 ![描述](图片链接地址) 插入图像。</p>
<p>示例：</p>
<div class="figure">
<img src="https://www.zybuluo.com/static/img/my_head.jpg" alt="我的头像">
<p class="caption">我的头像</p>
</div>
<h1 id="cmd-markdown-高阶语法手册">Cmd Markdown 高阶语法手册</h1>
<h3 id="内容目录">1. 内容目录</h3>
<p>在段落中填写 <code>[TOC]</code> 以显示全文内容的目录结构。</p>
<p>[TOC]</p>
<h3 id="标签分类">2. 标签分类</h3>
<p>在编辑区任意行的列首位置输入以下代码给文稿标签：</p>
<p>标签： 数学 英语 Markdown</p>
<p>或者</p>
<p>Tags： 数学 英语 Markdown</p>
<h3 id="删除线">3. 删除线</h3>
<p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="注脚">4. 注脚</h3>
<p>使用 [^keyword] 表示注脚。</p>
<p>这是一个注脚<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>的样例。</p>
<p>这是第二个注脚<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a>的样例。</p>
<h3 id="latex-公式">5. LaTeX 公式</h3>
<p>$ 表示行内公式：</p>
<p>质能守恒方程可以用一个很简洁的方程式 <span class="math inline">\(E=mc^2\)</span> 来表达。</p>
<p>$$ 表示整行公式：</p>
<p><span class="math display">\[\sum_{i=1}^n a_i=0\]</span></p>
<p><span class="math display">\[f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 \]</span></p>
<p><span class="math display">\[\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k}\]</span></p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。</p>
<h3 id="加强的代码块">6. 加强的代码块</h3>
<p>支持四十一种编程语言的语法高亮的显示，行号显示。</p>
<p>非代码示例：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install vim-gnome</span><br></pre></td></tr></table></figure>
<p>Python 示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure>
<p>JavaScript 示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* nth element in the fibonacci series.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param </span>n &gt;= 0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return </span>the nth element, &gt;= 0.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> tmp;</span><br><span class="line">  <span class="keyword">while</span> (--n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a += b;</span><br><span class="line">    b = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(fib(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
<h3 id="流程图">7. 流程图</h3>
<h4 id="示例">示例</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st&#x3D;&gt;start: Start:&gt;https:&#x2F;&#x2F;www.zybuluo.com</span><br><span class="line">io&#x3D;&gt;inputoutput: verification</span><br><span class="line">op&#x3D;&gt;operation: Your Operation</span><br><span class="line">cond&#x3D;&gt;condition: Yes or No?</span><br><span class="line">sub&#x3D;&gt;subroutine: Your Subroutine</span><br><span class="line">e&#x3D;&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;io-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;sub-&gt;io</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考流程图语法参考">更多语法参考：<a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">流程图语法参考</a></h4>
<h3 id="序列图">8. 序列图</h3>
<h4 id="示例-1">示例 1</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h4 id="示例-2">示例 2</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考序列图语法参考">更多语法参考：<a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">序列图语法参考</a></h4>
<h3 id="甘特图">9. 甘特图</h3>
<p>甘特图内在思想简单。基本是一条线条图，横轴表示时间，纵轴表示活动（项目），线条表示在整个期间上计划和实际的活动完成情况。它直观地表明任务计划在什么时候进行，及实际进展与计划要求的对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考甘特图语法参考">更多语法参考：<a href="https://knsv.github.io/mermaid/#gant-diagrams" target="_blank" rel="noopener">甘特图语法参考</a></h4>
<h3 id="mermaid-流程图">10. Mermaid 流程图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A[Hard edge] --&gt;|Link text| B(Round edge)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result one]</span><br><span class="line">C --&gt;|Two| E[Result two]</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考mermaid-流程图语法参考">更多语法参考：<a href="https://knsv.github.io/mermaid/#flowcharts-basic-syntax" target="_blank" rel="noopener">Mermaid 流程图语法参考</a></h4>
<h3 id="mermaid-序列图">11. Mermaid 序列图</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;John: Hello John, how are you?</span><br><span class="line">loop every minute</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<h4 id="更多语法参考mermaid-序列图语法参考">更多语法参考：<a href="https://knsv.github.io/mermaid/#sequence-diagrams" target="_blank" rel="noopener">Mermaid 序列图语法参考</a></h4>
<h3 id="表格支持">12. 表格支持</h3>
<table>
<thead>
<tr class="header">
<th>项目</th>
<th align="right">价格</th>
<th align="center">数量</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>计算机</td>
<td align="right">$1600</td>
<td align="center">5</td>
</tr>
<tr class="even">
<td>手机</td>
<td align="right">$12</td>
<td align="center">12</td>
</tr>
<tr class="odd">
<td>管线</td>
<td align="right">$1</td>
<td align="center">234</td>
</tr>
</tbody>
</table>
<h3 id="定义型列表">13. 定义型列表</h3>
<dl>
<dt>名词 1</dt>
<dd>定义 1（左侧有一个可见的冒号和四个不可见的空格）
</dd>
<dt>代码块 2</dt>
<dd><p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>
<pre><code>代码块（左侧有八个不可见的空格）</code></pre>
</dd>
</dl>
<h3 id="html-标签">14. Html 标签</h3>
<p>本站支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格：</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
        &lt;th&gt;星期一&lt;/th&gt;
        &lt;th&gt;星期二&lt;/th&gt;
        &lt;th&gt;星期三&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;李强&lt;/td&gt;
        &lt;td&gt;张明&lt;/td&gt;
        &lt;td&gt;王平&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code></pre>
<table>
<pre><code>&lt;tr&gt;
    &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;
    &lt;th&gt;星期一&lt;/th&gt;
    &lt;th&gt;星期二&lt;/th&gt;
    &lt;th&gt;星期三&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;李强&lt;/td&gt;
    &lt;td&gt;张明&lt;/td&gt;
    &lt;td&gt;王平&lt;/td&gt;
&lt;/tr&gt;</code></pre>
</table>
<h3 id="内嵌图标">15. 内嵌图标</h3>
<p>本站的图标系统对外开放，在文档中输入</p>
<pre><code>&lt;i class=&quot;icon-weibo&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示微博的图标： <i class="icon-weibo icon-2x"></i></p>
<p>替换 上述 <code>i 标签</code> 内的 <code>icon-weibo</code> 以显示不同的图标，例如：</p>
<pre><code>&lt;i class=&quot;icon-renren&quot;&gt;&lt;/i&gt;</code></pre>
<p>即显示人人的图标： <i class="icon-renren icon-2x"></i></p>
<p>更多的图标和玩法可以参看 <a href="http://fortawesome.github.io/Font-Awesome/3.2.1/icons/" target="_blank" rel="noopener">font-awesome</a> 官方网站。</p>
<h3 id="待办事宜-todo-列表">16. 待办事宜 Todo 列表</h3>
<p>使用带有 [ ] 或 [x] （未完成或已完成）项的列表语法撰写一个待办事宜列表，并且支持子列表嵌套以及混用Markdown语法，例如：</p>
<pre><code>- [ ] **Cmd Markdown 开发**
    - [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率
    - [ ] 支持以 PDF 格式导出文稿
    - [x] 新增Todo列表功能 [语法参考](https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments)
    - [x] 改进 LaTex 功能
        - [x] 修复 LaTex 公式渲染问题
        - [x] 新增 LaTex 公式编号功能 [语法参考](http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers)
- [ ] **七月旅行准备**
    - [ ] 准备邮轮上需要携带的物品
    - [ ] 浏览日本免税店的物品
    - [x] 购买蓝宝石公主号七月一日的船票</code></pre>
<p>对应显示如下待办事宜 Todo 列表：</p>
<ul>
<li>[ ] <strong>Cmd Markdown 开发</strong>
<ul>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[x] 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li>
<li>[x] 改进 LaTex 功能
<ul>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li>
</ul></li>
</ul></li>
<li>[ ] <strong>七月旅行准备</strong>
<ul>
<li>[ ] 准备邮轮上需要携带的物品</li>
<li>[ ] 浏览日本免税店的物品</li>
<li>[x] 购买蓝宝石公主号七月一日的船票</li>
</ul></li>
</ul>
<div class="footnotes">
<hr>
<ol>
<li id="fn1"><p>这是一个 <em>注脚</em> 的 <strong>文本</strong>。<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>这是另一个 <em>注脚</em> 的 <strong>文本</strong>。<a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>人物背景抠图 (二)</title>
    <url>/posts/cc52d48c.html/</url>
    <content><![CDATA[<h1 id="效果">效果</h1>
<h2 id="当前效果">当前效果</h2>
<p>本文章是对<a href="/posts/10cdf8fe.html/" title="人物背景抠图">人物背景抠图</a>的改进,先看效果图:</p>
<p><strong>原图像:</strong></p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/效果原图像-1580099162567.png">

</div>
<p><strong>本次替换后:</strong></p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/改进效果.png">

</div>
<h2 id="原效果">原效果</h2>
<p>对比<a href="/posts/10cdf8fe.html/" title="人物背景抠图">人物背景抠图</a>中的效果:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/效果图-1580099178206.png">

</div>
<p>可以看到,针对原效果中结果不太好的有明显改进.例如第一行第四张图片,人物的头发处有许多的&quot;空洞&quot;,在改进后得到了填充;第二行第一张图片,原效果背景也有许多&quot;空洞&quot;,改进后有明显改善.</p>
<h1 id="过程及思路">过程及思路</h1>
<p>事实上,对于这个特定任务,分离前景和背景,前景对象有且仅有一个,从图(数据结构中的图)的角度上看,我只需要找到一个连通域即可,其他的连通域都可以看成是误识别的结果,应该合并成背景.并且,这个前景对应的连通域应该是最大的连通域.下面介绍过程:</p>
<p>下面是对原图像进行掩膜后的结果(开运算后):</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/开运算结果.png">

</div>
<p>可以看到一般效果较好的图片对应的掩膜结果都比较成型,且仅有一个连通域,而效果不好的有多个连通域,通常情况下,最大的连通域就是人物,所以,我们选择最大的连通域作为掩膜结果,下面以第一行第4张图片为例,在得到掩膜结果后我们对连通域编号,并计算每个连通域的大小:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取连通图并找出最大连通图</span></span><br><span class="line">contours,hierarchy = cv2.findContours(template_img,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line">areas = list()</span><br><span class="line"><span class="keyword">for</span> contour <span class="keyword">in</span> contours:</span><br><span class="line">    areas.append(cv2.contourArea(contour))</span><br><span class="line">max_contour_index = np.argmax(areas)</span><br><span class="line">print(<span class="string">"最大连通图: &#123;&#125;"</span>.format(max_contour_index))</span><br></pre></td></tr></table></figure>
<p>在得到每个连通域大小后,找到最大的连通域:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w,h = template_img.shape</span><br><span class="line">black_back = np.zeros(shape=(w,h,<span class="number">3</span>))</span><br><span class="line">plt.imshow(cv2.drawContours(black_back, contours, max_contour_index, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<p>下面是最大连通域对应的外边框:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/最大连通域.png">

</div>
<p>最大连通域中有许多背景空洞,我们需要填充:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">template_img = np.zeros(shape=template_img.shape)</span><br><span class="line">template_img = cv2.fillConvexPoly(template_img,contours[max_contour_index],(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure>
<p>最终结果:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r_img = replace_img(img,template_img,back_img)</span><br><span class="line">plt.imshow(r_img)</span><br></pre></td></tr></table></figure>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/单图测试.png">

</div>
<h1 id="问题及改进思路">问题及改进思路</h1>
<h2 id="前景和背景边缘问题">前景和背景边缘问题</h2>
<blockquote>
<p>如上图,前景和背景是有明显的毛边的.事实上,在之前的步骤中,并没有利用边缘检测技术对边缘修正,或者,现在我们的前景和背景已经大致的分出来了,利用Graph Cut或Grab Cut算法来修正应该更加精准.</p>
</blockquote>
<h2 id="前景和背景颜色相近问题">前景和背景颜色相近问题</h2>
<blockquote>
<p>这个问题并没有想到解决办法,Grab Cut对于此类问题效果并不理想.或许利用Selective Search中的动态阈值来修正前景和背景效果会比较好,但我并没有尝试过.</p>
</blockquote>
<p>如果你有什么想法或者解决思路,请在下方留言.</p>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLOV3总结</title>
    <url>/posts/69cad793.html/</url>
    <content><![CDATA[<p>以下是<code>YOLO V3</code>的结构图：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210423111811.jpg">

</div>
<p>总的来说,YOLO V3针对V2的改进并不多,有以下几点:</p>
<ol style="list-style-type: decimal">
<li>网络结构的改变</li>
</ol>
<blockquote>
<p>YOLO V3采用Darknet-53 的网络结构,整个网络采用全卷积结构,相比于ResNet-152和ResNet-101强很多,速度也更快</p>
</blockquote>
<ol start="2" style="list-style-type: decimal">
<li>Anchor Box</li>
</ol>
<blockquote>
<p>由于 YOLO V1和V2 都对小目标支持不好,所以,V3在这上面作出了改进,对大中小目标分别进行处理,大目标的Feature Map缩小,中小目标的Feature Map呈放大</p>
<p>V3的Anchor Box一共9个,大中小各3个</p>
</blockquote>
<ol start="3" style="list-style-type: decimal">
<li>Loss Function</li>
</ol>
<blockquote>
<p>V3不再用softmax,而是用logistic(即对每一类做logistic),其目的还是对应V2中出现</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>目标检测 - 计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>KCF目标跟踪测试</title>
    <url>/posts/849e7948.html/</url>
    <content><![CDATA[
        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>
        <div class="bbplayer">
        <iframe class="bbplayer" id="mmedia-AHoeaYOq" src="//player.bilibili.com/player.html?aid=85098088&page=1&high_quality=1&danmaku=true" allowfullscreen="no" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>
        </div>
        <script>
            document.getElementById("mmedia-AHoeaYOq").style.height=document.getElementById("mmedia-AHoeaYOq").scrollWidth*0.76+"px";
            window.onresize = function(){
              document.getElementById("mmedia-AHoeaYOq").style.height=document.getElementById("mmedia-AHoeaYOq").scrollWidth*0.76+"px";
            };
        </script>
        
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>计算机视觉</tag>
        <tag>目标跟踪</tag>
      </tags>
  </entry>
  <entry>
    <title>mAP的计算总结</title>
    <url>/posts/b8ba7454.html/</url>
    <content><![CDATA[<h2 id="question">Question</h2>
<ul>
<li><code>mAP</code>的流程</li>
</ul>
<h2 id="map的流程">mAP的流程</h2>
<p><code>mAP</code>是目标检测中最为常见的指标,要了解<code>mAP(mean Average Precision)</code>,就必须了解<code>recall</code>和<code>precision</code>(目标检测中这两个指标的计算和略有机器学习不同)</p>
<table>
<thead>
<tr class="header">
<th align="right">真</th>
<th align="center">正</th>
<th align="left">负</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="right">正</td>
<td align="center">TP</td>
<td align="left">FN</td>
</tr>
<tr class="even">
<td align="right">负</td>
<td align="center">FP</td>
<td align="left">TN</td>
</tr>
</tbody>
</table>
<p>首先,在进行目标检测时,预测出一个<code>BBox</code>,和对应某类<span class="math inline">\(i\)</span>的概率<span class="math inline">\(P_i\)</span>,给出一个阈值<span class="math inline">\(t\)</span>,即可以判断出预测是否是这一类,即判定上表中在第一列还是第二列.</p>
<p>然后,对于上一部中分到第一列的,计算<code>BBox</code>和<code>Ground Truth</code>的<code>IOU</code>,大于0.5的标为<code>TP</code>,小于为<code>FP</code>.最后,对于1中第二列的标为<code>FN</code>.</p>
<p>根据公式:</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"> <mrow> <mo>{</mo> <mtable columnalign="left left" rowspacing=".2em" columnspacing="1em" displaystyle="false"> <mtr> <mtd> <mi>R</mi> <mo>=</mo> <mfrac> <mrow> <mi>T</mi> <mi>P</mi> </mrow> <mrow> <mo stretchy="false">(</mo> <mi>T</mi> <mi>P</mi> <mo>+</mo> <mi>F</mi> <mi>N</mi> <mo stretchy="false">)</mo> </mrow> </mfrac> </mtd> </mtr> <mtr> <mtd> <mi>P</mi> <mo>=</mo> <mfrac> <mrow> <mi>T</mi> <mi>P</mi> </mrow> <mrow> <mo stretchy="false">(</mo> <mi>F</mi> <mi>P</mi> <mo>+</mo> <mi>T</mi> <mi>P</mi> <mo stretchy="false">)</mo> </mrow> </mfrac> </mtd> </mtr> </mtable> <mo fence="true" stretchy="true" symmetric="true"></mo> </mrow> </math></p>
<!--
$$
\begin{cases} R = \frac{TP}{(TP+FN)} \\ P=\frac{TP}{(FP + TP)}\end{cases}
$$



-->
<p>对于上述给定的阈值<span class="math inline">\(t\)</span>,逐渐减小,可形成多组<code>RP</code>数据对,在坐标上绘制,其与坐标轴围成的面积即为<code>AP</code>值.如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/2019042821031836.png">

</div>
<h2 id="参考">参考</h2>
<ul>
<li>https://blog.csdn.net/xiezongsheng1990/article/details/89608923</li>
</ul>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>目标检测</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO9000总结</title>
    <url>/posts/5ca973ed.html/</url>
    <content><![CDATA[<h1 id="question">Question</h1>
<ul>
<li>Better体现在哪些方面</li>
<li>Anchor Box的数据结构是怎样的</li>
<li>Anchor Box 聚类的衡量标准是什么</li>
<li>约束预测边框的目的是什么，是怎么做的</li>
<li>pass through层是怎么做的</li>
<li>对于Faster，YOLOV2采用了什么办法</li>
<li>何为WordTree，如何构成</li>
<li>在WordTree上如何打标签</li>
<li>WordTree上非根节点表示什么</li>
<li>一个类别的绝对概率如何计算</li>
<li>在许多类时，绝对阈值计算如何处理</li>
</ul>
<h1 id="better">Better:</h1>
<h2 id="batch-normalization">Batch Normalization</h2>
<p>通过在<code>YOLO</code>的所有卷积层上添加<code>Batch Normalization</code>层，发现<code>mAP</code>提高了<span class="math inline">\(2 \%\)</span></p>
<h2 id="high-resolution-classifier">High Resolution Classifier</h2>
<p>在<code>YOLOV1</code>的版本中，采用<span class="math inline">\(224 \times 224\)</span> 的输入，在<code>V2</code>版本中加入<span class="math inline">\(448 \times 448\)</span>的图片对模型训练，发现模型提高了<span class="math inline">\(4\%\)</span>的<code>mAP</code>值</p>
<p>具体过程是先用<span class="math inline">\(224 \times 224\)</span>的图片训练160个<code>epoch</code>，再用<span class="math inline">\(448 \times 448\)</span>的图片训练10个<code>epoch</code></p>
<h2 id="convolutional-with-anchor-boxes">Convolutional With Anchor Boxes</h2>
<p>去掉<code>V1</code>中的全连接层，仿照<code>Faster R-CNN</code>加入<code>Anchor Box</code></p>
<h2 id="dimension-cluster">Dimension Cluster</h2>
<p>在<code>YOLO V2</code>中的<code>Anchor Box</code>的长宽比并未采用<code>Faster R-CNN</code>的手动输入，而是采用用<code>Ground Truth</code>聚类的方式，所用的聚类算法采用<code>K-Means</code>,距离的度量指标为： <span class="math display">\[
D(box,centroid)=1-IOU(box,centroid)
\]</span> 其中，<span class="math inline">\(box\)</span>表示一个<code>Ground Truth</code>的框，<span class="math inline">\(centroid\)</span>表示聚点的框，<span class="math inline">\(IOU(box,centroid)\)</span>表示一个<code>Ground Truth</code>和聚点之间的<span class="math inline">\(IOU\)</span>.</p>
<p>至于 <span class="math inline">\(K\)</span> 的选择，文中作者选择了5个<code>Anchor Box</code>,至于为什么选择5个，用作者的话说就是在效果和复杂度之间找到一个平衡。如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210420104719.png">

</div>
<p>从图中可以看出，在5个<code>Anchor Box</code>之后平均的<span class="math inline">\(IOU\)</span>增长并没有这么快了，所以这里选择5个。</p>
<h2 id="direct-location-prediction">Direct location prediction</h2>
<p>在<code>Faster R-CNN</code>中，是直接预测的<span class="math inline">\(t\)</span>,也就是直接预测的<code>Ground Truth</code>和<code>Anchor Box</code>的偏移量。在<code>YOLO V2</code>中，论文沿用的<code>V1</code>的概念，以<span class="math inline">\(grid \ cell\)</span>为单位计算，也就是说，<code>YOLO V2</code>预测的是相对于<span class="math inline">\(grid \ cell\)</span>的偏移量： <span class="math display">\[
b_x = \sigma(t_x) + c_x
\]</span></p>
<p><span class="math display">\[
b_y =\sigma(t_y)+c_y
\]</span></p>
<p><span class="math display">\[
b_w=p_we^{t_w}
\]</span></p>
<p><span class="math display">\[
b_h=p_he{t_h}
\]</span></p>
<p>上式中，<span class="math inline">\(\sigma\)</span>表示一个<span class="math inline">\(sigmoid\)</span>函数，利用<span class="math inline">\(sigmoid\)</span>,可以将偏移量限制在<span class="math inline">\((0,1)\)</span>之间.<span class="math inline">\(c_x\)</span>和<span class="math inline">\(c_y\)</span>表示当前<span class="math inline">\(grid \ cell\)</span>相对于左上角的坐标（<strong>注意，不是距离</strong>），如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210423104433.png">

</div>
<p>加入<span class="math inline">\(sigmoid\)</span>函数的目的：在模型训练的早期，预测的<code>box</code>并不稳定，所以加入<span class="math inline">\(sigmoid\)</span>函数使预测结果固定在<span class="math inline">\((0,1)\)</span>之间</p>
<h2 id="fine-grained-features">Fine-Grained Features</h2>
<p>加入Pass Through层，过程如下</p>
<blockquote>
<p>Pass Through层类似做步数为2的Pooling,按照相同位置组合成4个块,最后再在通道上叠加,比如上一层的输出为<span class="math inline">\(26 \times 26 \times 512\)</span>,拆分成<span class="math inline">\(4 \times 13 \times 13 \times 512\)</span> 最后组成<span class="math inline">\(13 \times 13 \times 3072\)</span></p>
</blockquote>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/passthrough1.jpg">

</div>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/passthrough2.jpg">

</div>
<h2 id="mult-scale-training">Mult-Scale Training</h2>
<p>YOLO V2在训练的时候每经过几轮（每经过10epochs）迭代后就会微调网络，随机选择新的图片尺寸。YOLO网络使用的降采样参数为32，那么就使用32的倍数进行尺度{320,352,⋯，608}</p>
<h1 id="faster">Faster:</h1>
<p>采用Darknet-19网络结构，结构如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210423111421.png">

</div>
<h1 id="strongeryolo-9000">Stronger(YOLO 9000)</h1>
<p>为了能识别9000个目标,构建了一个WordTree,与一般的<span class="math inline">\(softmax\)</span>不同的是类别本身和气父节点均需标记为1.比如Dog,在Animal位置也需标记为1.</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/WordTree.png" alt="&#39;WordTree&#39;">
<p class="caption">'WordTree'</p>
</div>
<p>在预测时,一个类别的概率为根节点到该节点所有概率的乘积,如 <span class="math display">\[
P(Hunting Dog)=p(Hunting Dog|Dog, Animal)P(Dog| Animal)
\]</span> 其中,由于Animal处于根节点有<span class="math inline">\(P(Animal)=1\)</span></p>
<p>注:在实际计算绝对概率时,并不会真的计算每一个子节点的概率,而是采用贪婪算法,当从根节点项子节点走时,如果小于阈值,则不在向下走了.》</p>
<h1 id="参考">参考</h1>
<blockquote>
<ul>
<li><a href="https://www.cnblogs.com/wangguchangqing/p/10480995.html" target="_blank" rel="noopener">Direct location prediction详细说明</a></li>
<li>吴恩达DeepLearningai系列课程</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>YOLO V1总结</title>
    <url>/posts/16c1a0a5.html/</url>
    <content><![CDATA[<p>YOLO​ v1的总结,备忘</p>
<h2 id="question">Question</h2>
<ul>
<li>对于不同尺寸的输入图像YOLO是怎么解决的</li>
<li>YOLO V1输出的数据结构如何（几维数据，每一维数据分别代表什么）</li>
<li>为何YOLO V1要用两个BBox</li>
<li>标签中的<span class="math inline">\(Confidence\)</span>如何确定</li>
<li><span class="math inline">\(Confidence\)</span>是什么时候得到的</li>
<li>YOLO的<span class="math inline">\(Loss\)</span>是<span class="math inline">\(L1 Loss\)</span>还是<span class="math inline">\(L2 Loss\)</span></li>
<li>YOLO V1的优点及缺点</li>
</ul>
<h2 id="网络设计">网络设计</h2>
<p>YOLO算法的设计理念是将图像分成<span class="math inline">\(s \times s\)</span>的网络结构,每个网格分别来判定是否目标在其中,这其中运用了用卷积层来代替全连接层,这项技术是Idea的关键.所以最终的结果是</p>
<p><span class="math display">\[s \times  s \times(B \times 5 + C)\]</span></p>
<p>其中,B表示BBox的个数,C代表类别个数,5表示(x,y,w,h,confidence)。</p>
<p>总体的网络图如下图所示：</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/20210319133657.png">

</div>
<h2 id="训练">训练</h2>
<p>由于YOLO算法是将图像切割成方格并预测的思想,所以对图像的输入尺寸并不敏感.</p>
<p>在输出方面,如下图所示:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/YOLOV1结构.jpg">

</div>
<ol style="list-style-type: decimal">
<li>Feature Map中的一个值给出一个预测,为何输出中却是两个BBox?</li>
</ol>
<blockquote>
<p>YOLO由3类标签组成:类别,置信度,BBox位置.其中Feature Map中的一个值有两个BBox,而仅有一个One-Hot类别向量.之所以用两个BBox,文中的解释是:两个BBox用结果好的那个,另一个舍去,这样总好过仅用一个BBox的结果.</p>
<p>那么,怎么样判定哪一个BBox结果好呢,答案是IOU,即<span class="math inline">\(IOU_{pred}^{truth}\)</span>,选择IOU大的那个</p>
</blockquote>
<ol start="2" style="list-style-type: decimal">
<li>训练集中的confidence如何确定?</li>
</ol>
<blockquote>
<p>在1中可以得到<span class="math inline">\(IOU_{pred}^{truth}\)</span>,如果该Feature Map值中有物体,则为IOU,否则为0.</p>
<p><span class="math display">\[ confidenc标签=\begin{cases} IOU_{pred}^{truth},&amp;有物体\\ 0,&amp;无物体 \end{cases}\]</span></p>
<p>值得说明的是,两个BBox,一个为<span class="math inline">\(IOU_{pred}^{truth}\)</span>,另一个的confidence也为0</p>
</blockquote>
<h2 id="loss函数">LOSS函数</h2>
<p>由于<code>YOLO</code>的结果分为三部分（即位置，confidence以及class），所以，其<code>loss</code>函数也分为三部分： <span class="math display">\[
loss= \sum_{i=0}^{s^2}\sum_{j=0}^{B}{ coord_{err}+confidence_{err}+class_{err}}
\]</span> 其中，<span class="math inline">\(coord_{err}\)</span>表示坐标的<code>loss</code>,<span class="math inline">\(confidence_{err}\)</span>表示置信度的<code>loss</code>,<span class="math inline">\(class_{err}\)</span>表示分类的<code>loss</code>。</p>
<ul>
<li><p>坐标的<code>loss</code>可以展开为： <span class="math display">\[
  coord_{err}=\lambda_{coord}\sum_{i=0}^{S^2}\sum_{j=0}^{B}1_{ij}^{obj}[(x_i-\hat{x_i})^2+(y_i-\hat{y_i})^2]+\lambda_{coord}\sum_{i=0}^{S^2}\sum_{j=0}^{B}1_{ij}^{obj}[(\sqrt{w_i}-\sqrt{\hat{w_i}})^2+(\sqrt{h_i}-\sqrt{\hat{h_i}})^2]
  \]</span> 其中，有帽的表示标注值，否则表示预测值。<span class="math inline">\(\lambda_{coord}\)</span>表示坐标权重，实际上也可以看成坐标的<code>loss</code>在总的<code>loss</code>中所占的权重。<span class="math inline">\(1_{ij}^{obj}\)</span>表示该方格是否有物体，有物体则为1，否则为0。可以看出，坐标的<code>loss</code>仅关心有物体的<code>cell</code>，无物体的不计入<code>loss</code>范围内。</p></li>
<li><p><span class="math inline">\(confidence\)</span>的<code>loss</code>展开为：</p></li>
</ul>
<p><span class="math display">\[
confidence_{err}=\sum_{i=0}^{S^2}\sum_{j=0}^{B}1_{ij}^{obj}(C_i-\hat{C_i})^2+\lambda_{noobj}\sum_{i=0}^{S^2}\sum_{j=0}^{B}1_{ij}^{noobj}(C_i-\hat{C_i})^2
\]</span></p>
<p>​ 其中，<span class="math inline">\(\lambda_{noobj}\)</span>表示没有物体的权重，在实际的预测任务中，有物体的<code>cell</code>会多于没有物体的<code>cell</code>,这就造成两者的不均衡，所以这里加入一个权重参数，以平衡两者。论文中<span class="math inline">\(\lambda_{noobj}=0.5\)</span>.</p>
<ul>
<li>class的loss展开为：</li>
</ul>
<p><span class="math display">\[
\sum_{i=0}^{S^2}1_{i}^{obj}\sum_{c\in{classes}}(p_i(c)-\hat{p_i}(c))^2
\]</span></p>
<p>​ 同坐标的<code>loss</code>一样，分类的<code>loss</code>也仅用有物体的<code>cell</code>，并且，<strong>分类也是采用的回归</strong>，非<code>Cross-Entropy</code>.</p>
<p>整体的Loss如下所示：</p>
<p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"> <mtable displaystyle="true"> <mlabeledtr> <mtd id="mjx-eqn-1"> <mtext>(1)</mtext> </mtd> <mtd> <mi>L</mi> <mi>o</mi> <mi>s</mi> <mi>s</mi> <mo>=</mo> <msub> <mi>λ<!-- λ --></mi> <mrow class="MJX-TeXAtom-ORD"> <mi>c</mi> <mi>o</mi> <mi>o</mi> <mi>r</mi> <mi>d</mi> </mrow> </msub> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <msup> <mi>S</mi> <mn>2</mn> </msup> </mrow> </munderover> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>j</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>B</mi> </mrow> </munderover> <mstyle mathsize="1.2em"> <msubsup> <mn>1</mn> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mi>j</mi> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msubsup> <mo stretchy="false">[</mo> <mo stretchy="false">(</mo> <msub> <mi>x</mi> <mi>i</mi> </msub> <mo>−<!-- − --></mo> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>x</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo>+</mo> <mo stretchy="false">(</mo> <msub> <mi>y</mi> <mi>i</mi> </msub> <mo>−<!-- − --></mo> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>y</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo stretchy="false">]</mo> <mo>+</mo> </mstyle> <mspace linebreak="newline"> <msub> <mi>λ<!-- λ --></mi> <mrow class="MJX-TeXAtom-ORD"> <mi>c</mi> <mi>o</mi> <mi>o</mi> <mi>r</mi> <mi>d</mi> </mrow> </msub> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <msup> <mi>S</mi> <mn>2</mn> </msup> </mrow> </munderover> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>j</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>B</mi> </mrow> </munderover> <mstyle mathsize="1.2em"> <msubsup> <mn>1</mn> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mi>j</mi> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msubsup> <mo stretchy="false">[</mo> <mo stretchy="false">(</mo> <msqrt> <msub> <mi>w</mi> <mi>i</mi> </msub> </msqrt> <mo>−<!-- − --></mo> <msqrt> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>w</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> </msqrt> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo>+</mo> </mstyle> <mspace linebreak="newline"> <mo stretchy="false">(</mo> <msqrt> <msub> <mi>h</mi> <mi>i</mi> </msub> </msqrt> <mo>−<!-- − --></mo> <msqrt> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>h</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> </msqrt> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo stretchy="false">]</mo> <mo>+</mo> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>S</mi> </mrow> </munderover> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>j</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>B</mi> </mrow> </munderover> <mstyle mathsize="1.2em"> <msubsup> <mn>1</mn> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mi>j</mi> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msubsup> <mo stretchy="false">(</mo> <msub> <mi>c</mi> <mi>i</mi> </msub> <mo>−<!-- − --></mo> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>c</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo>+</mo> </mstyle> <mspace linebreak="newline"> <msub> <mi>λ<!-- λ --></mi> <mrow class="MJX-TeXAtom-ORD"> <mi>n</mi> <mi>o</mi> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msub> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>S</mi> </mrow> </munderover> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>j</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>B</mi> </mrow> </munderover> <mstyle mathsize="1.2em"> <msubsup> <mn>1</mn> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mi>j</mi> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>n</mi> <mi>o</mi> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msubsup> <mo stretchy="false">(</mo> <msub> <mi>c</mi> <mi>i</mi> </msub> <mo>−<!-- − --></mo> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>c</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> <msup> <mo stretchy="false">)</mo> <mn>2</mn> </msup> <mo>+</mo> </mstyle> <mspace linebreak="newline"> <munderover> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mo>=</mo> <mn>0</mn> </mrow> <mrow class="MJX-TeXAtom-ORD"> <msup> <mi>S</mi> <mn>2</mn> </msup> </mrow> </munderover> <mstyle mathsize="1.2em"> <msubsup> <mn>1</mn> <mrow class="MJX-TeXAtom-ORD"> <mi>i</mi> <mi>j</mi> </mrow> <mrow class="MJX-TeXAtom-ORD"> <mi>o</mi> <mi>b</mi> <mi>j</mi> </mrow> </msubsup> <munder> <mo>∑<!-- ∑ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>C</mi> <mo>∈<!-- ∈ --></mo> <mrow class="MJX-TeXAtom-ORD"> <mi>c</mi> <mi>l</mi> <mi>a</mi> <mi>s</mi> <mi>s</mi> </mrow> </mrow> </munder> <mo stretchy="false">[</mo> <msub> <mi>p</mi> <mi>i</mi> </msub> <mo stretchy="false">(</mo> <mi>c</mi> <mo stretchy="false">)</mo> <mo>−<!-- − --></mo> <mrow class="MJX-TeXAtom-ORD"> <mover> <msub> <mi>p</mi> <mi>i</mi> </msub> <mo stretchy="false">^<!-- ^ --></mo> </mover> </mrow> <mo stretchy="false">(</mo> <mi>c</mi> <mo stretchy="false">)</mo> <msup> <mo stretchy="false">]</mo> <mn>2</mn> </msup> </mstyle> </mspace></mspace></mspace></mspace></mtd> </mlabeledtr> </mtable> </math></p>
<!-- 以下公式hexo无法换行,用以下公式生成MathML,粘贴在上面
$$
Loss=\lambda_{coord}\sum_{i=0}^{S^2}\sum_{j=0}^{B}\large 1_{ij}^{obj}[(x_i-\hat{x_i})^2+(y_i-\hat{y_i})^2] + \\
\lambda_{coord}\sum_{i=0}^{S^2}\sum_{j=0}^{B}\large 1_{ij}^{obj}[(\sqrt{w_i}-\sqrt{\hat{w_i}})^2+\\
(\sqrt{h_i}-\sqrt{\hat{h_i}})^2]+ \sum_{i=0}^{S}\sum_{j=0}^{B} \large 1_{ij}^{obj} (c_i-\hat{c_i})^2 + \\ 
\lambda_{noobj}\sum_{i=0}^{S}\sum_{j=0}^{B} \large 1_{ij}^{noobj} (c_i-\hat{c_i})^2 +\\
\sum_{i=0}^{S^2}\large 1_{ij}^{obj}\sum_{C\in{class}}[p_i(c)-\hat{p_i}(c)]^2
$$
-->
<p>YOLO 算法的LOSS是一个L2 LOSS</p>
<h2 id="预测">预测</h2>
<p>对于模型得出的<span class="math inline">\(S\times S \times 2\)</span>个BBox</p>
<blockquote>
<ol style="list-style-type: decimal">
<li><p>先用NMS得出一系列BBox(依据是confidence)</p></li>
<li><p>再在这些框中选最大概率的类别</p></li>
</ol>
</blockquote>
<h2 id="优点以及缺点">优点以及缺点</h2>
<blockquote>
<p>优点:</p>
<ol style="list-style-type: decimal">
<li>速度快</li>
<li>End-2-End</li>
</ol>
<p>缺点:</p>
<ol style="list-style-type: decimal">
<li><p>小物体效果不好</p></li>
<li><p>定位不准确</p></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>人物背景抠图</title>
    <url>/posts/10cdf8fe.html/</url>
    <content><![CDATA[<h2 id="示例图片">示例图片</h2>
<p>免冠照人物背景抠图实现,先展示一下示例结果:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/原始示例图片.png">

</div>
<p>人物背景抠图后:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/替换示例图片.png">

</div>
<h2 id="执行步骤">执行步骤</h2>
<h3 id="将rgb空间转换为hsv空间">将RGB空间转换为HSV空间</h3>
<p>首先需要统计出背景(蓝色部分)的颜色范围,这里将RGB空间转换为HSV空间,然后只用H分量统计,就可以统计出蓝色背景的大概范围:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">blue_photo_hsv = cv2.cvtColor(blue_photo,cv2.COLOR_RGB2HSV)</span><br><span class="line">h_ele = blue_photo_hsv[:,:,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h3 id="做h分量的统计">做H分量的统计</h3>
<p>为了简单起见,这里截取上1/6的部分图像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line">%matplotlib inline</span><br><span class="line"></span><br><span class="line">sns.set_style(<span class="string">"darkgrid"</span>)</span><br><span class="line"></span><br><span class="line">w,h,_= blue_photo_hsv.shape</span><br><span class="line">hist_bins = plt.hist(blue_photo_hsv[:int(w/<span class="number">6</span>),:,<span class="number">0</span>].flatten(),bins = <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<p>直方图统计结果:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/直方图结果.png">

</div>
<h3 id="掩膜">掩膜</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lower_h = hist_bins[<span class="number">1</span>][hist_bins[<span class="number">0</span>].argmax()]</span><br><span class="line">bins_interval = hist_bins[<span class="number">1</span>][<span class="number">1</span>] - hist_bins[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">upper_h = lower_h + <span class="number">1</span> * bins_interval</span><br><span class="line">lower = np.array([lower_h,<span class="number">43</span>,<span class="number">46</span>])</span><br><span class="line">upper = np.array([upper_h,<span class="number">256</span>,<span class="number">256</span>])</span><br><span class="line"></span><br><span class="line">mask = cv2.inRange(blue_photo_hsv, lower,upper)</span><br><span class="line">plt.imshow(mask)</span><br></pre></td></tr></table></figure>
<p>掩膜结果:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/掩膜结果.png" alt="&#39;掩膜结果&#39;">
<p class="caption">'掩膜结果'</p>
</div>
<h3 id="腐蚀和膨胀">腐蚀和膨胀</h3>
<p>腐蚀的目的是去除分割线周围的噪声,膨胀是填补掩膜结果中的小空白.这里的腐蚀和膨胀的模板都是用的3*3</p>
<p>腐蚀:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取反</span></span><br><span class="line">mask = <span class="number">255</span> - mask</span><br><span class="line"><span class="comment"># 边长</span></span><br><span class="line">side_len = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">kernel = np.ones((side_len,side_len))</span><br><span class="line">erode_img = cv2.erode(mask,kernel,iterations = <span class="number">1</span>)</span><br><span class="line">erode_img.shape</span><br><span class="line">plt.imshow(erode_img)</span><br></pre></td></tr></table></figure>
<p>腐蚀后结果:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/腐蚀后.png" alt="&#39;腐蚀后结果&#39;">
<p class="caption">'腐蚀后结果'</p>
</div>
<p>膨胀:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">side_len =<span class="number">3</span></span><br><span class="line"></span><br><span class="line">kernel = np.ones((side_len,side_len))</span><br><span class="line">dilate_img = cv2.dilate(erode_img,kernel,iterations = <span class="number">1</span>)</span><br><span class="line">plt.imshow(dilate_img)</span><br></pre></td></tr></table></figure>
<p>膨胀后:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/膨胀后.png" alt="&#39;膨胀后&#39;">
<p class="caption">'膨胀后'</p>
</div>
<h3 id="替换背景">替换背景</h3>
<p>一旦替换模板比较准确,人物背景抠图就比较容易了.下面是背景图:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/背景图.png" alt="&#39;背景图&#39;">
<p class="caption">'背景图'</p>
</div>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n_row,n_col = dilate_img.shape</span><br><span class="line"></span><br><span class="line">start_coor = [<span class="number">10</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(n_row):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(n_col):</span><br><span class="line">        <span class="keyword">if</span> dilate_img[row][col] == <span class="number">255</span>:</span><br><span class="line">            back_img[start_coor[<span class="number">0</span>] + row][start_coor[<span class="number">1</span>] + col] = blue_photo[row][col]</span><br><span class="line"></span><br><span class="line">plt.imshow(back_img)</span><br></pre></td></tr></table></figure>
<p>根据模板替换后:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/替换示例图片-1580097685097.png" alt="&#39;人物背景抠图后&#39;">
<p class="caption">'人物背景抠图后'</p>
</div>
<p>最后根据原有的图片尺寸切割出结果图像就可以实现替换了.</p>
<h2 id="多图测试">多图测试</h2>
<p>网上爬取了十张大小不一图像测试,缩放到200*150(如有侵权请告知,谢谢).</p>
<p>原图像:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/效果原图像-1580099162567.png">

</div>
<p>替换后:</p>
<div class="figure">
<img src="https://blog-1253764997.cos.ap-chongqing.myqcloud.com/效果图-1580099178206.png">

</div>
]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>图像处理</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
</search>
